
#include <stdlib.h>
#include <stdio.h>
#include <vector>
#include <math.h>
#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <R.h>
#include <Rdefines.h>
#include <Rmath.h>
//#include <Rcpp.h>


//using namespace Rcpp;
using namespace std;


#ifndef PARAM_H_INCLUDED
#define PARAM_H_INCLUDED



//classe regroupant les paramètres à intégrer dans le modèle, les variables intermédiaires (discrétisation du processus),
//ainsi que les sorties du modèle
class BioEcoPar
{
public: //normalement, selon les conventions,  les attributs doivent être "private"

typedef  double (BioEcoPar::*BEfn1)(double mult);
typedef  double (BioEcoPar::*BEfn1_F)(double *x);

//   INPUTS   ------------------

SEXP    list;       //liste d'objets R constituant la donnée entrée du modèle. Certaines variables seront remises à jour dans le cadre
                    //de mesures de gestion ou de modélisation de comportement.


//   OUTPUTS  ------------------

//outputs des différents modules (à initialiser pour t=0)
SEXP    out_F_fmi,  //mortalité "captures" par pêche (par espèce)
        out_Fr_fmi,  //mortalité totale (corrigée de la survie) par pêche (par espèce)
        out_Z_eit,  //coefficient de mortalité totale
        out_Fbar_et,  //Fbar par espèce (t)
        out_N_eit,  //effectifs en nombre
        out_B_et,   //biomasse (t)
        out_SSB_et, //biomasse de reproducteurs (t)
        out_C_efmit,//captures en nombres
        out_C_eit,  //captures totales en nombres
        out_Y_efmit,//captures en poids (t)
        out_Y_eit,  //captures totales en poids (t)
        out_D_efmit,//rejets en poids (t)
        out_L_efmit,//débarquements en poids aux âges(t)
        out_L_efmct,//débarquements en poids par catégories(t)
        out_L_eit,//débarquements en poids par catégories(t) pour le codage métier eco

        out_oqD_eft,//rejets over-quotas par flottille (espèces dynamiques)
        out_oqD_et,//rejets over-quotas total (espèces dynamiques)

        out_Ystat,  //captures totales en poids (t) pour les espèces statiques
        out_Lstat,  //débarquements totaux en poids (t) pour les espèces statiques
        out_Dstat,  //rejets totaux en poids (t) pour les espèces statiques

        out_oqDstat, //rejets over-quotas par flottille espèces statiques

        out_P_t,    //prix moyen (en euros) (niveau métier éco si dispo)
        out_Pstat,    //prix moyen (en euros) (niveau métier éco si dispo) pour les espèces statiques
        out_CA_eft, //chiffre d'affaires par espèce dynamique (en euros)
        out_CAstat, //chiffre d'affaires par espèce statique (en euros)
        out_CAT_ft, //chiffre d'affaires total (en euros)
        out_CA_ft,  //chiffre d'affaires moyen par navire (en euros)
        out_RAP_ft, //reste à partager (en euros)
        out_EBE_ft, //excédent brut d'exploitation (en euros)
        out_ENE_ft, //excédent net d'exploitation (en euros)
        out_SA_ft,  //surplus du capital (en euros)
        out_PS_t,   //surplus producteur (en euros)
        out_ES_t,   //surplus de l'Etat (en euros)
        out_Eco,
        out_EcoDCF,
        out_effort, //variables d'effort utilisées lors de la simulation
        out_SRmod,
        out_PQuot_et,
        out_typeGest,
        out_F_fmi_S1M1, out_F_fmi_S1M2, out_F_fmi_S1M3, out_F_fmi_S1M4, out_F_fmi_S2M1, out_F_fmi_S2M2, out_F_fmi_S2M3, out_F_fmi_S2M4,
        out_F_fmi_S3M1, out_F_fmi_S3M2, out_F_fmi_S3M3, out_F_fmi_S3M4, out_F_fmi_S4M1, out_F_fmi_S4M2, out_F_fmi_S4M3, out_F_fmi_S4M4,  //mortalité "captures" par pêche (par espèce)
        out_Fr_fmi_S1M1, out_Fr_fmi_S1M2, out_Fr_fmi_S1M3, out_Fr_fmi_S1M4, out_Fr_fmi_S2M1, out_Fr_fmi_S2M2, out_Fr_fmi_S2M3, out_Fr_fmi_S2M4,
        out_Fr_fmi_S3M1, out_Fr_fmi_S3M2, out_Fr_fmi_S3M3, out_Fr_fmi_S3M4, out_Fr_fmi_S4M1, out_Fr_fmi_S4M2, out_Fr_fmi_S4M3, out_Fr_fmi_S4M4,  //mortalité totale (corrigée de la survie) par pêche (par espèce)
        out_FRWT_fmi_S1M1, out_FRWT_fmi_S1M2, out_FRWT_fmi_S1M3, out_FRWT_fmi_S1M4, out_FRWT_fmi_S2M1, out_FRWT_fmi_S2M2, out_FRWT_fmi_S2M3, out_FRWT_fmi_S2M4,
        out_FRWT_fmi_S3M1, out_FRWT_fmi_S3M2, out_FRWT_fmi_S3M3, out_FRWT_fmi_S3M4, out_FRWT_fmi_S4M1, out_FRWT_fmi_S4M2, out_FRWT_fmi_S4M3, out_FRWT_fmi_S4M4,
        out_FDWT_fmi_S1M1, out_FDWT_fmi_S1M2, out_FDWT_fmi_S1M3, out_FDWT_fmi_S1M4, out_FDWT_fmi_S2M1, out_FDWT_fmi_S2M2, out_FDWT_fmi_S2M3, out_FDWT_fmi_S2M4,
        out_FDWT_fmi_S3M1, out_FDWT_fmi_S3M2, out_FDWT_fmi_S3M3, out_FDWT_fmi_S3M4, out_FDWT_fmi_S4M1, out_FDWT_fmi_S4M2, out_FDWT_fmi_S4M3, out_FDWT_fmi_S4M4,
        out_Z_eit_S1M1, out_Z_eit_S1M2, out_Z_eit_S1M3, out_Z_eit_S1M4, out_Z_eit_S2M1, out_Z_eit_S2M2, out_Z_eit_S2M3, out_Z_eit_S2M4,
        out_Z_eit_S3M1, out_Z_eit_S3M2, out_Z_eit_S3M3, out_Z_eit_S3M4, out_Z_eit_S4M1, out_Z_eit_S4M2, out_Z_eit_S4M3, out_Z_eit_S4M4,  //coefficient de mortalité totale
        out_N_eit_S1M1, out_N_eit_S1M2, out_N_eit_S1M3, out_N_eit_S1M4, out_N_eit_S2M1, out_N_eit_S2M2, out_N_eit_S2M3, out_N_eit_S2M4,
        out_N_eit_S3M1, out_N_eit_S3M2, out_N_eit_S3M3, out_N_eit_S3M4, out_N_eit_S4M1, out_N_eit_S4M2, out_N_eit_S4M3, out_N_eit_S4M4,  //effectifs en nombre;

        out_Ytot_fm, out_DD_efmi, out_DD_efmc, out_LD_efmi, out_LD_efmc, out_statDD_efm, out_statLD_efm,
        out_statLDst_efm, out_statLDor_efm,
        intermBIOMspict; //effort1_fm et effort2_fm sont désormais inclus dans out_effort
//    VARIABLES  ---------------

//parties des inputs
SEXP    FList, sppList, sppListStat, fleetList, metierList, metierListEco, namDC, t_init, times, Q,
        NBVF, NBVFM, NBDSF, NBDSFM, EFF2F, EFF2FM, dnmsF, dnmsFM, nmsEF, mu_nbds, mu_nbv, //mulitplicateurs d'effort
        m_f, m_fm, m_oth, eVar, eVarCopy, eStatVar, //variables intermédiaires par espèces
        fVar /*variable intermédiaire flottilles*/, list_copy, FList_copy, eVar_copy, fVar_copy, othSpSupList, effSupMat, listQR, listQR_f, TACbyF, TAC, reconcilSPP, reconcilSPP_copy, recList, recParamList;

SEXP inpFtarg, inpW_Ftarg, inpMeanRec_Ftarg;

int     nbT, nbF, nbM, nbMe, nbE, nbEstat, //dimensions
        curQ, spQ, scen, //application du scénario??
        bhv_active /*application du module report d'effort*/, type, boot, nbBoot, ecodcf, typeGest, //special request ICES 2013 : pistage des règles de scénario intégré dans la variable out_typeGest
        var, trgt, delay, upd, gestInd, gestyp/*Module de gestion*/, activeQR,
        IND_T, IND_F, eTemp, fTemp /*indicateurs de temps, d'espèces et de flottilles considérés*/, corVarTACnby_CPP, Blim_trigger, maxIter, t_stop,
        *SRInd, *EcoIndCopy, *Qvec, *recType1, *recType2, *recType3; //indicateur conditionnant l'utilisation d'un recrutement aléatoire défini par la méthode implémentée RecAlea


double  PxQ, expEff, X1, X2, drCopy, tolVarTACinf_CPP, tolVarTACsup_CPP, corVarTACval_CPP, Blim_CPP, Bmax_CPP, //module de traitement stochastique de modèle de prix
        *TAC_byFleet, *TAC_glob, *Fbar_trgt, diffZmax, lambda,//paramètres de contrôle du TAC pour l'analyse des mesures de gestion pour la requête CIEM 2013 sur la SOLE GG
        *effortIni, *effort1Ini, *Zoptim, *FOTHoptim, *Ztemp, *Etemp, *Einterm_fm, *EffsupTMP_fm, *Einterm_fm_copy, *multFOTHinterm_e;//Z fixé pour résoudre l'ajustement par flottille (dimension âge)


bool    Zoptim_use, FOTHoptim_use, boolQ, ZoptSS3, //indicateur de présence de données d'effort disponible (calcul capturabilité,...)
        constMM, //indicateur qui détermine si les niveaux métiers de la partie bio et de la partie éco sont les mêmes (utilisation de l'effort par flottille-métier pour calculer la capturabilité dans le module 'Mortalité')
        fUpdate, dUpdate, cUpdate, pUpdate, eUpdate; //indicateur de mise à jour des variables de calcul



int     *SPPstatOPT, *SPPspictOPT, *SPPdynOPT, N_SPPstatOPT, N_SPPspictOPT, N_SPPdynOPT;
SEXP    ZtempList;

//    METHODES  ---------------

	//constructeur
    BioEcoPar(SEXP list, SEXP listSpec, SEXP listStochastic, SEXP listScen,
                SEXP RecType1, SEXP RecType2, SEXP RecType3, SEXP Scenarii, SEXP Bootstrp, SEXP nbBootstrp,
                SEXP GestInd, SEXP mOth, SEXP bounds, SEXP TAC, SEXP FBAR, SEXP othSpSup, SEXP effSup, SEXP GestParam, SEXP EcoDcf,
                SEXP EcoInd, SEXP dr, SEXP SRind, SEXP listSR, SEXP TypeSR, SEXP mFM, SEXP TACbyFL, SEXP Ftarg, SEXP W_Ftarg, SEXP MeanRec_Ftarg,
                SEXP parBHV, SEXP parQEX,
                SEXP tacCTRL, SEXP stochPrice, SEXP updateE, SEXP parOQD);

	//destructeur
    ~BioEcoPar();

    //accesseur d'un élément de l'input
    SEXP getListElement(SEXP list, const char *str);

    //indice d'un élément dans une liste ou un vecteur R
    int getListIndex(SEXP list, const char *str);

    //analyse des NAs dans un objet SEXP
    int all_is_na(SEXP object);

    double finite(double value);

    //indices multipliateurs pour les concordances de dimensions
    SEXP iDim(int *dimInput);

    //fontion d'agrégation d'un objet R accompagné de son attribut 'DimCst'
    SEXP aggregObj(SEXP object, SEXP newDim);

    // fonction de ventilation de la mortalité en fonction d'une matrice de données "capture"
    SEXP allocMortality(SEXP mortality, SEXP capture, SEXP captureTot);

    // fonction de calcul de l'indice de capturabilité en fonction de la mortalité par pêche et d'une variable d'effort quelconque
    SEXP calcCapturabilite(SEXP adjustedMortal, SEXP effortIni);

    void RecAlea(SEXP list, SEXP listSto, int ind_t, int type, int *recTyp);

    void SRmod(SEXP list, SEXP listSR, int ind_t, SEXP TypeSR, int *srind);

    void Scenario(SEXP list, SEXP listScen, int ind_t);

    // MODULES :
    //----------

    // Module 'Mortalité par pêche et survie des rejets'
    void Mortalite(SEXP list, int ind_t, SEXP EVAR);

    // Module 'Dynamique de population'
    void DynamicPop(SEXP list, int ind_t, SEXP EVAR, bool Reality);

    // Module 'Captures, rejets et débarquements'
	void CatchDL(SEXP list, int ind_t, SEXP EVAR);

    // Module 'Marché' : 'modCatch'
    void Marche(SEXP list, int ind_t);

    // Module 'Economie' DCF
    void EcoDCF(SEXP list, int ind_t,int perscCalc,double dr);

    // Module Gestion
    double fxTAC_glob(double mult);

    void Gestion(SEXP list, int ind_t);

    double zbrent(BEfn1 fx, double x1, double x2, double tol);

    void zbrak(BEfn1 fx, double x1, double x2, int n, double xb1[], double xb2[], int *nb);

    double func(double *x);
    double fxTAC_F(double *x);

    int MinimizeF(double **p, double y[], int ndim, double ftol);
    void amoeba(BEfn1_F funk, double **p, double y[], int ndim, double ftol, int *nfunk);
    double amotry(BEfn1_F funk, double **p, double y[], double psum[], int ndim, int ihi, double fac);

    double *NRvector(long nl, long nh);
    double **NRmatrix(long nrl, long nrh, long ncl, long nch);
    void free_vector(double *v, long nl, long nh);
    void free_matrix(double **m, long nrl, long nrh, long ncl, long nch);

    int GestionF(double **p, double y[], int ndim, double ftol, int ind_t);

    void FleetBehav(SEXP list, int ind_t, SEXP paramBehav);

    int QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t);

    double fxMaxProf_FT(double *x);

    double fxTAC_F_customCst(double *x);

    double fxTAC_F_customReport(double *x);

    double fxMaxProf_FT_customCst(double *x);

    double fxMaxProf_FT_customReport(double *x);

    int EstimationTACfromF(int ind_t);

    int GestionF2(int ind_t);

    double fxTAC_F_customCst2(double *x);

    int GestionF2report(int spp, int ind_t);

    double fxTAC_F_customReport2(double *x);

    int QuotaExchV2(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t);

    double fxMaxProf_FT_customCstV2(double *x);

    int QuotaExchV2Report(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t);

    double fxMaxProf_FT_customReportV2(double *x);

    void PriceAlea(SEXP list, SEXP stPrice, int ind_t);


};

#endif // PARAM_H_INCLUDED





//------------------------------------------------------------------------------------
//constructeur de la classe Param (voir 'param.h' pour les descriptions de variables)
//------------------------------------------------------------------------------------

BioEcoPar::BioEcoPar(SEXP listInput /* object@input */, SEXP listSpec /* object@specific */, SEXP listStochastic /* object@stochastic */,
                     SEXP listScen /* object@scenario */, SEXP RecType1, SEXP RecType2, SEXP RecType3, SEXP Scenarii, SEXP Bootstrp, SEXP nbBootstrp,
                     SEXP GestInd, SEXP mOth, SEXP bounds, SEXP TACL, SEXP FBAR, SEXP othSpSup, SEXP effSup, SEXP GestParam, SEXP EcoDcf,
                     SEXP EcoInd, SEXP dr, SEXP SRind, SEXP listSR, SEXP TypeSR, SEXP mFM, SEXP TACbyFL, SEXP Ftarg, SEXP W_Ftarg, SEXP MeanRec_Ftarg,
                     SEXP parBHV, SEXP parQEX,
                     SEXP tacCTRL, SEXP stochPrice, SEXP updateE, SEXP parOQD)
{

//ofstream //fichier("C:\\Users\\mmerzere\\Desktop\\test2\\test.txt", ios::out | ios::trunc);
//fichier << "Début " << endl;



PROTECT(listSpec);
PROTECT(parOQD); //+1
effortIni = REAL(getListElement(getListElement(listInput, "Fleet"), "nbds_f"));
effort1Ini = REAL(getListElement(getListElement(listInput, "Fleet"), "effort1_f"));
PROTECT_INDEX ipx_list;
PROTECT_INDEX ipx_FList;
PROTECT_INDEX ipx_eVar;
PROTECT_INDEX ipx_eStatVar;
PROTECT_INDEX ipx_fVar;
PROTECT_INDEX ipx_list_copy;
PROTECT_INDEX ipx_FList_copy;
PROTECT_INDEX ipx_eVar_copy;
PROTECT_INDEX ipx_eStatVar_copy;
PROTECT_INDEX ipx_fVar_copy;

//Rprintf("step0\n");fichier << "step0" << endl;

PROTECT_WITH_INDEX(list = duplicate(listInput),&ipx_list);
PROTECT_WITH_INDEX(list_copy = duplicate(list),&ipx_list_copy);
PROTECT_WITH_INDEX(FList = getListElement(list, "Fleet"),&ipx_FList);
PROTECT_WITH_INDEX(FList_copy = getListElement(list_copy, "Fleet"),&ipx_FList_copy);


PROTECT(listQR = getListElement(parOQD, "listQR")); //+1
PROTECT(listQR_f = getListElement(parOQD, "listQR_f")); //+1
activeQR = INTEGER(getListElement(parOQD, "activeQR"))[0];

PROTECT(sppList = getListElement(listSpec, "Species"));
PROTECT(sppListStat = getListElement(listSpec, "StaticSpp"));
PROTECT(fleetList = getListElement(listSpec, "Fleet"));
PROTECT(metierList = getListElement(listSpec, "MetierEco"));
PROTECT(metierListEco = getListElement(listSpec, "MetierEco"));
PROTECT(namDC = getListElement(listSpec, "Ages"));
PROTECT(t_init = getListElement(listSpec, "t_init"));
PROTECT(times = getListElement(listSpec, "times"));
PROTECT(Q = getListElement(listSpec, "Q")); //24

Qvec = INTEGER(Q);

Zoptim = effortIni;
FOTHoptim = effortIni;
Zoptim_use = false;
FOTHoptim_use = false;



//Rprintf("step0\n");fichier << "step0 " << endl;

nbT = INTEGER(getListElement(listSpec, "NbSteps"))[0];
nbF = length(fleetList);
nbM = length(metierList);
nbMe = length(metierListEco);
nbE = length(sppList);
nbEstat = length(sppListStat);

ecodcf = INTEGER(EcoDcf)[0];
EcoIndCopy = INTEGER(EcoInd);
drCopy = REAL(dr)[0];

int conform = 0;
typeGest = 0;
SEXP FList_copy, list_copy, eVar_copy, eStatVar_copy, fVar_copy;

recType1 = INTEGER(RecType1);//vecteur d'entiers de longueur nbE
recType2 = INTEGER(RecType2);//vecteur d'entiers de longueur nbE
recType3 = INTEGER(RecType3);//vecteur d'entiers de longueur nbE
boot = INTEGER(Bootstrp)[0];
nbBoot = INTEGER(nbBootstrp)[0];
boolQ = true;// paramètre voué à rester fixe -> on calculera toujours la capturabilité afin de moduler la mortalité en fonction de l'effort de pêche
constMM = true; //on calcule la capturabilité via l'effort par flottille (incompatibilité des niveaux métiers entre bio et éco)
fUpdate = true;    // à t=0, on remet à jour
dUpdate = true;    //
cUpdate = true;    //
pUpdate = true;    //
eUpdate = true;    //

scen = INTEGER(Scenarii)[0];
bhv_active = INTEGER(getListElement(parBHV, "active"))[0];

tolVarTACinf_CPP = REAL(getListElement(tacCTRL, "tolVarTACinf"))[0];
tolVarTACsup_CPP = REAL(getListElement(tacCTRL, "tolVarTACsup"))[0];
corVarTACval_CPP = REAL(getListElement(tacCTRL, "corVarTACval"))[0];
corVarTACnby_CPP = INTEGER(getListElement(tacCTRL, "corVarTACnby"))[0];
Blim_CPP = REAL(getListElement(tacCTRL, "Blim"))[0];
Bmax_CPP = REAL(getListElement(tacCTRL, "Bmax"))[0];
Blim_trigger = INTEGER(getListElement(tacCTRL, "BlimTrigger"))[0];

//gestyp = INTEGER(getListElement(tacCTRL, "typeMng"))[0]; //gestyp est pris prioritairement dans tacCTRL, sinon par l'interface
//if (ISNA(gestyp))
gestyp = INTEGER(GestParam)[5] + 1; //gestyp=1(+) ou 2(x)

PROTECT(othSpSupList = othSpSup);
PROTECT(effSupMat = effSup);

gestInd = INTEGER(GestInd)[0];
PROTECT(m_fm = duplicate(mFM)); if (length(m_fm)!=nbF*nbM) error("Check dimension of array 'mFleetMetier'!!\n");
PROTECT(m_oth = duplicate(mOth)); if (length(m_oth)!=nbE) error("Check dimension of array 'mOth'!!\n");
X1 = REAL(bounds)[0];
X2 = REAL(bounds)[1];

//TAC_glob = REAL(TAC);  //à corriger
Fbar_trgt = REAL(FBAR);  //à corriger
PROTECT(TACbyF = TACbyFL);  //à corriger
PROTECT(TAC = TACL);

PROTECT(inpFtarg = Ftarg);
PROTECT(inpW_Ftarg = W_Ftarg);
PROTECT(inpMeanRec_Ftarg = MeanRec_Ftarg);


//tac_ctrl = tacCTRL;
recList = getListElement(tacCTRL, "recList");//PrintValue(recList);
recParamList = getListElement(tacCTRL, "recParamList");//PrintValue(recList);
maxIter = INTEGER(getListElement(tacCTRL, "maxIter"))[0];
diffZmax = REAL(getListElement(tacCTRL, "diffZmax"))[0];
lambda = REAL(getListElement(tacCTRL, "lambda"))[0];
t_stop = INTEGER(getListElement(tacCTRL, "t_stop"))[0];
ZoptSS3 = false;

eTemp = INTEGER(GestParam)[0];//2;
var = INTEGER(GestParam)[1];//1;
trgt = INTEGER(GestParam)[2];//1;  si NA, objectif=biomasse de l'année suivante --> trgt = 999
if (ISNA(trgt)) trgt = 999;
delay = INTEGER(GestParam)[3];//2;
upd = INTEGER(GestParam)[4];//2;

//if (eTemp<nbE) {
//  if (Qvec[eTemp]==0) {
//    Ztemp = NRvector(1,length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI")));
//  } else {
//    Ztemp = NRvector(1,length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"))*16); //les Z aux âges par morph et saison
//  }
//} else {
//  Ztemp = NRvector(1,2);
//}
Etemp = NRvector(1,nbF); //effort moyen par flottille en nombre de marées
expEff = 1.2; //1;  //facteur d'expansion de l'effort maximal par flottille autorisé dans le cadre de l'optimisation GestionF2 et QuotaExch

Einterm_fm = NRvector(1,nbF*nbMe);
Einterm_fm_copy = NRvector(1,nbF*nbMe);
EffsupTMP_fm = NRvector(1,nbF*nbMe);
multFOTHinterm_e = NRvector(1,nbE);
PROTECT(reconcilSPP = alloc3DArray(STRSXP,nbF,nbMe,nbT));
PROTECT(reconcilSPP_copy = alloc3DArray(STRSXP,nbF,nbMe,nbT));
//on l'initialise
for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
for (int ind_m = 0 ; ind_m < nbMe ; ind_m++)
for (int ind_t = 0 ; ind_t < nbT ; ind_t++) {
SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*ind_t, NA_STRING); //SET_STRING_ELT(reconcilSPP, ind_f + nbF * ind_m, mkChar(STRING_ELT(sppList,eTemp)));
SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*ind_t, NA_STRING);
}
PROTECT(ZtempList = getListElement(tacCTRL, "Ztemp"));

//int DCFok = INTEGER(EcoDcf)[0];

SRInd = INTEGER(SRind);

bool door = true;

//il faut initialiser 'eVar' dans lequel on intègrera toutes les variables intermédiaires à décliner par espèce
SEXP eltE;
PROTECT_WITH_INDEX(eVar = allocVector(VECSXP, nbE),&ipx_eVar);
if (nbE>0) {
    setAttrib(eVar, R_NamesSymbol, sppList);
    for (int e = 0 ; e < nbE ; e++) {
      PROTECT(eltE = allocVector(VECSXP,230)); //ex 62
      SET_VECTOR_ELT(eVar, e, eltE);
    }
}
PROTECT_WITH_INDEX(eVar_copy = duplicate(eVar),&ipx_eVar_copy); //19

PROTECT_WITH_INDEX(eStatVar = allocVector(VECSXP, nbEstat),&ipx_eStatVar);
if (nbEstat>0) {
    setAttrib(eStatVar, R_NamesSymbol, sppListStat);
    for (int e = 0 ; e < nbEstat ; e++) {
        PROTECT(eltE = allocVector(VECSXP,10));
        SET_VECTOR_ELT(eStatVar, e, eltE);
    }
}
PROTECT_WITH_INDEX(eStatVar_copy = duplicate(eStatVar),&ipx_eStatVar_copy); //21


//Rprintf("step0\n");fichier << "step0 " << endl;

PROTECT_WITH_INDEX(fVar = allocVector(VECSXP, 34),&ipx_fVar); //32= rtbsIni_f & 33=rtbsIni_f_m & 33=ETini_f_m
PROTECT_WITH_INDEX(fVar_copy = duplicate(fVar),&ipx_fVar_copy);

//////Rprintf("A");

PROTECT(out_F_fmi = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit = allocVector(VECSXP, nbE));
PROTECT(out_SRmod = allocVector(VECSXP, nbE));
PROTECT(out_Ystat = allocVector(VECSXP, nbEstat));//PROTECT(out_N_eitQ = allocVector(VECSXP, nbE));
PROTECT(out_Lstat = allocVector(VECSXP, nbEstat));//PROTECT(out_F_itQ = allocVector(VECSXP, nbE));
PROTECT(out_Dstat = allocVector(VECSXP, nbEstat));//PROTECT(out_SSB_etQ = allocVector(VECSXP, nbE));
PROTECT(out_PQuot_et = allocVector(VECSXP, nbE));

PROTECT(out_Fbar_et = allocVector(VECSXP, nbE));
PROTECT(out_N_eit = allocVector(VECSXP, nbE));
PROTECT(out_B_et = allocVector(VECSXP, nbE));
PROTECT(out_SSB_et = allocVector(VECSXP, nbE));
PROTECT(out_C_efmit = allocVector(VECSXP, nbE));
PROTECT(out_C_eit = allocVector(VECSXP, nbE));
PROTECT(out_Y_efmit = allocVector(VECSXP, nbE));
PROTECT(out_Y_eit = allocVector(VECSXP, nbE));
PROTECT(out_D_efmit = allocVector(VECSXP, nbE));
PROTECT(out_L_efmit = allocVector(VECSXP, nbE));
PROTECT(out_L_efmct = allocVector(VECSXP, nbE));
PROTECT(out_L_eit = allocVector(VECSXP, nbE)); //43

PROTECT(out_oqDstat = allocVector(VECSXP, nbEstat));
PROTECT(out_oqD_eft = allocVector(VECSXP, nbE));
PROTECT(out_oqD_et = allocVector(VECSXP, nbE));

PROTECT(intermBIOMspict = allocVector(VECSXP, nbE)); //+1 ajout pour insérer les 16 valeurs de biomasses intermédiaires de chacune des espèces SPiCT lors de l'évaluation des Bt+1 et des captures

PROTECT(out_F_fmi_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_F_fmi_S4M4 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_Fr_fmi_S4M4 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_FRWT_fmi_S4M4 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_FDWT_fmi_S4M4 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_Z_eit_S4M4 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S1M1 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S1M2 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S1M3 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S1M4 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S2M1 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S2M2 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S2M3 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S2M4 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S3M1 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S3M2 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S3M3 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S3M4 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S4M1 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S4M2 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S4M3 = allocVector(VECSXP, nbE));
PROTECT(out_N_eit_S4M4 = allocVector(VECSXP, nbE)); //+64 = 107

PROTECT(out_P_t = allocVector(VECSXP, nbE));
PROTECT(out_Pstat = allocVector(VECSXP, nbEstat));
PROTECT(out_Eco = allocVector(VECSXP, 69));
PROTECT(out_EcoDCF = allocVector(VECSXP, 59));
PROTECT(out_effort = allocVector(VECSXP, 6)); //nbv_f, effort1_f, effort2_f, nbv_f_m, effort1_f_m, effort2_f_m

PROTECT(mu_nbds = allocVector(REALSXP, nbT)); //il reste la mise en forme à opérer
PROTECT(mu_nbv = allocVector(REALSXP, nbT));
PROTECT(out_typeGest = allocVector(INTSXP, nbT));


PROTECT(out_Ytot_fm = NEW_NUMERIC(nbF*nbMe*nbT));
PROTECT(out_DD_efmi = allocVector(VECSXP, nbE));
PROTECT(out_DD_efmc = allocVector(VECSXP, nbE));
PROTECT(out_LD_efmi = allocVector(VECSXP, nbE));
PROTECT(out_LD_efmc = allocVector(VECSXP, nbE));
PROTECT(out_statDD_efm = allocVector(VECSXP, nbEstat));
PROTECT(out_statLD_efm = allocVector(VECSXP, nbEstat));
PROTECT(out_statLDst_efm = allocVector(VECSXP, nbEstat));
PROTECT(out_statLDor_efm = allocVector(VECSXP, nbEstat));


int *typegest = INTEGER(out_typeGest);
double *mu_nbds_t = REAL(mu_nbds); for (int i=0; i<nbT; i++) mu_nbds_t[i] = 0.0; //initialisation
double *mu_nbv_t = REAL(mu_nbv); for (int i=0; i<nbT; i++) mu_nbv_t[i] = 0.0;    //

double *mpond_fm = REAL(m_fm);
double *mpond_oth = REAL(m_oth);

//on n'oublie pas de composer l'objet de sortie décrivant les variables 'nbv' et 'nbds'
//SEXP NBVF, NBVFM, NBDSF, NBDSFM, dnmsF, dnmsFM, nmsEF;
PROTECT(NBVF = allocMatrix(REALSXP,nbF,nbT));
PROTECT(NBVFM = alloc3DArray(REALSXP,nbF,nbMe,nbT));
PROTECT(NBDSF = allocMatrix(REALSXP,nbF,nbT));
PROTECT(NBDSFM = alloc3DArray(REALSXP,nbF,nbMe,nbT));
PROTECT(EFF2F = allocMatrix(REALSXP,nbF,nbT));
PROTECT(EFF2FM = alloc3DArray(REALSXP,nbF,nbMe,nbT));
PROTECT(dnmsF = allocVector(VECSXP,2));
PROTECT(dnmsFM = allocVector(VECSXP,3)); //131

SET_VECTOR_ELT(dnmsF, 0, fleetList); SET_VECTOR_ELT(dnmsF, 1, times);
SET_VECTOR_ELT(dnmsFM, 0, fleetList); SET_VECTOR_ELT(dnmsFM, 1, metierListEco); SET_VECTOR_ELT(dnmsFM, 2, times);
setAttrib(NBVF, R_DimNamesSymbol, dnmsF); setAttrib(NBVFM, R_DimNamesSymbol, dnmsFM);
setAttrib(NBDSF, R_DimNamesSymbol, dnmsF); setAttrib(NBDSFM, R_DimNamesSymbol, dnmsFM);
setAttrib(EFF2F, R_DimNamesSymbol, dnmsF); setAttrib(EFF2FM, R_DimNamesSymbol, dnmsFM);

setAttrib(reconcilSPP, R_DimNamesSymbol, dnmsFM);
setAttrib(reconcilSPP_copy, R_DimNamesSymbol, dnmsFM);

double *NBVf = REAL(NBVF);
double *NBVfm = REAL(NBVFM);
double *NBDSf = REAL(NBDSF);
double *NBDSfm = REAL(NBDSFM);
double *EFF2f = REAL(EFF2F);
double *EFF2fm = REAL(EFF2FM);


SEXP ans_PQuot_et;
if (nbE>0) {
 setAttrib(out_PQuot_et, R_NamesSymbol, sppList);
 for (int e = 0 ; e < nbE ; e++) {
    PROTECT(ans_PQuot_et = NEW_NUMERIC(nbT));
    setAttrib(ans_PQuot_et, R_NamesSymbol, times);
    SET_VECTOR_ELT(out_PQuot_et, e, ans_PQuot_et);
 }
}

//Rprintf("step1\n");fichier << "step1" << endl;

////Rprintf("B");
for (int it = 0; it < nbT ; it++) {

//Rprintf("ini1");fichier << "ini1" << endl;

//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 5));////Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));////Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 7));////Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 61));////Rprintf("Mort20.5\n");


//    if (it==0) 	{
////        //float Y=;
////        //float **P=&NRmatrix(1,4,1,3);
//        MinimizeF(NRmatrix(1,4,1,3), NRvector(1,4), 3, 0.0001);
//    }


//////Rprintf("time %i\n",it);
if (nbE>0) {

    if (it>=1) {
        RecAlea(list, listStochastic, it, 1, recType1); //IMPORTANT : à effectuer AVANT la procédure d'optimisation
        RecAlea(list, listStochastic, it, 2, recType2);
        RecAlea(list, listStochastic, it, 3, recType3);
    }

        SRmod(list, listSR, it, TypeSR, SRInd); //important : à envoyer avant 'DynamicPop'

}
//Rprintf("C");fichier << "C" << endl;
if (scen & (it>=1)) Scenario(list, listScen, it); //modif MM 16/01/2012

if (bhv_active & (it>=1)) FleetBehav(list, it, parBHV);


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//------------------------ Ajustement initial ---------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//Rprintf("intro0\n");fichier << "intro0" << endl;
 //copie de sauvegarde car il faudra revenir aux valeurs initiales s'il y a une correction des ajustements

REPROTECT(list_copy = duplicate(list),ipx_list_copy);//Rprintf("intro0.1\n");
REPROTECT(FList_copy = getListElement(list_copy, "Fleet"),ipx_FList_copy); //Rprintf("intro0.2\n");




////Rprintf("ini2");fichier << "ini2" << endl;

//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 5));//Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));//Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 7));//Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 61));//Rprintf("Mort20.5\n");

////Rprintf("ini2");

//PrintValue(VECTOR_ELT(VECTOR_ELT(duplicate(eVar), 0), 5));//Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(duplicate(eVar), 0), 6));//Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(duplicate(eVar), 0), 7));//Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(duplicate(eVar), 0), 61));//Rprintf("Mort20.5\n");


//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar,0),0));//Rprintf("a0");
//PrintValue(VECTOR_ELT(eVar,0));//Rprintf("a1");//if (it>0) error("Unexpectedz scondition occurred");

////Rprintf("AAAAA3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));
//SEXP eVarDup;
//PROTECT(eVarDup = duplicate(eVar));
////Rprintf("AAAAA31\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVarDup, 0), 6));
//UNPROTECT(1);
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));
////Rprintf("AAAAA32\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVarDup, 0), 6));


REPROTECT(eVar_copy = duplicate(eVar),ipx_eVar_copy);//Rprintf("intro0.3\n");fichier << "intro0.3" << endl;
//SEXP jojo = duplicate(eVar);//Rprintf("intro0.2.1\n");
//REPROTECT(eVar_copy = eVar,ipx_eVar_copy);//Rprintf("intro0.3\n");

////Rprintf("ini3");

//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 5));//Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));//Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 7));//Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 61));//Rprintf("Mort20.5\n");


REPROTECT(eStatVar_copy = duplicate(eStatVar),ipx_eStatVar_copy);//Rprintf("intro0.4\n");fichier << "intro.4" << endl;
REPROTECT(fVar_copy = duplicate(fVar),ipx_fVar_copy);//Rprintf("intro0.5\n");fichier << "intro0.5" << endl;
//Rprintf("intro1\n");fichier << "intro1" << endl;
//if (it==3) PrintValue(FList);


////Rprintf("intro11\n");

if ((delay<=it) & (gestInd==1) & (it>=1) & isNull(TACbyF) & (eTemp<nbE)) { //seulement si espèce dynamique
//Rprintf("aa");fichier << "aa" << endl;
//PrintValue(getListElement(getListElement(list, "Fleet"), "nbds_f"));
//PrintValue(getListElement(FList, "nbds_f"));
//PrintValue(mu_nbds);
//PrintValue(mu_nbv);

//------------------------------------------------------------------------------------------ ajout updateE : début
int DELAY = INTEGER(updateE)[0];

if ((delay<=it) & (gestInd==1) & (DELAY>0)) { //DELAY = 1 -> on remet l'effort au niveau de l'instant initial

//on remet au niveau de l'instant précédent la mise en action du module Gestion

    double *nbdsFM3 = REAL(getListElement(FList, "effort1_f_m"));
    double *nbdsF3 = REAL(getListElement(FList, "effort1_f"));
    double *nbTripFM3 = REAL(getListElement(FList, "nbTrip_f_m"));
    double *nbTripF3 = REAL(getListElement(FList, "nbTrip_f"));
    double *nbvFM3 = REAL(getListElement(FList, "nbv_f_m"));
    double *nbvF3 = REAL(getListElement(FList, "nbv_f"));

    if (DELAY>delay) DELAY=delay;

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){


        if (var==1) {nbdsF3[ind_f] = REAL(NBDSF)[ind_f + nbF*(DELAY-1)];
                     nbTripF3[ind_f] = REAL(NBDSF)[ind_f + nbF*(DELAY-1)];}
        if (var==2) nbvF3[ind_f] = REAL(NBVF)[ind_f + nbF*(DELAY-1)];

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if (var==1) {nbdsFM3[ind_f+nbF*ind_m] = REAL(NBDSFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];
                         nbTripFM3[ind_f+nbF*ind_m] = REAL(NBDSFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];}
            if (var==2) nbvFM3[ind_f+nbF*ind_m] = REAL(NBVFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];

        }
    }
    //Rprintf("AA");fichier << "AA" << endl;
    //PrintValue(getListElement(FList, "effort1_f_m"));
            int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

    if (Qvec[eTemp]==0) {

            double *Fothi2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 44));
            for (int ag = 0; ag < nbi; ag++) Fothi2[ag + it*nbi] = Fothi2[ag + (DELAY-1)*nbi];

    } else {

            double *Fothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 116)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M1[ag + it*nbi] = Fothi2_S1M1[ag + (DELAY-1)*nbi];
            double *Fothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 117)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M2[ag + it*nbi] = Fothi2_S1M2[ag + (DELAY-1)*nbi];
            double *Fothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 118)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M3[ag + it*nbi] = Fothi2_S1M3[ag + (DELAY-1)*nbi];
            double *Fothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 119)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M4[ag + it*nbi] = Fothi2_S1M4[ag + (DELAY-1)*nbi];
            double *Fothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 120)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M1[ag + it*nbi] = Fothi2_S2M1[ag + (DELAY-1)*nbi];
            double *Fothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 121)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M2[ag + it*nbi] = Fothi2_S2M2[ag + (DELAY-1)*nbi];
            double *Fothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 122)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M3[ag + it*nbi] = Fothi2_S2M3[ag + (DELAY-1)*nbi];
            double *Fothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 123)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M4[ag + it*nbi] = Fothi2_S2M4[ag + (DELAY-1)*nbi];
            double *Fothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 124)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M1[ag + it*nbi] = Fothi2_S3M1[ag + (DELAY-1)*nbi];
            double *Fothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 125)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M2[ag + it*nbi] = Fothi2_S3M2[ag + (DELAY-1)*nbi];
            double *Fothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 126)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M3[ag + it*nbi] = Fothi2_S3M3[ag + (DELAY-1)*nbi];
            double *Fothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 127)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M4[ag + it*nbi] = Fothi2_S3M4[ag + (DELAY-1)*nbi];
            double *Fothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 128)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M1[ag + it*nbi] = Fothi2_S4M1[ag + (DELAY-1)*nbi];
            double *Fothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 129)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M2[ag + it*nbi] = Fothi2_S4M2[ag + (DELAY-1)*nbi];
            double *Fothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 130)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M3[ag + it*nbi] = Fothi2_S4M3[ag + (DELAY-1)*nbi];
            double *Fothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 131)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M4[ag + it*nbi] = Fothi2_S4M4[ag + (DELAY-1)*nbi];

            double *FRWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 176));
            double *FRWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 177));
            double *FRWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 178));
            double *FRWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 179));
            double *FRWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 180));
            double *FRWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 181));
            double *FRWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 182));
            double *FRWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 183));
            double *FRWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 184));
            double *FRWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 185));
            double *FRWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 186));
            double *FRWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 187));
            double *FRWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 188));
            double *FRWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 189));
            double *FRWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 190));
            double *FRWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 191));

            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M1[ag + it*nbi] = FRWTothi2_S1M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M2[ag + it*nbi] = FRWTothi2_S1M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M3[ag + it*nbi] = FRWTothi2_S1M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M4[ag + it*nbi] = FRWTothi2_S1M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M1[ag + it*nbi] = FRWTothi2_S2M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M2[ag + it*nbi] = FRWTothi2_S2M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M3[ag + it*nbi] = FRWTothi2_S2M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M4[ag + it*nbi] = FRWTothi2_S2M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M1[ag + it*nbi] = FRWTothi2_S3M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M2[ag + it*nbi] = FRWTothi2_S3M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M3[ag + it*nbi] = FRWTothi2_S3M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M4[ag + it*nbi] = FRWTothi2_S3M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M1[ag + it*nbi] = FRWTothi2_S4M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M2[ag + it*nbi] = FRWTothi2_S4M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M3[ag + it*nbi] = FRWTothi2_S4M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M4[ag + it*nbi] = FRWTothi2_S4M4[ag + (DELAY-1)*nbi];

            double *FDWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 208));
            double *FDWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 209));
            double *FDWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 210));
            double *FDWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 211));
            double *FDWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 212));
            double *FDWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 213));
            double *FDWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 214));
            double *FDWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 215));
            double *FDWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 216));
            double *FDWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 217));
            double *FDWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 218));
            double *FDWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 219));
            double *FDWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 220));
            double *FDWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 221));
            double *FDWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 222));
            double *FDWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 223));

            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M1[ag + it*nbi] = FDWTothi2_S1M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M2[ag + it*nbi] = FDWTothi2_S1M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M3[ag + it*nbi] = FDWTothi2_S1M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M4[ag + it*nbi] = FDWTothi2_S1M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M1[ag + it*nbi] = FDWTothi2_S2M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M2[ag + it*nbi] = FDWTothi2_S2M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M3[ag + it*nbi] = FDWTothi2_S2M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M4[ag + it*nbi] = FDWTothi2_S2M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M1[ag + it*nbi] = FDWTothi2_S3M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M2[ag + it*nbi] = FDWTothi2_S3M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M3[ag + it*nbi] = FDWTothi2_S3M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M4[ag + it*nbi] = FDWTothi2_S3M4[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M1[ag + it*nbi] = FDWTothi2_S4M1[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M2[ag + it*nbi] = FDWTothi2_S4M2[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M3[ag + it*nbi] = FDWTothi2_S4M3[ag + (DELAY-1)*nbi];
            for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M4[ag + it*nbi] = FDWTothi2_S4M4[ag + (DELAY-1)*nbi];

    }

}
//------------------------------------------------------------------------------------------ ajout updateE : fin


////Rprintf("AAAAAAA\n");
Gestion(list, it);


////Rprintf("bb");
//PrintValue(getListElement(getListElement(list, "Fleet"), "nbds_f"));
//PrintValue(getListElement(FList, "nbds_f"));
////PrintValue(mu_nbds);
////PrintValue(mu_nbv);

////Rprintf("D");
//on met à jour les variables sur lesquelles opère le multiplicateur
////Rprintf("E");
////PrintValue(mu_nbds);
////PrintValue(mu_nbv);
    double *mu_nbds_t2 = REAL(mu_nbds);
    double *mu_nbv_t2 = REAL(mu_nbv);
    double *nbdsFM2 = REAL(getListElement(FList, "effort1_f_m"));
    double *nbdsF2 = REAL(getListElement(FList, "effort1_f"));
    double *nbvFM2 = REAL(getListElement(FList, "nbv_f_m"));
    double *nbvF2 = REAL(getListElement(FList, "nbv_f"));
    double *eff2FM2 = REAL(getListElement(FList, "effort2_f_m"));
    double *eff2F2 = REAL(getListElement(FList, "effort2_f"));

// ATTENTION : dorénavant, on doit avoir POUR CHAQUE FLOTTILLE des niveaux métiers exhaustifs ie sum_m ind_fm = ind_f --> il faudra des procédures de vérifications dans les routines d'importation


     for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        double countEff = 0.0;

        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {

            if (var==1) {
                if (gestyp==1) nbdsFM2[ind_f+nbF*ind_m] = fmax2(nbdsFM2[ind_f+nbF*ind_m] + mu_nbds_t2[it]*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) nbdsFM2[ind_f+nbF*ind_m] = fmax2(nbdsFM2[ind_f+nbF*ind_m]*(1 + mu_nbds_t2[it]*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (var==2) {
                if (gestyp==1) nbvFM2[ind_f+nbF*ind_m] = fmax2(nbvFM2[ind_f+nbF*ind_m] + mu_nbv_t2[it]*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) nbvFM2[ind_f+nbF*ind_m] = fmax2(nbvFM2[ind_f+nbF*ind_m]*(1 + mu_nbv_t2[it]*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (!ISNA(nbdsFM2[ind_f+nbF*ind_m]) & !ISNA(nbvFM2[ind_f+nbF*ind_m]) & !ISNA(eff2FM2[ind_f+nbF*ind_m])) countEff = countEff + nbdsFM2[ind_f+nbF*ind_m]*nbvFM2[ind_f+nbF*ind_m]*eff2FM2[ind_f+nbF*ind_m];
        }

        if (var==1) nbdsF2[ind_f] = fmax2(countEff/(nbvF2[ind_f]*eff2F2[ind_f]),0.0); //NBDSf
        if (var==2) nbvF2[ind_f] = fmax2(countEff/(nbdsF2[ind_f]*eff2F2[ind_f]),0.0);
     }

      //  for (int e = 0 ; e < nbE ; e++){

                if (Qvec[eTemp]==0) {

                double *Fothi2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 44));
                int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

                if (var==1) {
                        if (gestyp==1)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi] + mu_nbds_t2[it]*mpond_oth[eTemp],0.0);
                        if (gestyp==2)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi]*(1+mu_nbds_t2[it]*mpond_oth[eTemp]),0.0);
                }

                if (var==2){
                        if (gestyp==1)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi] + mu_nbv_t2[it]*mpond_oth[eTemp],0.0);
                        if (gestyp==2)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi]*(1+mu_nbv_t2[it]*mpond_oth[eTemp]),0.0);
                }


                } else {  //espèce SS3


                        double *Fothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 116));
                        double *Fothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 117));
                        double *Fothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 118));
                        double *Fothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 119));
                        double *Fothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 120));
                        double *Fothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 121));
                        double *Fothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 122));
                        double *Fothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 123));
                        double *Fothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 124));
                        double *Fothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 125));
                        double *Fothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 126));
                        double *Fothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 127));
                        double *Fothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 128));
                        double *Fothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 129));
                        double *Fothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 130));
                        double *Fothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 131));

                        double *FRWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 176));
                        double *FRWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 177));
                        double *FRWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 178));
                        double *FRWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 179));
                        double *FRWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 180));
                        double *FRWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 181));
                        double *FRWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 182));
                        double *FRWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 183));
                        double *FRWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 184));
                        double *FRWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 185));
                        double *FRWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 186));
                        double *FRWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 187));
                        double *FRWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 188));
                        double *FRWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 189));
                        double *FRWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 190));
                        double *FRWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 191));

                        double *FDWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 208));
                        double *FDWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 209));
                        double *FDWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 210));
                        double *FDWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 211));
                        double *FDWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 212));
                        double *FDWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 213));
                        double *FDWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 214));
                        double *FDWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 215));
                        double *FDWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 216));
                        double *FDWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 217));
                        double *FDWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 218));
                        double *FDWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 219));
                        double *FDWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 220));
                        double *FDWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 221));
                        double *FDWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 222));
                        double *FDWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 223));

                int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));
                double multip = 0.0;
                if (var==1) multip = mu_nbds_t2[it];
                if (var==2) multip = mu_nbv_t2[it];

                if (gestyp==1)
                    for (int ag = 0; ag < nbi; ag++) {

                            Fothi2_S1M1[ag + it*nbi] = fmax2(Fothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M2[ag + it*nbi] = fmax2(Fothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M3[ag + it*nbi] = fmax2(Fothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M4[ag + it*nbi] = fmax2(Fothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M1[ag + it*nbi] = fmax2(Fothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M2[ag + it*nbi] = fmax2(Fothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M3[ag + it*nbi] = fmax2(Fothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M4[ag + it*nbi] = fmax2(Fothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M1[ag + it*nbi] = fmax2(Fothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M2[ag + it*nbi] = fmax2(Fothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M3[ag + it*nbi] = fmax2(Fothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M4[ag + it*nbi] = fmax2(Fothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M1[ag + it*nbi] = fmax2(Fothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M2[ag + it*nbi] = fmax2(Fothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M3[ag + it*nbi] = fmax2(Fothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M4[ag + it*nbi] = fmax2(Fothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                            FRWTothi2_S1M1[ag + it*nbi] = fmax2(FRWTothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M2[ag + it*nbi] = fmax2(FRWTothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M3[ag + it*nbi] = fmax2(FRWTothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M4[ag + it*nbi] = fmax2(FRWTothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M1[ag + it*nbi] = fmax2(FRWTothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M2[ag + it*nbi] = fmax2(FRWTothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M3[ag + it*nbi] = fmax2(FRWTothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M4[ag + it*nbi] = fmax2(FRWTothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M1[ag + it*nbi] = fmax2(FRWTothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M2[ag + it*nbi] = fmax2(FRWTothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M3[ag + it*nbi] = fmax2(FRWTothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M4[ag + it*nbi] = fmax2(FRWTothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M1[ag + it*nbi] = fmax2(FRWTothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M2[ag + it*nbi] = fmax2(FRWTothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M3[ag + it*nbi] = fmax2(FRWTothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M4[ag + it*nbi] = fmax2(FRWTothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                            FDWTothi2_S1M1[ag + it*nbi] = fmax2(FDWTothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M2[ag + it*nbi] = fmax2(FDWTothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M3[ag + it*nbi] = fmax2(FDWTothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M4[ag + it*nbi] = fmax2(FDWTothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M1[ag + it*nbi] = fmax2(FDWTothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M2[ag + it*nbi] = fmax2(FDWTothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M3[ag + it*nbi] = fmax2(FDWTothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M4[ag + it*nbi] = fmax2(FDWTothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M1[ag + it*nbi] = fmax2(FDWTothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M2[ag + it*nbi] = fmax2(FDWTothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M3[ag + it*nbi] = fmax2(FDWTothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M4[ag + it*nbi] = fmax2(FDWTothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M1[ag + it*nbi] = fmax2(FDWTothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M2[ag + it*nbi] = fmax2(FDWTothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M3[ag + it*nbi] = fmax2(FDWTothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M4[ag + it*nbi] = fmax2(FDWTothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                    }

                if (gestyp==2)
                    for (int ag = 0; ag < nbi; ag++) {

                            Fothi2_S1M1[ag + it*nbi] = fmax2(Fothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M2[ag + it*nbi] = fmax2(Fothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M3[ag + it*nbi] = fmax2(Fothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M4[ag + it*nbi] = fmax2(Fothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M1[ag + it*nbi] = fmax2(Fothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M2[ag + it*nbi] = fmax2(Fothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M3[ag + it*nbi] = fmax2(Fothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M4[ag + it*nbi] = fmax2(Fothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M1[ag + it*nbi] = fmax2(Fothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M2[ag + it*nbi] = fmax2(Fothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M3[ag + it*nbi] = fmax2(Fothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M4[ag + it*nbi] = fmax2(Fothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M1[ag + it*nbi] = fmax2(Fothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M2[ag + it*nbi] = fmax2(Fothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M3[ag + it*nbi] = fmax2(Fothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M4[ag + it*nbi] = fmax2(Fothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);

                            FRWTothi2_S1M1[ag + it*nbi] = fmax2(FRWTothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M2[ag + it*nbi] = fmax2(FRWTothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M3[ag + it*nbi] = fmax2(FRWTothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M4[ag + it*nbi] = fmax2(FRWTothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M1[ag + it*nbi] = fmax2(FRWTothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M2[ag + it*nbi] = fmax2(FRWTothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M3[ag + it*nbi] = fmax2(FRWTothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M4[ag + it*nbi] = fmax2(FRWTothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M1[ag + it*nbi] = fmax2(FRWTothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M2[ag + it*nbi] = fmax2(FRWTothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M3[ag + it*nbi] = fmax2(FRWTothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M4[ag + it*nbi] = fmax2(FRWTothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M1[ag + it*nbi] = fmax2(FRWTothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M2[ag + it*nbi] = fmax2(FRWTothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M3[ag + it*nbi] = fmax2(FRWTothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M4[ag + it*nbi] = fmax2(FRWTothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);

                            FDWTothi2_S1M1[ag + it*nbi] = fmax2(FDWTothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M2[ag + it*nbi] = fmax2(FDWTothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M3[ag + it*nbi] = fmax2(FDWTothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M4[ag + it*nbi] = fmax2(FDWTothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M1[ag + it*nbi] = fmax2(FDWTothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M2[ag + it*nbi] = fmax2(FDWTothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M3[ag + it*nbi] = fmax2(FDWTothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M4[ag + it*nbi] = fmax2(FDWTothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M1[ag + it*nbi] = fmax2(FDWTothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M2[ag + it*nbi] = fmax2(FDWTothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M3[ag + it*nbi] = fmax2(FDWTothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M4[ag + it*nbi] = fmax2(FDWTothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M1[ag + it*nbi] = fmax2(FDWTothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M2[ag + it*nbi] = fmax2(FDWTothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M3[ag + it*nbi] = fmax2(FDWTothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M4[ag + it*nbi] = fmax2(FDWTothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                    }


                }


         //}
}

////Rprintf("cc");
////PrintValue(getListElement(FList, "nbds_f"));

//Rprintf("intro2\n");fichier << "intro2" << endl;
if ((INTEGER(VECTOR_ELT(parQEX,0))[0]==0) & (delay<=it) & !isNull(Ftarg) & !isNull(W_Ftarg) & !isNull(MeanRec_Ftarg) & (it>=1) & ((t_stop==0) | (t_stop>it))) {
   //if (it==2) PrintValue(TACbyF);
   //Rprintf("esti\n");
   int oooo = EstimationTACfromF(it) ;
   oooo = oooo * 2;

}


//if ((INTEGER(VECTOR_ELT(parQEX,0))[0]==0) & (delay<=it) & !all_is_na(TACbyF) & !all_is_na(TAC) & (it>=1) & (gestInd==1) & (t_stop==0 | t_stop>it)) {  //optimisation TAC par flottille activée si au moins un élément de TACbyF est renseigné
if ((INTEGER(VECTOR_ELT(parQEX,0))[0]==0) & (delay<=it) & !isNull(TACbyF) & !isNull(TAC) & (it>=1) & ((t_stop==0) | (t_stop>it))) {

//Rprintf("adjust\n");

//Rprintf("introOPT\n");fichier << "introOPT" << endl;

        int DELAY = INTEGER(updateE)[0];

        SPPstatOPT = INTEGER(getListElement(tacCTRL, "SPPstatOPT"));
        SPPspictOPT = INTEGER(getListElement(tacCTRL, "SPPspictOPT"));
        SPPdynOPT = INTEGER(getListElement(tacCTRL, "SPPdynOPT"));
        N_SPPstatOPT = length(getListElement(tacCTRL, "SPPstatOPT"));
        N_SPPspictOPT = length(getListElement(tacCTRL, "SPPspictOPT"));
        N_SPPdynOPT = length(getListElement(tacCTRL, "SPPdynOPT"));

        if ((delay<=it) & (gestInd==1) & (DELAY>0)) { //DELAY = 1 -> on remet l'effort au niveau de l'instant initial

        //on remet au niveau de l'instant précédent la mise en action du module Gestion

            double *nbdsFM3 = REAL(getListElement(FList, "effort1_f_m"));
            double *nbdsF3 = REAL(getListElement(FList, "effort1_f"));
            double *nbTripFM3 = REAL(getListElement(FList, "nbTrip_f_m"));
            double *nbTripF3 = REAL(getListElement(FList, "nbTrip_f"));
            double *nbvFM3 = REAL(getListElement(FList, "nbv_f_m"));
            double *nbvF3 = REAL(getListElement(FList, "nbv_f"));

            if (DELAY>delay) DELAY=delay;

            for (int ind_f = 0 ; ind_f < nbF ; ind_f++){


                if (var==1) {nbdsF3[ind_f] = REAL(NBDSF)[ind_f + nbF*(DELAY-1)];
                             nbTripF3[ind_f] = REAL(NBDSF)[ind_f + nbF*(DELAY-1)];}
                if (var==2) nbvF3[ind_f] = REAL(NBVF)[ind_f + nbF*(DELAY-1)];

                for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

                    if (var==1) {nbdsFM3[ind_f+nbF*ind_m] = REAL(NBDSFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];
                                 nbTripFM3[ind_f+nbF*ind_m] = REAL(NBDSFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];}
                    if (var==2) nbvFM3[ind_f+nbF*ind_m] = REAL(NBVFM)[ind_f + nbF*ind_m + nbF*nbMe*(DELAY-1)];

                }
            }
//            //Rprintf("AA");
//            //PrintValue(getListElement(FList, "effort1_f_m"));

        if (N_SPPspictOPT>0) { //si espèce dynamique SPICT

         for (int i = 0; i < N_SPPspictOPT; i++){

            int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,SPPspictOPT[i]))), "modI")); //doit normalement être égal à 1
            double *Fothi2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPspictOPT[i]), 44));
            for (int ag = 0; ag < nbi; ag++) Fothi2[ag + it*nbi] = Fothi2[ag + (DELAY-1)*nbi];

         }

        }

        if (N_SPPdynOPT>0) { //si espèce dynamique XSA ou SS3

            for (int i = 0; i < N_SPPdynOPT; i++){

            int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,SPPdynOPT[i]))), "modI"));
            int eTmp = SPPdynOPT[i];

            if (Qvec[eTmp]==0) {

                    double *Fothi2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 44));
                    for (int ag = 0; ag < nbi; ag++) Fothi2[ag + it*nbi] = Fothi2[ag + (DELAY-1)*nbi];

            } else {

                    double *Fothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 116)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M1[ag + it*nbi] = Fothi2_S1M1[ag + (DELAY-1)*nbi];
                    double *Fothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 117)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M2[ag + it*nbi] = Fothi2_S1M2[ag + (DELAY-1)*nbi];
                    double *Fothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 118)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M3[ag + it*nbi] = Fothi2_S1M3[ag + (DELAY-1)*nbi];
                    double *Fothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 119)); for (int ag = 0; ag < nbi; ag++) Fothi2_S1M4[ag + it*nbi] = Fothi2_S1M4[ag + (DELAY-1)*nbi];
                    double *Fothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 120)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M1[ag + it*nbi] = Fothi2_S2M1[ag + (DELAY-1)*nbi];
                    double *Fothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 121)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M2[ag + it*nbi] = Fothi2_S2M2[ag + (DELAY-1)*nbi];
                    double *Fothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 122)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M3[ag + it*nbi] = Fothi2_S2M3[ag + (DELAY-1)*nbi];
                    double *Fothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 123)); for (int ag = 0; ag < nbi; ag++) Fothi2_S2M4[ag + it*nbi] = Fothi2_S2M4[ag + (DELAY-1)*nbi];
                    double *Fothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 124)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M1[ag + it*nbi] = Fothi2_S3M1[ag + (DELAY-1)*nbi];
                    double *Fothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 125)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M2[ag + it*nbi] = Fothi2_S3M2[ag + (DELAY-1)*nbi];
                    double *Fothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 126)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M3[ag + it*nbi] = Fothi2_S3M3[ag + (DELAY-1)*nbi];
                    double *Fothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 127)); for (int ag = 0; ag < nbi; ag++) Fothi2_S3M4[ag + it*nbi] = Fothi2_S3M4[ag + (DELAY-1)*nbi];
                    double *Fothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 128)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M1[ag + it*nbi] = Fothi2_S4M1[ag + (DELAY-1)*nbi];
                    double *Fothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 129)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M2[ag + it*nbi] = Fothi2_S4M2[ag + (DELAY-1)*nbi];
                    double *Fothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 130)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M3[ag + it*nbi] = Fothi2_S4M3[ag + (DELAY-1)*nbi];
                    double *Fothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 131)); for (int ag = 0; ag < nbi; ag++) Fothi2_S4M4[ag + it*nbi] = Fothi2_S4M4[ag + (DELAY-1)*nbi];


                    double *FRWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 176));
                    double *FRWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 177));
                    double *FRWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 178));
                    double *FRWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 179));
                    double *FRWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 180));
                    double *FRWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 181));
                    double *FRWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 182));
                    double *FRWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 183));
                    double *FRWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 184));
                    double *FRWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 185));
                    double *FRWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 186));
                    double *FRWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 187));
                    double *FRWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 188));
                    double *FRWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 189));
                    double *FRWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 190));
                    double *FRWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 191));

                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M1[ag + it*nbi] = FRWTothi2_S1M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M2[ag + it*nbi] = FRWTothi2_S1M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M3[ag + it*nbi] = FRWTothi2_S1M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M4[ag + it*nbi] = FRWTothi2_S1M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M1[ag + it*nbi] = FRWTothi2_S2M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M2[ag + it*nbi] = FRWTothi2_S2M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M3[ag + it*nbi] = FRWTothi2_S2M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M4[ag + it*nbi] = FRWTothi2_S2M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M1[ag + it*nbi] = FRWTothi2_S3M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M2[ag + it*nbi] = FRWTothi2_S3M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M3[ag + it*nbi] = FRWTothi2_S3M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M4[ag + it*nbi] = FRWTothi2_S3M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M1[ag + it*nbi] = FRWTothi2_S4M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M2[ag + it*nbi] = FRWTothi2_S4M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M3[ag + it*nbi] = FRWTothi2_S4M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M4[ag + it*nbi] = FRWTothi2_S4M4[ag + (DELAY-1)*nbi];

                    double *FDWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 208));
                    double *FDWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 209));
                    double *FDWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 210));
                    double *FDWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 211));
                    double *FDWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 212));
                    double *FDWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 213));
                    double *FDWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 214));
                    double *FDWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 215));
                    double *FDWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 216));
                    double *FDWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 217));
                    double *FDWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 218));
                    double *FDWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 219));
                    double *FDWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 220));
                    double *FDWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 221));
                    double *FDWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 222));
                    double *FDWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTmp), 223));

                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M1[ag + it*nbi] = FDWTothi2_S1M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M2[ag + it*nbi] = FDWTothi2_S1M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M3[ag + it*nbi] = FDWTothi2_S1M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M4[ag + it*nbi] = FDWTothi2_S1M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M1[ag + it*nbi] = FDWTothi2_S2M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M2[ag + it*nbi] = FDWTothi2_S2M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M3[ag + it*nbi] = FDWTothi2_S2M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M4[ag + it*nbi] = FDWTothi2_S2M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M1[ag + it*nbi] = FDWTothi2_S3M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M2[ag + it*nbi] = FDWTothi2_S3M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M3[ag + it*nbi] = FDWTothi2_S3M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M4[ag + it*nbi] = FDWTothi2_S3M4[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M1[ag + it*nbi] = FDWTothi2_S4M1[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M2[ag + it*nbi] = FDWTothi2_S4M2[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M3[ag + it*nbi] = FDWTothi2_S4M3[ag + (DELAY-1)*nbi];
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M4[ag + it*nbi] = FDWTothi2_S4M4[ag + (DELAY-1)*nbi];

            }
        }}

        }


     int ooo = GestionF2(it);
     ooo = ooo * 2;

  //GestionF(NRmatrix(1,nbF+2,1,nbF+1), NRvector(1,nbF+2), nbF+1, 0.0000001, it);}

}


if ((INTEGER(Bootstrp)[0]==0) & (INTEGER(VECTOR_ELT(parQEX,0))[0]==1) & (gestInd==0) & (delay<=it)) {
//QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)

    //QuotaExch(REAL(VECTOR_ELT(parQEX,1))[0],REAL(VECTOR_ELT(parQEX,2))[0],REAL(VECTOR_ELT(parQEX,3))[0],
    //                    REAL(VECTOR_ELT(parQEX,4))[0], eTemp, REAL(VECTOR_ELT(parQEX,5))[0], it);

  //if (it==1) {


    QuotaExchV2(REAL(VECTOR_ELT(parQEX,1))[0],REAL(VECTOR_ELT(parQEX,2))[0],REAL(VECTOR_ELT(parQEX,3))[0],
                        REAL(VECTOR_ELT(parQEX,4))[0], eTemp, REAL(VECTOR_ELT(parQEX,5))[0], it);
  //}

}

//Rprintf("intro4\n");fichier << "intro4" << endl;

//if (scen & it>=1) Scenario(list, listScen, it);
////Rprintf("E");
//on remplit l'objet de sortie décrivant les variables 'nbv' et 'nbds'
double *nbdsFM4 = REAL(getListElement(FList, "effort1_f_m"));
double *nbdsF4 = REAL(getListElement(FList, "effort1_f"));
double *nbvFM4 = REAL(getListElement(FList, "nbv_f_m"));
double *nbvF4 = REAL(getListElement(FList, "nbv_f"));
double *eff2FM4 = REAL(getListElement(FList, "effort2_f_m"));
double *eff2F4 = REAL(getListElement(FList, "effort2_f"));

for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

    NBVf[ind_f + nbF*it] = nbvF4[ind_f];
    NBDSf[ind_f + nbF*it] = nbdsF4[ind_f];
    EFF2f[ind_f + nbF*it] = eff2F4[ind_f];

    for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

        NBVfm[ind_f + nbF*ind_m + nbF*nbMe*it] = nbvFM4[ind_f + nbF*ind_m];
        NBDSfm[ind_f + nbF*ind_m + nbF*nbMe*it] = nbdsFM4[ind_f + nbF*ind_m];
        EFF2fm[ind_f + nbF*ind_m + nbF*nbMe*it] = eff2FM4[ind_f + nbF*ind_m];
    }
}


//Rprintf("F\n");fichier << "F" << endl;

//3 modules avec pas de temps différencié au niveau trimestre
if (nbE>0) {
 Mortalite(list, it, eVar);//Rprintf("\nG");fichier << "G" << endl;//if (it>4) error("BBBhh");////PrintValue(out_Fr_fmi);//PrintValue(VECTOR_ELT(eVar,60));
 DynamicPop(list, it, eVar, true);//Rprintf("\nH");fichier << "H" << endl;////PrintValue(out_Z_eit);//PrintValue(out_N_eitQ);//PrintValue(out_N_eit);
}
CatchDL(list, it, eVar);//Rprintf("\nI");fichier << "I" << endl;////PrintValue(out_Y_eit);



//if (it>0) error("Unexpectedz scondition occurred");
//if (it<5) {
////Rprintf("Z1\n");
////PrintValue(VECTOR_ELT(out_Z_eit,2));
////Rprintf("N1\n");
////PrintValue(VECTOR_ELT(out_N_eit,2));
////Rprintf("Fbar1\n");
////PrintValue(VECTOR_ELT(out_Fbar_et,2));
//}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//------------------------ Correction de l'ajustement initial si vise une espèce dynamique -------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

conform = 0; //0=OK

if (eTemp<nbE) { //espèce dynamique

    SEXP NDIM = allocVector(INTSXP,4);
    int *ndi = INTEGER(NDIM); for (int q=0;q<3;q++) ndi[q]=0; ndi[3]=nbT;
    double YtotN = REAL(aggregObj(VECTOR_ELT(out_Y_eit,eTemp),NDIM))[it];
    double YtotNm1 = REAL(aggregObj(VECTOR_ELT(out_Y_eit,eTemp),NDIM))[it-1];
    double FbarNm1=NA_REAL, FbarNm2=NA_REAL, FbarNm3=NA_REAL;
    if (it>=3){
        //FbarN = REAL(VECTOR_ELT(out_Fbar_et, eTemp))[it];
        FbarNm1 = REAL(VECTOR_ELT(out_Fbar_et, eTemp))[it-1];
        FbarNm2 = REAL(VECTOR_ELT(out_Fbar_et, eTemp))[it-2];
        FbarNm3 = REAL(VECTOR_ELT(out_Fbar_et, eTemp))[it-3];
    }
    double SsbN = REAL(VECTOR_ELT(out_SSB_et, eTemp))[it];

    ////Rprintf("time %i\n",it);

    typeGest = 0;
    if ((trgt==2) & (gestInd==1)) typeGest = 3;
    if (((trgt==1) | (trgt==3)) & (gestInd==1)) typeGest = 2;

    //point n°6 (point dominant sur les deux autres)
    if ((delay<=it) & (gestInd==1) & ((trgt==1) | (trgt==3)) & !ISNA(Blim_CPP) & (it>=1)) {
        if (SsbN<Blim_CPP) {
            trgt=2;////Rprintf("conform 6\n");
            conform = 6;
            typeGest = 6;
            door=false;
        }
    }

    //point n°4
    if ((delay<=it) & (gestInd==1) & (trgt==2) & (SsbN>=Blim_CPP) & door & !ISNA(tolVarTACinf_CPP) & !ISNA(tolVarTACsup_CPP) & (it>=1)) {
        if ((YtotN<YtotNm1*tolVarTACinf_CPP) | (YtotN>YtotNm1*tolVarTACsup_CPP)) {
          trgt=1;door=false;//pour hiérarchiser les actions
          if (YtotN<YtotNm1*tolVarTACinf_CPP) TAC_glob[it] = YtotNm1*tolVarTACinf_CPP; ////Rprintf("Ytot %f\n",TAC_glob[it]);
          if (YtotN>YtotNm1*tolVarTACsup_CPP) TAC_glob[it] = YtotNm1*tolVarTACsup_CPP;
          conform = 4; //point de blocage
          typeGest = 4;
        }
    }

    //point n°5 (corVarTACbby n'est pas utilisé)
    if ((delay<=it) & (gestInd==1) & ((trgt==1) | (trgt==3)) & door & !ISNA(corVarTACval_CPP) & (it>=3)) { //HYP: TAC suivi fixe au cours du temps
        if ((FbarNm2<FbarNm1) & (FbarNm3<FbarNm2)) {
          for (int yr=it;yr<nbT;yr++) TAC_glob[yr] = TAC_glob[it-1]*corVarTACval_CPP; ////Rprintf("Ytot %f",TAC_glob[yr]);}
          ////Rprintf("conform 5\n");
          conform = 5; //point de blocage
          typeGest = 5;
        }
    }

    typegest[it] = typeGest;
    door = true;

}

////Rprintf("trgt %i\n",trgt);
//selon les valeurs de 'conform', on engage ou pas le processus de correction

if (conform>0) {

//if (it==3) {//Rprintf("AAAAAAAAAAAA\n"); //PrintValue(FList_copy);}
//on réinitialise Flist, list, eVar (incluant Fothi) et fVar (pas sûr que ce dernier soit utile, mais par précaution...)
REPROTECT(list = duplicate(list_copy), ipx_list);
REPROTECT(FList = getListElement(list, "Fleet"), ipx_FList);
REPROTECT(eVar = duplicate(eVar_copy), ipx_eVar);
REPROTECT(fVar = duplicate(fVar_copy), ipx_fVar);

if ((delay<=it) & (gestInd==1) & (it>=1) & isNull(TACbyF)) {
//Rprintf("AA");fichier << "AA" << endl;
////PrintValue(getListElement(getListElement(list, "Fleet"), "nbds_f"));
////PrintValue(getListElement(FList, "nbds_f"));
////PrintValue(mu_nbds);
////PrintValue(mu_nbv);

////Rprintf("CCCCCCCC\n");
////Rprintf("D");
Gestion(list, it);
////Rprintf("BB");
////PrintValue(getListElement(getListElement(list, "Fleet"), "nbds_f"));
////PrintValue(getListElement(FList, "nbds_f"));
////PrintValue(mu_nbds);
////PrintValue(mu_nbv);

////Rprintf("D");
//on met à jour les variables sur lesquelles opère le multiplicateur
////Rprintf("E");
    double *mu_nbds_t2 = REAL(mu_nbds);
    double *mu_nbv_t2 = REAL(mu_nbv);
    double *nbdsFM2 = REAL(getListElement(FList, "effort1_f_m"));
    double *nbdsF2 = REAL(getListElement(FList, "effort1_f"));
    double *nbvFM2 = REAL(getListElement(FList, "nbv_f_m"));
    double *nbvF2 = REAL(getListElement(FList, "nbv_f"));
    double *eff2FM2 = REAL(getListElement(FList, "effort2_f_m"));
    double *eff2F2 = REAL(getListElement(FList, "effort2_f"));


     for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        double countEff = 0.0;

        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {

            if (var==1) {
                if (gestyp==1) nbdsFM2[ind_f+nbF*ind_m] = fmax2(nbdsFM2[ind_f+nbF*ind_m] + mu_nbds_t2[it]*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) nbdsFM2[ind_f+nbF*ind_m] = fmax2(nbdsFM2[ind_f+nbF*ind_m]*(1 + mu_nbds_t2[it]*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (var==2) {
                if (gestyp==1) nbvFM2[ind_f+nbF*ind_m] = fmax2(nbvFM2[ind_f+nbF*ind_m] + mu_nbv_t2[it]*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) nbvFM2[ind_f+nbF*ind_m] = fmax2(nbvFM2[ind_f+nbF*ind_m]*(1 + mu_nbv_t2[it]*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (!ISNA(nbdsFM2[ind_f+nbF*ind_m]) & !ISNA(nbvFM2[ind_f+nbF*ind_m]) & !ISNA(eff2FM2[ind_f+nbF*ind_m])) countEff = countEff + nbdsFM2[ind_f+nbF*ind_m]*nbvFM2[ind_f+nbF*ind_m]*eff2FM2[ind_f+nbF*ind_m];
        }

        if (var==1) nbdsF2[ind_f] = fmax2(countEff/(nbvF2[ind_f]*eff2F2[ind_f]),0.0); //NBDSf
        if (var==2) nbvF2[ind_f] = fmax2(countEff/(nbdsF2[ind_f]*eff2F2[ind_f]),0.0);
     }



      //  for (int e = 0 ; e < nbE ; e++){

                if (Qvec[eTemp]==0) {

                double *Fothi2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 44));
                int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

                if (var==1) {
                        if (gestyp==1)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi] + mu_nbds_t2[it]*mpond_oth[eTemp],0.0);
                        if (gestyp==2)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi]*(1+mu_nbds_t2[it]*mpond_oth[eTemp]),0.0);
                }

                if (var==2){
                        if (gestyp==1)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi] + mu_nbv_t2[it]*mpond_oth[eTemp],0.0);
                        if (gestyp==2)
                        for (int ag = 0; ag < nbi; ag++)
                            Fothi2[ag + it*nbi] = fmax2(Fothi2[ag + it*nbi]*(1+mu_nbv_t2[it]*mpond_oth[eTemp]),0.0);
                }


                } else {  //espèce SS3


                        double *Fothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 116));
                        double *Fothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 117));
                        double *Fothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 118));
                        double *Fothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 119));
                        double *Fothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 120));
                        double *Fothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 121));
                        double *Fothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 122));
                        double *Fothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 123));
                        double *Fothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 124));
                        double *Fothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 125));
                        double *Fothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 126));
                        double *Fothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 127));
                        double *Fothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 128));
                        double *Fothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 129));
                        double *Fothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 130));
                        double *Fothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 131));

                        double *FRWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 176));
                        double *FRWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 177));
                        double *FRWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 178));
                        double *FRWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 179));
                        double *FRWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 180));
                        double *FRWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 181));
                        double *FRWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 182));
                        double *FRWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 183));
                        double *FRWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 184));
                        double *FRWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 185));
                        double *FRWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 186));
                        double *FRWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 187));
                        double *FRWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 188));
                        double *FRWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 189));
                        double *FRWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 190));
                        double *FRWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 191));

                        double *FDWTothi2_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 208));
                        double *FDWTothi2_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 209));
                        double *FDWTothi2_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 210));
                        double *FDWTothi2_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 211));
                        double *FDWTothi2_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 212));
                        double *FDWTothi2_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 213));
                        double *FDWTothi2_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 214));
                        double *FDWTothi2_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 215));
                        double *FDWTothi2_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 216));
                        double *FDWTothi2_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 217));
                        double *FDWTothi2_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 218));
                        double *FDWTothi2_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 219));
                        double *FDWTothi2_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 220));
                        double *FDWTothi2_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 221));
                        double *FDWTothi2_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 222));
                        double *FDWTothi2_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, eTemp), 223));

                int nbi = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));
                double multip = 0.0;
                if (var==1) multip = mu_nbds_t2[it];
                if (var==2) multip = mu_nbv_t2[it];

                if (gestyp==1)
                    for (int ag = 0; ag < nbi; ag++) {

                            Fothi2_S1M1[ag + it*nbi] = fmax2(Fothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M2[ag + it*nbi] = fmax2(Fothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M3[ag + it*nbi] = fmax2(Fothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S1M4[ag + it*nbi] = fmax2(Fothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M1[ag + it*nbi] = fmax2(Fothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M2[ag + it*nbi] = fmax2(Fothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M3[ag + it*nbi] = fmax2(Fothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S2M4[ag + it*nbi] = fmax2(Fothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M1[ag + it*nbi] = fmax2(Fothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M2[ag + it*nbi] = fmax2(Fothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M3[ag + it*nbi] = fmax2(Fothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S3M4[ag + it*nbi] = fmax2(Fothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M1[ag + it*nbi] = fmax2(Fothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M2[ag + it*nbi] = fmax2(Fothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M3[ag + it*nbi] = fmax2(Fothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            Fothi2_S4M4[ag + it*nbi] = fmax2(Fothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                            FRWTothi2_S1M1[ag + it*nbi] = fmax2(FRWTothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M2[ag + it*nbi] = fmax2(FRWTothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M3[ag + it*nbi] = fmax2(FRWTothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S1M4[ag + it*nbi] = fmax2(FRWTothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M1[ag + it*nbi] = fmax2(FRWTothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M2[ag + it*nbi] = fmax2(FRWTothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M3[ag + it*nbi] = fmax2(FRWTothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S2M4[ag + it*nbi] = fmax2(FRWTothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M1[ag + it*nbi] = fmax2(FRWTothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M2[ag + it*nbi] = fmax2(FRWTothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M3[ag + it*nbi] = fmax2(FRWTothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S3M4[ag + it*nbi] = fmax2(FRWTothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M1[ag + it*nbi] = fmax2(FRWTothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M2[ag + it*nbi] = fmax2(FRWTothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M3[ag + it*nbi] = fmax2(FRWTothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FRWTothi2_S4M4[ag + it*nbi] = fmax2(FRWTothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                            FDWTothi2_S1M1[ag + it*nbi] = fmax2(FDWTothi2_S1M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M2[ag + it*nbi] = fmax2(FDWTothi2_S1M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M3[ag + it*nbi] = fmax2(FDWTothi2_S1M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S1M4[ag + it*nbi] = fmax2(FDWTothi2_S1M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M1[ag + it*nbi] = fmax2(FDWTothi2_S2M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M2[ag + it*nbi] = fmax2(FDWTothi2_S2M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M3[ag + it*nbi] = fmax2(FDWTothi2_S2M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S2M4[ag + it*nbi] = fmax2(FDWTothi2_S2M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M1[ag + it*nbi] = fmax2(FDWTothi2_S3M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M2[ag + it*nbi] = fmax2(FDWTothi2_S3M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M3[ag + it*nbi] = fmax2(FDWTothi2_S3M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S3M4[ag + it*nbi] = fmax2(FDWTothi2_S3M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M1[ag + it*nbi] = fmax2(FDWTothi2_S4M1[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M2[ag + it*nbi] = fmax2(FDWTothi2_S4M2[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M3[ag + it*nbi] = fmax2(FDWTothi2_S4M3[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);
                            FDWTothi2_S4M4[ag + it*nbi] = fmax2(FDWTothi2_S4M4[ag + it*nbi] + multip*mpond_oth[eTemp],0.0);

                    }

                if (gestyp==2)
                    for (int ag = 0; ag < nbi; ag++) {

                            Fothi2_S1M1[ag + it*nbi] = fmax2(Fothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M2[ag + it*nbi] = fmax2(Fothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M3[ag + it*nbi] = fmax2(Fothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S1M4[ag + it*nbi] = fmax2(Fothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M1[ag + it*nbi] = fmax2(Fothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M2[ag + it*nbi] = fmax2(Fothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M3[ag + it*nbi] = fmax2(Fothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S2M4[ag + it*nbi] = fmax2(Fothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M1[ag + it*nbi] = fmax2(Fothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M2[ag + it*nbi] = fmax2(Fothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M3[ag + it*nbi] = fmax2(Fothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S3M4[ag + it*nbi] = fmax2(Fothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M1[ag + it*nbi] = fmax2(Fothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M2[ag + it*nbi] = fmax2(Fothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M3[ag + it*nbi] = fmax2(Fothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            Fothi2_S4M4[ag + it*nbi] = fmax2(Fothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);

                            FRWTothi2_S1M1[ag + it*nbi] = fmax2(FRWTothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M2[ag + it*nbi] = fmax2(FRWTothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M3[ag + it*nbi] = fmax2(FRWTothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S1M4[ag + it*nbi] = fmax2(FRWTothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M1[ag + it*nbi] = fmax2(FRWTothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M2[ag + it*nbi] = fmax2(FRWTothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M3[ag + it*nbi] = fmax2(FRWTothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S2M4[ag + it*nbi] = fmax2(FRWTothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M1[ag + it*nbi] = fmax2(FRWTothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M2[ag + it*nbi] = fmax2(FRWTothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M3[ag + it*nbi] = fmax2(FRWTothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S3M4[ag + it*nbi] = fmax2(FRWTothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M1[ag + it*nbi] = fmax2(FRWTothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M2[ag + it*nbi] = fmax2(FRWTothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M3[ag + it*nbi] = fmax2(FRWTothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FRWTothi2_S4M4[ag + it*nbi] = fmax2(FRWTothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);

                            FDWTothi2_S1M1[ag + it*nbi] = fmax2(FDWTothi2_S1M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M2[ag + it*nbi] = fmax2(FDWTothi2_S1M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M3[ag + it*nbi] = fmax2(FDWTothi2_S1M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S1M4[ag + it*nbi] = fmax2(FDWTothi2_S1M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M1[ag + it*nbi] = fmax2(FDWTothi2_S2M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M2[ag + it*nbi] = fmax2(FDWTothi2_S2M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M3[ag + it*nbi] = fmax2(FDWTothi2_S2M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S2M4[ag + it*nbi] = fmax2(FDWTothi2_S2M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M1[ag + it*nbi] = fmax2(FDWTothi2_S3M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M2[ag + it*nbi] = fmax2(FDWTothi2_S3M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M3[ag + it*nbi] = fmax2(FDWTothi2_S3M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S3M4[ag + it*nbi] = fmax2(FDWTothi2_S3M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M1[ag + it*nbi] = fmax2(FDWTothi2_S4M1[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M2[ag + it*nbi] = fmax2(FDWTothi2_S4M2[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M3[ag + it*nbi] = fmax2(FDWTothi2_S4M3[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                            FDWTothi2_S4M4[ag + it*nbi] = fmax2(FDWTothi2_S4M4[ag + it*nbi]*(1+multip*mpond_oth[eTemp]),0.0);
                    }




                }


        // }

}

////Rprintf("CC2222222");
////PrintValue(getListElement(FList, "nbds_f"));

////PrintValue(NBDSF);

double *nbdsFM4 = REAL(getListElement(FList, "effort1_f_m"));
double *nbdsF4 = REAL(getListElement(FList, "effort1_f"));
double *nbvFM4 = REAL(getListElement(FList, "nbv_f_m"));
double *nbvF4 = REAL(getListElement(FList, "nbv_f"));
double *eff2FM4 = REAL(getListElement(FList, "effort2_f_m"));
double *eff2F4 = REAL(getListElement(FList, "effort2_f"));

for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

    NBVf[ind_f + nbF*it] = nbvF4[ind_f];
    NBDSf[ind_f + nbF*it] = nbdsF4[ind_f];
    EFF2f[ind_f + nbF*it] = eff2F4[ind_f];

    for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

        NBVfm[ind_f + nbF*ind_m + nbF*nbMe*it] = nbvFM4[ind_f + nbF*ind_m];
        NBDSfm[ind_f + nbF*ind_m + nbF*nbMe*it] = nbdsFM4[ind_f + nbF*ind_m];
        EFF2fm[ind_f + nbF*ind_m + nbF*nbMe*it] = eff2FM4[ind_f + nbF*ind_m];
    }
}

////Rprintf("CC33333333");
////PrintValue(getListElement(FList, "nbds_f"));
////PrintValue(NBDSF);


////Rprintf("DDDDDDDD\n");

////Rprintf("F\n");
//3 modules avec pas de temps différencié au niveau trimestre  <<-- ANNULE
Mortalite(list, it, eVar);////Rprintf("\nG");////PrintValue(out_Fr_fmi);//PrintValue(VECTOR_ELT(eVar,60));
DynamicPop(list, it, eVar,true);////Rprintf("\nH");//PrintValue(out_Z_eit);//PrintValue(out_N_eitQ);//PrintValue(out_N_eit);
CatchDL(list, it, eVar);////Rprintf("\nI");////PrintValue(out_Y_eit);

////Rprintf("Z2\n");
////PrintValue(VECTOR_ELT(out_Z_eit,2));
////Rprintf("N2\n");
////PrintValue(VECTOR_ELT(out_N_eit,2));
////Rprintf("Fbar2\n");
////PrintValue(VECTOR_ELT(out_Fbar_et,2));

//une fois que c'est terminé, il faut remettre certaines choses en place dans le cas n°4
if (conform==4) trgt=2;

}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//Rprintf("preJ\n");fichier << "preJ" << endl;
Marche(list, it);
//Rprintf("J\n");fichier << "J" << endl;
    EcoDCF(list, it, INTEGER(EcoInd)[4], REAL(dr)[0]);

//Rprintf("K\n");fichier << "K" << endl;// if (it>4) error("AAAhh");
//module gestion : si delay<=it & gestInd==1 & trgt==3 et si Fbar atteint, on rebascule trgt à 2
if (eTemp<nbE) {
  if ((delay<=it) & (gestInd==1) & (trgt==3) & (REAL(VECTOR_ELT(out_Fbar_et, eTemp))[it] <= Fbar_trgt[it]))  trgt=2;    //????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
}
//remise à l'état initial des paramètres du module Gestion si nécessaire (ATTENTION : implique qu'on n'atteint jamais l'effort nul quelle que soit la flottille
//                                                                                 dans le cas contraire, fixer upd=2)
//Rprintf("LL\n");fichier << "LL" << endl;


}
////Rprintf("K");
SET_VECTOR_ELT(out_effort, 0, NBVF); SET_VECTOR_ELT(out_effort, 1, NBDSF); SET_VECTOR_ELT(out_effort, 2, EFF2F);
SET_VECTOR_ELT(out_effort, 3, NBVFM); SET_VECTOR_ELT(out_effort, 4, NBDSFM); SET_VECTOR_ELT(out_effort, 5, EFF2FM);

const char *nmEf[6] = {"nbv_f","effort1_f","effort2_f","nbv_f_m","effort1_f_m","effort2_f_m"};
PROTECT(nmsEF = allocVector(STRSXP, 6));
for(int k = 0; k < 6; k++) SET_STRING_ELT(nmsEF, k, mkChar(nmEf[k]));
setAttrib(out_effort, R_NamesSymbol, nmsEF);
////Rprintf("L");
//if (eTemp<nbE) {
//  if (Qvec[eTemp]==0) {
//    free_vector(Ztemp,1,length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI")));
//  } else {
//    free_vector(Ztemp,1,length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"))*16);
//  }
//} else {
//  free_vector(Ztemp,1,2);
//}
free_vector(Etemp,1,nbF);


free_vector(Einterm_fm,1,nbF*nbMe);
free_vector(Einterm_fm_copy,1,nbF*nbMe);
free_vector(EffsupTMP_fm,1,nbF*nbMe);
free_vector(multFOTHinterm_e,1,nbE);

//Rprintf("K2\n");fichier << "K2" << endl;
UNPROTECT(123+nbE+nbE+32+11+1+3+3+2+1+5); //+6 ajoutés après intégration de 'parOQD'
if (nbEstat>0) UNPROTECT(nbEstat);
//fichier.close();
}

//------------------------------------------------------------------------------------
//destructeur de la classe Param
//------------------------------------------------------------------------------------

//BioEcoPar::~BioEcoPar()
//{
//}



//extern "C" : pour éviter le "name mangling process" qui renomme les fonctions exportées dans les dll.


//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
// UTILITIES
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------




//------------------------------------------
// accesseur à un élément d'une liste donnée (list = liste en question , str {caractère} = intitulé de l'élément de la liste)
//------------------------------------------
extern "C" {

SEXP BioEcoPar::getListElement(SEXP list, const char *str)
{
    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);
    int i;

    for (i = 0; i < length(list); i++)
        if (strcmp(CHAR(STRING_ELT(names,i)), str) == 0) {
            elmt = VECTOR_ELT(list, i);
            break;
        }

    return elmt;
}

}

extern "C" {

int BioEcoPar::getListIndex(SEXP list, const char *str) //fonctionne aussi pour les vecteurs nommés
{
    SEXP names = getAttrib(list, R_NamesSymbol);
    int i;

    for (i = 0; i < length(list); i++)
        if (strcmp(CHAR(STRING_ELT(names,i)), str) == 0) break;

    return i;
}

}


//------------------------------------------
// fonction all.is.na (teste si tous les éléments d'un objet sont à NA ou non)
//------------------------------------------

int BioEcoPar::all_is_na(SEXP object)
{
    int res = 1;
    double *robj = REAL(object);

    for (int i = 0 ; i < length(object) ; i++)
        if (!ISNA(robj[i])) {

            res = 0;
            break;
        }

    return res;
}


//------------------------------------------
// fonction qui rend 0 si la valeur est NA, NaN ou Inf
//------------------------------------------

double BioEcoPar::finite(double value)
{
    if (!R_FINITE(value)) return(0.0); else return(value);

}



//------------------------------------------
// fonction de calcul de multiplicateurs d'indices selon les dimensions d'un objet 'array'
// (permet la généricité des équations en assurant la compatibilité des variables en présence,
//  quelles que soient leurs dimensions respectives)
// INPUT : attribut 'DimCst' de l'objet en question
//------------------------------------------

SEXP BioEcoPar::iDim(int *dimInput) {

    SEXP Tab;
    PROTECT(Tab = allocVector(INTSXP,4));
    int *tab = INTEGER(Tab);

    tab[0] = (dimInput[0]>0);
    tab[1] = (dimInput[1]>0)*(1 + (dimInput[0]-1)*(dimInput[0]>0));
    tab[2] = (dimInput[2]>0)*(1 + (dimInput[1]-1)*(dimInput[1]>0))*(1 + (dimInput[0]-1)*(dimInput[0]>0));
    tab[3] = (dimInput[3]>0)*(1 + (dimInput[2]-1)*(dimInput[2]>0))*(1 + (dimInput[1]-1)*(dimInput[1]>0))*(1 + (dimInput[0]-1)*(dimInput[0]>0));

    UNPROTECT(1);
    return(Tab);

}


//------------------------------------------
// fonction d'agrégation d'un objet attribué type ('object'), en fonction d'un nouveau vecteur dimension DimCst ('newDim')
// NB : toutes les valeurs de 'newDim' doivent être au plus égales aux dimensions correspondantes de l'objet pour que la fonction s'applique
//------------------------------------------

extern "C" {

SEXP BioEcoPar::aggregObj(SEXP object, SEXP newDim)
{
    PROTECT(object=object);
    PROTECT(newDim=newDim);

    SEXP ans, dimObj, dimnames, Dim;

    int *dim, *ndim, *rdim;
    double *rans, *robj;

    PROTECT(dimObj = getAttrib(object, install("DimCst")));

    dim = INTEGER(dimObj); ndim = INTEGER(newDim);

    //tests sur les dimensions
    if ((dim[0]==0) & (dim[1]==0) & (dim[2]==0) & (dim[3]==0)) {  //c'est terminé, rien à agréger

        return(object);

    } else {

        if ((dim[0]<ndim[0]) | (dim[1]<ndim[1]) | (dim[2]<ndim[2]) | (dim[3]<ndim[3]))
        {
            error("Check input dimensions in 'aggregObj'!!\n");
        }

        //on calcule le nombre de cellules à remplir et le nombre de dimensions nulles
        int nbCell = 1, nbDim = 0, incr = 0, incr2 = 0;
        for (int i = 0 ; i < 4 ; i++) {

            if (ndim[i]>0) {
            nbDim++;
            nbCell = nbCell * ndim[i];
            }

        }

        PROTECT(ans = NEW_NUMERIC(nbCell));

        rans = REAL(ans);
        robj = REAL(object);

        //on initialise
        for (int i = 0 ; i < nbCell ; i++) rans[i] = 0.0;

        if (nbDim>0) {

            //en-têtes
            PROTECT(Dim = allocVector(INTSXP,nbDim));
            rdim = INTEGER(Dim);
            PROTECT(dimnames = allocVector(VECSXP,nbDim));
            for (int i = 0 ; i < 4 ; i++) {

                if (ndim[i]>0) {
                    if (GET_DIMNAMES(object)!=R_NilValue) SET_VECTOR_ELT(dimnames, incr, VECTOR_ELT(GET_DIMNAMES(object), incr2)) ;
                    rdim[incr] = ndim[i] ;
                    incr++;}
                if (dim[i]>0) incr2++;

            }

            setAttrib(ans, R_DimSymbol, Dim);
            if (GET_DIMNAMES(object)!=R_NilValue) setAttrib(ans, R_DimNamesSymbol, dimnames);
        }

        setAttrib(ans, install("DimCst"), newDim);

        //multiplicateurs
        int *index_dim = INTEGER(iDim(dim));
        int *index_ndim = INTEGER(iDim(ndim));

        //il ne reste plus qu'à effectuer l'agrégation
        for (int ind_f = 0 ; ind_f < (1 + (dim[0] - 1)*(dim[0]>0)) ; ind_f++)
        for (int ind_m = 0 ; ind_m < (1 + (dim[1] - 1)*(dim[1]>0)) ; ind_m++)
        for (int ind_i = 0 ; ind_i < (1 + (dim[2] - 1)*(dim[2]>0)) ; ind_i++)
        for (int ind_t = 0 ; ind_t < (1 + (dim[3] - 1)*(dim[3]>0)) ; ind_t++)

            if (!ISNA(robj[ind_f*index_dim[0] + ind_m*index_dim[1] + ind_i*index_dim[2] + ind_t*index_dim[3]])) {
                rans[ind_f*index_ndim[0] + ind_m*index_ndim[1] + ind_i*index_ndim[2] + ind_t*index_ndim[3]] =
                rans[ind_f*index_ndim[0] + ind_m*index_ndim[1] + ind_i*index_ndim[2] + ind_t*index_ndim[3]] +
                robj[ind_f*index_dim[0] + ind_m*index_dim[1] + ind_i*index_dim[2] + ind_t*index_dim[3]];
            }

        if (nbDim>0) {

            UNPROTECT(2);
        }

        UNPROTECT(4);
        return (ans);
}

}
}





//------------------------------------------
// fonction de calcul de l'indice de capturabilité en fonction de la mortalité par pêche et d'une variable d'effort donnée : à opérer à t=0
//------------------------------------------


extern "C" {

SEXP BioEcoPar::calcCapturabilite(SEXP adjustedMortal, SEXP effortIni)
{                                  // adjustedMortal est l'output de la fonction 'allocMortality'
                                   // effortIni est en fait l'objet Effort entier --> la restriction au temps initial se fait en interne

    PROTECT(adjustedMortal=adjustedMortal);
    PROTECT(effortIni=effortIni);

    SEXP ans, formatEff, dimCstEff, dimMort, dimEff;

    int *dimE, *dimM, *dimEffort;
    double *rans, *rEff, *rMort;

    PROTECT(dimMort = getAttrib(adjustedMortal, install("DimCst")));
    PROTECT(dimEff = getAttrib(effortIni, install("DimCst")));

    dimM = INTEGER(dimMort); dimE = INTEGER(dimEff);

    //tests sur les dimensions
    if (((dimE[0]!=0) & (dimM[0]!=0) & (dimE[0]!=dimM[0])) | ((dimE[1]!=0) & (dimM[1]!=0) & (dimE[1]!=dimM[1])) |
        ((dimE[2]!=0) & (dimM[2]!=0) & (dimE[2]!=dimM[2])) | ((dimE[3]!=0) & (dimM[3]!=0) & (dimE[3]!=dimM[3])))
    {
        error("Non_homogeneous dimensions of 'allocMortality' output object and 'Effort' input object!!\n");
    }
    if (dimM[3]!=0)
    {
        warning("Adjusted 'F_fmi' parameter must be constant within time!! Calculation will be done with initial value! \n");
    }

    PROTECT(dimCstEff = allocVector(INTSXP,4));
    dimEffort = INTEGER(dimCstEff);
    for (int i = 0 ; i < 3 ; i++) dimEffort[i] = imin2(dimM[i], dimE[i]);
    dimEffort[3] = dimE[3]; //on n'agrège pas sur le temps puisque on ne considère ensuite que l'instant initial

        PROTECT(formatEff = aggregObj(effortIni, dimCstEff));
        rEff = REAL(formatEff);
        rMort = REAL(adjustedMortal);

        PROTECT(ans = NEW_NUMERIC(length(adjustedMortal)));
        rans = REAL(ans);


            setAttrib(ans, R_DimSymbol, getAttrib(adjustedMortal,R_DimSymbol));
            if (GET_DIMNAMES(adjustedMortal)!=R_NilValue) setAttrib(ans, R_DimNamesSymbol, getAttrib(adjustedMortal,R_DimNamesSymbol));

            setAttrib(ans, install("DimCst"), dimMort);

        //multiplicateurs
        int *fact1 = INTEGER(iDim(dimM));
        int *fact2 = INTEGER(iDim(dimEffort));

        for (int ind_f = 0 ; ind_f < (1 + (dimM[0] - 1)*(dimM[0]>0)) ; ind_f++)
        for (int ind_m = 0 ; ind_m < (1 + (dimM[1] - 1)*(dimM[1]>0)) ; ind_m++)
        for (int ind_i = 0 ; ind_i < (1 + (dimM[2] - 1)*(dimM[2]>0)) ; ind_i++) {

                rans[ind_f*fact1[0] + ind_m*fact1[1] + ind_i*fact1[2]] =
                finite(rMort[ind_f*fact1[0] + ind_m*fact1[1] + ind_i*fact1[2]] /
                rEff[ind_f*fact2[0] + ind_m*fact2[1] + ind_i*fact2[2]]) ;

                if (ISNAN(rans[ind_f*fact1[0] + ind_m*fact1[1] + ind_i*fact1[2]]))
                        rans[ind_f*fact1[0] + ind_m*fact1[1] + ind_i*fact1[2]] = 0.0;
        }

        UNPROTECT(7);
        return (ans);

}}






//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
// MODULES
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------

//------------------------------------------
// Module 'Mortalité par pêche et survie des rejets'
//------------------------------------------

extern "C" {

void BioEcoPar::Mortalite(SEXP list, int ind_t, SEXP EVAR)
{

SEXP Flist;
PROTECT(Flist = getListElement(list, "Fleet"));


//        string str1c, str2c, str3c;
//        str1c = "debugHKEmort_V";//"C:\\Users\\mmerzere\\Desktop\\test3\\debugHKEmort_V";//str1b = "\\home1\\datahome\\fbriton\\AMURE\\Sc_bug_hke\\debugHKEcatch_V";
//        str3c = "_V";
//        str2c = ".txt";
//
//        std::stringstream ssj, ssz;
//        ssj << ind_t;
//        ssz << EcoIndCopy[0];
//        str1c = str1c + ssj.str() + str3c + ssz.str() + str2c;
//
//        ofstream fichier2(str1c.c_str() , ios::out | ios::trunc);
//
//        fichier2 << "Début" << endl;


if (fUpdate) {

SEXP    elmt, dimEff,
        dimCst, Dim, dimCst_Sr_e, dimCst_d_efi, dimCst_doth_ei, dimCst_F_efmi, intAge, //dimCst_Capt_emi, dimCst_Capt_ei,
        v_Sr_e, v_d_efi, v_doth_ei, v_F_efmi = R_NilValue, v_F_efmi2 = R_NilValue, formatEff, dimCstEff, //rDim, v_Capt_emi, v_Capt_ei,

        v_F_efmi_S1M1 = R_NilValue, v_F_efmi_S1M2 = R_NilValue, v_F_efmi_S1M3 = R_NilValue, v_F_efmi_S1M4 = R_NilValue,
        v_F_efmi_S2M1 = R_NilValue, v_F_efmi_S2M2 = R_NilValue, v_F_efmi_S2M3 = R_NilValue, v_F_efmi_S2M4 = R_NilValue,
        v_F_efmi_S3M1 = R_NilValue, v_F_efmi_S3M2 = R_NilValue, v_F_efmi_S3M3 = R_NilValue, v_F_efmi_S3M4 = R_NilValue,
        v_F_efmi_S4M1 = R_NilValue, v_F_efmi_S4M2 = R_NilValue, v_F_efmi_S4M3 = R_NilValue, v_F_efmi_S4M4 = R_NilValue,
        v_F_efmi2_S1M1 = R_NilValue, v_F_efmi2_S1M2 = R_NilValue, v_F_efmi2_S1M3 = R_NilValue, v_F_efmi2_S1M4 = R_NilValue,
        v_F_efmi2_S2M1 = R_NilValue, v_F_efmi2_S2M2 = R_NilValue, v_F_efmi2_S2M3 = R_NilValue, v_F_efmi2_S2M4 = R_NilValue,
        v_F_efmi2_S3M1 = R_NilValue, v_F_efmi2_S3M2 = R_NilValue, v_F_efmi2_S3M3 = R_NilValue, v_F_efmi2_S3M4 = R_NilValue,
        v_F_efmi2_S4M1 = R_NilValue, v_F_efmi2_S4M2 = R_NilValue, v_F_efmi2_S4M3 = R_NilValue, v_F_efmi2_S4M4 = R_NilValue,
//        v_Foth_i_S1M1 = R_NilValue, v_Foth_i_S1M2 = R_NilValue, v_Foth_i_S1M3 = R_NilValue, v_Foth_i_S1M4 = R_NilValue,
//        v_Foth_i_S2M1 = R_NilValue, v_Foth_i_S2M2 = R_NilValue, v_Foth_i_S2M3 = R_NilValue, v_Foth_i_S2M4 = R_NilValue,
//        v_Foth_i_S3M1 = R_NilValue, v_Foth_i_S3M2 = R_NilValue, v_Foth_i_S3M3 = R_NilValue, v_Foth_i_S3M4 = R_NilValue,
//        v_Foth_i_S4M1 = R_NilValue, v_Foth_i_S4M2 = R_NilValue, v_Foth_i_S4M3 = R_NilValue, v_Foth_i_S4M4 = R_NilValue,
//        v_Froth_i_S1M1 = R_NilValue, v_Froth_i_S1M2 = R_NilValue, v_Froth_i_S1M3 = R_NilValue, v_Froth_i_S1M4 = R_NilValue,
//        v_Froth_i_S2M1 = R_NilValue, v_Froth_i_S2M2 = R_NilValue, v_Froth_i_S2M3 = R_NilValue, v_Froth_i_S2M4 = R_NilValue,
//        v_Froth_i_S3M1 = R_NilValue, v_Froth_i_S3M2 = R_NilValue, v_Froth_i_S3M3 = R_NilValue, v_Froth_i_S3M4 = R_NilValue,
//        v_Froth_i_S4M1 = R_NilValue, v_Froth_i_S4M2 = R_NilValue, v_Froth_i_S4M3 = R_NilValue, v_Froth_i_S4M4 = R_NilValue,
        Foth_i_S1M1 = R_NilValue, Foth_i_S1M2 = R_NilValue, Foth_i_S1M3 = R_NilValue, Foth_i_S1M4 = R_NilValue,
        Foth_i_S2M1 = R_NilValue, Foth_i_S2M2 = R_NilValue, Foth_i_S2M3 = R_NilValue, Foth_i_S2M4 = R_NilValue,
        Foth_i_S3M1 = R_NilValue, Foth_i_S3M2 = R_NilValue, Foth_i_S3M3 = R_NilValue, Foth_i_S3M4 = R_NilValue,
        Foth_i_S4M1 = R_NilValue, Foth_i_S4M2 = R_NilValue, Foth_i_S4M3 = R_NilValue, Foth_i_S4M4 = R_NilValue,
        Froth_i_S1M1 = R_NilValue, Froth_i_S1M2 = R_NilValue, Froth_i_S1M3 = R_NilValue, Froth_i_S1M4 = R_NilValue,
        Froth_i_S2M1 = R_NilValue, Froth_i_S2M2 = R_NilValue, Froth_i_S2M3 = R_NilValue, Froth_i_S2M4 = R_NilValue,
        Froth_i_S3M1 = R_NilValue, Froth_i_S3M2 = R_NilValue, Froth_i_S3M3 = R_NilValue, Froth_i_S3M4 = R_NilValue,
        Froth_i_S4M1 = R_NilValue, Froth_i_S4M2 = R_NilValue, Froth_i_S4M3 = R_NilValue, Froth_i_S4M4 = R_NilValue,

        v_FRWT_efmi_S1M1 = R_NilValue, v_FRWT_efmi_S1M2 = R_NilValue, v_FRWT_efmi_S1M3 = R_NilValue, v_FRWT_efmi_S1M4 = R_NilValue,
        v_FRWT_efmi_S2M1 = R_NilValue, v_FRWT_efmi_S2M2 = R_NilValue, v_FRWT_efmi_S2M3 = R_NilValue, v_FRWT_efmi_S2M4 = R_NilValue,
        v_FRWT_efmi_S3M1 = R_NilValue, v_FRWT_efmi_S3M2 = R_NilValue, v_FRWT_efmi_S3M3 = R_NilValue, v_FRWT_efmi_S3M4 = R_NilValue,
        v_FRWT_efmi_S4M1 = R_NilValue, v_FRWT_efmi_S4M2 = R_NilValue, v_FRWT_efmi_S4M3 = R_NilValue, v_FRWT_efmi_S4M4 = R_NilValue,
        v_FRWT_efmi2_S1M1 = R_NilValue, v_FRWT_efmi2_S1M2 = R_NilValue, v_FRWT_efmi2_S1M3 = R_NilValue, v_FRWT_efmi2_S1M4 = R_NilValue,
        v_FRWT_efmi2_S2M1 = R_NilValue, v_FRWT_efmi2_S2M2 = R_NilValue, v_FRWT_efmi2_S2M3 = R_NilValue, v_FRWT_efmi2_S2M4 = R_NilValue,
        v_FRWT_efmi2_S3M1 = R_NilValue, v_FRWT_efmi2_S3M2 = R_NilValue, v_FRWT_efmi2_S3M3 = R_NilValue, v_FRWT_efmi2_S3M4 = R_NilValue,
        v_FRWT_efmi2_S4M1 = R_NilValue, v_FRWT_efmi2_S4M2 = R_NilValue, v_FRWT_efmi2_S4M3 = R_NilValue, v_FRWT_efmi2_S4M4 = R_NilValue,
        FRWToth_i_S1M1 = R_NilValue, FRWToth_i_S1M2 = R_NilValue, FRWToth_i_S1M3 = R_NilValue, FRWToth_i_S1M4 = R_NilValue,
        FRWToth_i_S2M1 = R_NilValue, FRWToth_i_S2M2 = R_NilValue, FRWToth_i_S2M3 = R_NilValue, FRWToth_i_S2M4 = R_NilValue,
        FRWToth_i_S3M1 = R_NilValue, FRWToth_i_S3M2 = R_NilValue, FRWToth_i_S3M3 = R_NilValue, FRWToth_i_S3M4 = R_NilValue,
        FRWToth_i_S4M1 = R_NilValue, FRWToth_i_S4M2 = R_NilValue, FRWToth_i_S4M3 = R_NilValue, FRWToth_i_S4M4 = R_NilValue,
//        FRWTroth_i_S1M1 = R_NilValue, FRWTroth_i_S1M2 = R_NilValue, FRWTroth_i_S1M3 = R_NilValue, FRWTroth_i_S1M4 = R_NilValue,
//        FRWTroth_i_S2M1 = R_NilValue, FRWTroth_i_S2M2 = R_NilValue, FRWTroth_i_S2M3 = R_NilValue, FRWTroth_i_S2M4 = R_NilValue,
//        FRWTroth_i_S3M1 = R_NilValue, FRWTroth_i_S3M2 = R_NilValue, FRWTroth_i_S3M3 = R_NilValue, FRWTroth_i_S3M4 = R_NilValue,
//        FRWTroth_i_S4M1 = R_NilValue, FRWTroth_i_S4M2 = R_NilValue, FRWTroth_i_S4M3 = R_NilValue, FRWTroth_i_S4M4 = R_NilValue,

        v_FDWT_efmi_S1M1 = R_NilValue, v_FDWT_efmi_S1M2 = R_NilValue, v_FDWT_efmi_S1M3 = R_NilValue, v_FDWT_efmi_S1M4 = R_NilValue,
        v_FDWT_efmi_S2M1 = R_NilValue, v_FDWT_efmi_S2M2 = R_NilValue, v_FDWT_efmi_S2M3 = R_NilValue, v_FDWT_efmi_S2M4 = R_NilValue,
        v_FDWT_efmi_S3M1 = R_NilValue, v_FDWT_efmi_S3M2 = R_NilValue, v_FDWT_efmi_S3M3 = R_NilValue, v_FDWT_efmi_S3M4 = R_NilValue,
        v_FDWT_efmi_S4M1 = R_NilValue, v_FDWT_efmi_S4M2 = R_NilValue, v_FDWT_efmi_S4M3 = R_NilValue, v_FDWT_efmi_S4M4 = R_NilValue,
        v_FDWT_efmi2_S1M1 = R_NilValue, v_FDWT_efmi2_S1M2 = R_NilValue, v_FDWT_efmi2_S1M3 = R_NilValue, v_FDWT_efmi2_S1M4 = R_NilValue,
        v_FDWT_efmi2_S2M1 = R_NilValue, v_FDWT_efmi2_S2M2 = R_NilValue, v_FDWT_efmi2_S2M3 = R_NilValue, v_FDWT_efmi2_S2M4 = R_NilValue,
        v_FDWT_efmi2_S3M1 = R_NilValue, v_FDWT_efmi2_S3M2 = R_NilValue, v_FDWT_efmi2_S3M3 = R_NilValue, v_FDWT_efmi2_S3M4 = R_NilValue,
        v_FDWT_efmi2_S4M1 = R_NilValue, v_FDWT_efmi2_S4M2 = R_NilValue, v_FDWT_efmi2_S4M3 = R_NilValue, v_FDWT_efmi2_S4M4 = R_NilValue,
        FDWToth_i_S1M1 = R_NilValue, FDWToth_i_S1M2 = R_NilValue, FDWToth_i_S1M3 = R_NilValue, FDWToth_i_S1M4 = R_NilValue,
        FDWToth_i_S2M1 = R_NilValue, FDWToth_i_S2M2 = R_NilValue, FDWToth_i_S2M3 = R_NilValue, FDWToth_i_S2M4 = R_NilValue,
        FDWToth_i_S3M1 = R_NilValue, FDWToth_i_S3M2 = R_NilValue, FDWToth_i_S3M3 = R_NilValue, FDWToth_i_S3M4 = R_NilValue,
        FDWToth_i_S4M1 = R_NilValue, FDWToth_i_S4M2 = R_NilValue, FDWToth_i_S4M3 = R_NilValue, FDWToth_i_S4M4 = R_NilValue,
//        FDWTroth_i_S1M1 = R_NilValue, FDWTroth_i_S1M2 = R_NilValue, FDWTroth_i_S1M3 = R_NilValue, FDWTroth_i_S1M4 = R_NilValue,
//        FDWTroth_i_S2M1 = R_NilValue, FDWTroth_i_S2M2 = R_NilValue, FDWTroth_i_S2M3 = R_NilValue, FDWTroth_i_S2M4 = R_NilValue,
//        FDWTroth_i_S3M1 = R_NilValue, FDWTroth_i_S3M2 = R_NilValue, FDWTroth_i_S3M3 = R_NilValue, FDWTroth_i_S3M4 = R_NilValue,
//        FDWTroth_i_S4M1 = R_NilValue, FDWTroth_i_S4M2 = R_NilValue, FDWTroth_i_S4M3 = R_NilValue, FDWTroth_i_S4M4 = R_NilValue,


        v_iniF_efmi_S1M1 = R_NilValue, v_iniF_efmi_S1M2 = R_NilValue, v_iniF_efmi_S1M3 = R_NilValue, v_iniF_efmi_S1M4 = R_NilValue,
        v_iniF_efmi_S2M1 = R_NilValue, v_iniF_efmi_S2M2 = R_NilValue, v_iniF_efmi_S2M3 = R_NilValue, v_iniF_efmi_S2M4 = R_NilValue,
        v_iniF_efmi_S3M1 = R_NilValue, v_iniF_efmi_S3M2 = R_NilValue, v_iniF_efmi_S3M3 = R_NilValue, v_iniF_efmi_S3M4 = R_NilValue,
        v_iniF_efmi_S4M1 = R_NilValue, v_iniF_efmi_S4M2 = R_NilValue, v_iniF_efmi_S4M3 = R_NilValue, v_iniF_efmi_S4M4 = R_NilValue,
        v_iniF_efmi2_S1M1 = R_NilValue, v_iniF_efmi2_S1M2 = R_NilValue, v_iniF_efmi2_S1M3 = R_NilValue, v_iniF_efmi2_S1M4 = R_NilValue,
        v_iniF_efmi2_S2M1 = R_NilValue, v_iniF_efmi2_S2M2 = R_NilValue, v_iniF_efmi2_S2M3 = R_NilValue, v_iniF_efmi2_S2M4 = R_NilValue,
        v_iniF_efmi2_S3M1 = R_NilValue, v_iniF_efmi2_S3M2 = R_NilValue, v_iniF_efmi2_S3M3 = R_NilValue, v_iniF_efmi2_S3M4 = R_NilValue,
        v_iniF_efmi2_S4M1 = R_NilValue, v_iniF_efmi2_S4M2 = R_NilValue, v_iniF_efmi2_S4M3 = R_NilValue, v_iniF_efmi2_S4M4 = R_NilValue,
//        v_iniFoth_i_S1M1 = R_NilValue, v_iniFoth_i_S1M2 = R_NilValue, v_iniFoth_i_S1M3 = R_NilValue, v_iniFoth_i_S1M4 = R_NilValue,
//        v_iniFoth_i_S2M1 = R_NilValue, v_iniFoth_i_S2M2 = R_NilValue, v_iniFoth_i_S2M3 = R_NilValue, v_iniFoth_i_S2M4 = R_NilValue,
//        v_iniFoth_i_S3M1 = R_NilValue, v_iniFoth_i_S3M2 = R_NilValue, v_iniFoth_i_S3M3 = R_NilValue, v_iniFoth_i_S3M4 = R_NilValue,
//        v_iniFoth_i_S4M1 = R_NilValue, v_iniFoth_i_S4M2 = R_NilValue, v_iniFoth_i_S4M3 = R_NilValue, v_iniFoth_i_S4M4 = R_NilValue,
//        v_iniFroth_i_S1M1 = R_NilValue, v_iniFroth_i_S1M2 = R_NilValue, v_iniFroth_i_S1M3 = R_NilValue, v_iniFroth_i_S1M4 = R_NilValue,
//        v_iniFroth_i_S2M1 = R_NilValue, v_iniFroth_i_S2M2 = R_NilValue, v_iniFroth_i_S2M3 = R_NilValue, v_iniFroth_i_S2M4 = R_NilValue,
//        v_iniFroth_i_S3M1 = R_NilValue, v_iniFroth_i_S3M2 = R_NilValue, v_iniFroth_i_S3M3 = R_NilValue, v_iniFroth_i_S3M4 = R_NilValue,
//        v_iniFroth_i_S4M1 = R_NilValue, v_iniFroth_i_S4M2 = R_NilValue, v_iniFroth_i_S4M3 = R_NilValue, v_iniFroth_i_S4M4 = R_NilValue,
//        iniFoth_i_S1M1 = R_NilValue, iniFoth_i_S1M2 = R_NilValue, iniFoth_i_S1M3 = R_NilValue, iniFoth_i_S1M4 = R_NilValue,
//        iniFoth_i_S2M1 = R_NilValue, iniFoth_i_S2M2 = R_NilValue, iniFoth_i_S2M3 = R_NilValue, iniFoth_i_S2M4 = R_NilValue,
//        iniFoth_i_S3M1 = R_NilValue, iniFoth_i_S3M2 = R_NilValue, iniFoth_i_S3M3 = R_NilValue, iniFoth_i_S3M4 = R_NilValue,
//        iniFoth_i_S4M1 = R_NilValue, iniFoth_i_S4M2 = R_NilValue, iniFoth_i_S4M3 = R_NilValue, iniFoth_i_S4M4 = R_NilValue,
//        iniFroth_i_S1M1 = R_NilValue, iniFroth_i_S1M2 = R_NilValue, iniFroth_i_S1M3 = R_NilValue, iniFroth_i_S1M4 = R_NilValue,
//        iniFroth_i_S2M1 = R_NilValue, iniFroth_i_S2M2 = R_NilValue, iniFroth_i_S2M3 = R_NilValue, iniFroth_i_S2M4 = R_NilValue,
//        iniFroth_i_S3M1 = R_NilValue, iniFroth_i_S3M2 = R_NilValue, iniFroth_i_S3M3 = R_NilValue, iniFroth_i_S3M4 = R_NilValue,
//        iniFroth_i_S4M1 = R_NilValue, iniFroth_i_S4M2 = R_NilValue, iniFroth_i_S4M3 = R_NilValue, iniFroth_i_S4M4 = R_NilValue,

        v_iniFRWT_efmi_S1M1 = R_NilValue, v_iniFRWT_efmi_S1M2 = R_NilValue, v_iniFRWT_efmi_S1M3 = R_NilValue, v_iniFRWT_efmi_S1M4 = R_NilValue,
        v_iniFRWT_efmi_S2M1 = R_NilValue, v_iniFRWT_efmi_S2M2 = R_NilValue, v_iniFRWT_efmi_S2M3 = R_NilValue, v_iniFRWT_efmi_S2M4 = R_NilValue,
        v_iniFRWT_efmi_S3M1 = R_NilValue, v_iniFRWT_efmi_S3M2 = R_NilValue, v_iniFRWT_efmi_S3M3 = R_NilValue, v_iniFRWT_efmi_S3M4 = R_NilValue,
        v_iniFRWT_efmi_S4M1 = R_NilValue, v_iniFRWT_efmi_S4M2 = R_NilValue, v_iniFRWT_efmi_S4M3 = R_NilValue, v_iniFRWT_efmi_S4M4 = R_NilValue,
        v_iniFRWT_efmi2_S1M1 = R_NilValue, v_iniFRWT_efmi2_S1M2 = R_NilValue, v_iniFRWT_efmi2_S1M3 = R_NilValue, v_iniFRWT_efmi2_S1M4 = R_NilValue,
        v_iniFRWT_efmi2_S2M1 = R_NilValue, v_iniFRWT_efmi2_S2M2 = R_NilValue, v_iniFRWT_efmi2_S2M3 = R_NilValue, v_iniFRWT_efmi2_S2M4 = R_NilValue,
        v_iniFRWT_efmi2_S3M1 = R_NilValue, v_iniFRWT_efmi2_S3M2 = R_NilValue, v_iniFRWT_efmi2_S3M3 = R_NilValue, v_iniFRWT_efmi2_S3M4 = R_NilValue,
        v_iniFRWT_efmi2_S4M1 = R_NilValue, v_iniFRWT_efmi2_S4M2 = R_NilValue, v_iniFRWT_efmi2_S4M3 = R_NilValue, v_iniFRWT_efmi2_S4M4 = R_NilValue,
//        iniFRWToth_i_S1M1 = R_NilValue, iniFRWToth_i_S1M2 = R_NilValue, iniFRWToth_i_S1M3 = R_NilValue, iniFRWToth_i_S1M4 = R_NilValue,
//        iniFRWToth_i_S2M1 = R_NilValue, iniFRWToth_i_S2M2 = R_NilValue, iniFRWToth_i_S2M3 = R_NilValue, iniFRWToth_i_S2M4 = R_NilValue,
//        iniFRWToth_i_S3M1 = R_NilValue, iniFRWToth_i_S3M2 = R_NilValue, iniFRWToth_i_S3M3 = R_NilValue, iniFRWToth_i_S3M4 = R_NilValue,
//        iniFRWToth_i_S4M1 = R_NilValue, iniFRWToth_i_S4M2 = R_NilValue, iniFRWToth_i_S4M3 = R_NilValue, iniFRWToth_i_S4M4 = R_NilValue,
//        iniFRWTroth_i_S1M1 = R_NilValue, iniFRWTroth_i_S1M2 = R_NilValue, iniFRWTroth_i_S1M3 = R_NilValue, iniFRWTroth_i_S1M4 = R_NilValue,
//        iniFRWTroth_i_S2M1 = R_NilValue, iniFRWTroth_i_S2M2 = R_NilValue, iniFRWTroth_i_S2M3 = R_NilValue, iniFRWTroth_i_S2M4 = R_NilValue,
//        iniFRWTroth_i_S3M1 = R_NilValue, iniFRWTroth_i_S3M2 = R_NilValue, iniFRWTroth_i_S3M3 = R_NilValue, iniFRWTroth_i_S3M4 = R_NilValue,
//        iniFRWTroth_i_S4M1 = R_NilValue, iniFRWTroth_i_S4M2 = R_NilValue, iniFRWTroth_i_S4M3 = R_NilValue, iniFRWTroth_i_S4M4 = R_NilValue,

        v_iniFDWT_efmi_S1M1 = R_NilValue, v_iniFDWT_efmi_S1M2 = R_NilValue, v_iniFDWT_efmi_S1M3 = R_NilValue, v_iniFDWT_efmi_S1M4 = R_NilValue,
        v_iniFDWT_efmi_S2M1 = R_NilValue, v_iniFDWT_efmi_S2M2 = R_NilValue, v_iniFDWT_efmi_S2M3 = R_NilValue, v_iniFDWT_efmi_S2M4 = R_NilValue,
        v_iniFDWT_efmi_S3M1 = R_NilValue, v_iniFDWT_efmi_S3M2 = R_NilValue, v_iniFDWT_efmi_S3M3 = R_NilValue, v_iniFDWT_efmi_S3M4 = R_NilValue,
        v_iniFDWT_efmi_S4M1 = R_NilValue, v_iniFDWT_efmi_S4M2 = R_NilValue, v_iniFDWT_efmi_S4M3 = R_NilValue, v_iniFDWT_efmi_S4M4 = R_NilValue,
        v_iniFDWT_efmi2_S1M1 = R_NilValue, v_iniFDWT_efmi2_S1M2 = R_NilValue, v_iniFDWT_efmi2_S1M3 = R_NilValue, v_iniFDWT_efmi2_S1M4 = R_NilValue,
        v_iniFDWT_efmi2_S2M1 = R_NilValue, v_iniFDWT_efmi2_S2M2 = R_NilValue, v_iniFDWT_efmi2_S2M3 = R_NilValue, v_iniFDWT_efmi2_S2M4 = R_NilValue,
        v_iniFDWT_efmi2_S3M1 = R_NilValue, v_iniFDWT_efmi2_S3M2 = R_NilValue, v_iniFDWT_efmi2_S3M3 = R_NilValue, v_iniFDWT_efmi2_S3M4 = R_NilValue,
        v_iniFDWT_efmi2_S4M1 = R_NilValue, v_iniFDWT_efmi2_S4M2 = R_NilValue, v_iniFDWT_efmi2_S4M3 = R_NilValue, v_iniFDWT_efmi2_S4M4 = R_NilValue,
//        iniFDWToth_i_S1M1 = R_NilValue, iniFDWToth_i_S1M2 = R_NilValue, iniFDWToth_i_S1M3 = R_NilValue, iniFDWToth_i_S1M4 = R_NilValue,
//        iniFDWToth_i_S2M1 = R_NilValue, iniFDWToth_i_S2M2 = R_NilValue, iniFDWToth_i_S2M3 = R_NilValue, iniFDWToth_i_S2M4 = R_NilValue,
//        iniFDWToth_i_S3M1 = R_NilValue, iniFDWToth_i_S3M2 = R_NilValue, iniFDWToth_i_S3M3 = R_NilValue, iniFDWToth_i_S3M4 = R_NilValue,
//        iniFDWToth_i_S4M1 = R_NilValue, iniFDWToth_i_S4M2 = R_NilValue, iniFDWToth_i_S4M3 = R_NilValue, iniFDWToth_i_S4M4 = R_NilValue,
//        iniFDWTroth_i_S1M1 = R_NilValue, iniFDWTroth_i_S1M2 = R_NilValue, iniFDWTroth_i_S1M3 = R_NilValue, iniFDWTroth_i_S1M4 = R_NilValue,
//        iniFDWTroth_i_S2M1 = R_NilValue, iniFDWTroth_i_S2M2 = R_NilValue, iniFDWTroth_i_S2M3 = R_NilValue, iniFDWTroth_i_S2M4 = R_NilValue,
//        iniFDWTroth_i_S3M1 = R_NilValue, iniFDWTroth_i_S3M2 = R_NilValue, iniFDWTroth_i_S3M3 = R_NilValue, iniFDWTroth_i_S3M4 = R_NilValue,
//        iniFDWTroth_i_S4M1 = R_NilValue, iniFDWTroth_i_S4M2 = R_NilValue, iniFDWTroth_i_S4M3 = R_NilValue, iniFDWTroth_i_S4M4 = R_NilValue,

        v_nbNav_f, v_nbds_f, dim_nbNavCst, dim_nbdsCst, dim_Finput,// v_Finput, v_fm, v_ventilMoy_f, dim_fmCst, dim_ventilMoyCst,
        fFACT1, fFACT2, fFACT3, fFACT4, fFACT5, fFACT6, Foth_i, Froth_i, dimI, dimIT, DimIT, fFACTsup1, fFACTsup2; //v_ventil2,

SEXP ans_11 = R_NilValue, ans_11l = R_NilValue, dimnames= R_NilValue, dimnamesIT= R_NilValue, rnames= R_NilValue; //, v_Ffm=R_NilValue;

SEXP    ans_11_S1M1 = R_NilValue, ans_11_S1M2 = R_NilValue, ans_11_S1M3 = R_NilValue, ans_11_S1M4 = R_NilValue,
        ans_11_S2M1 = R_NilValue, ans_11_S2M2 = R_NilValue, ans_11_S2M3 = R_NilValue, ans_11_S2M4 = R_NilValue,
        ans_11_S3M1 = R_NilValue, ans_11_S3M2 = R_NilValue, ans_11_S3M3 = R_NilValue, ans_11_S3M4 = R_NilValue,
        ans_11_S4M1 = R_NilValue, ans_11_S4M2 = R_NilValue, ans_11_S4M3 = R_NilValue, ans_11_S4M4 = R_NilValue,

        ans_FRWT_S1M1 = R_NilValue, ans_FRWT_S1M2 = R_NilValue, ans_FRWT_S1M3 = R_NilValue, ans_FRWT_S1M4 = R_NilValue,
        ans_FRWT_S2M1 = R_NilValue, ans_FRWT_S2M2 = R_NilValue, ans_FRWT_S2M3 = R_NilValue, ans_FRWT_S2M4 = R_NilValue,
        ans_FRWT_S3M1 = R_NilValue, ans_FRWT_S3M2 = R_NilValue, ans_FRWT_S3M3 = R_NilValue, ans_FRWT_S3M4 = R_NilValue,
        ans_FRWT_S4M1 = R_NilValue, ans_FRWT_S4M2 = R_NilValue, ans_FRWT_S4M3 = R_NilValue, ans_FRWT_S4M4 = R_NilValue,

        ans_FDWT_S1M1 = R_NilValue, ans_FDWT_S1M2 = R_NilValue, ans_FDWT_S1M3 = R_NilValue, ans_FDWT_S1M4 = R_NilValue,
        ans_FDWT_S2M1 = R_NilValue, ans_FDWT_S2M2 = R_NilValue, ans_FDWT_S2M3 = R_NilValue, ans_FDWT_S2M4 = R_NilValue,
        ans_FDWT_S3M1 = R_NilValue, ans_FDWT_S3M2 = R_NilValue, ans_FDWT_S3M3 = R_NilValue, ans_FDWT_S3M4 = R_NilValue,
        ans_FDWT_S4M1 = R_NilValue, ans_FDWT_S4M2 = R_NilValue, ans_FDWT_S4M3 = R_NilValue, ans_FDWT_S4M4 = R_NilValue,

        ans_11l_S1M1 = R_NilValue, ans_11l_S1M2 = R_NilValue, ans_11l_S1M3 = R_NilValue, ans_11l_S1M4 = R_NilValue,
        ans_11l_S2M1 = R_NilValue, ans_11l_S2M2 = R_NilValue, ans_11l_S2M3 = R_NilValue, ans_11l_S2M4 = R_NilValue,
        ans_11l_S3M1 = R_NilValue, ans_11l_S3M2 = R_NilValue, ans_11l_S3M3 = R_NilValue, ans_11l_S3M4 = R_NilValue,
        ans_11l_S4M1 = R_NilValue, ans_11l_S4M2 = R_NilValue, ans_11l_S4M3 = R_NilValue, ans_11l_S4M4 = R_NilValue;

SEXP effort;

//on intègre la donnée d'effort (qu'on l'utilise ensuite pour le calcul de la capturabilité, ou pas)

PROTECT(effort = getListElement(Flist, "effort_f_m_tot"));

PROTECT(dimEff = getAttrib(effort, install("DimCst")));

int *dim_Sr_e, *dim_d_efi, *dim_doth_ei, *dim_F_efmi, *dimC, *dimE, *dimM, *dimEffort, *dimF, //*dim_Capt_emi, *dim_Capt_ei
    *dimNav, *dimNbds; //, *dim_fm, *dim_vMoy,*rdim;
int nbI;

double *rans_11=&NA_REAL, *rans_11l=&NA_REAL, *r_Sr_e=&NA_REAL, *r_d_efi=&NA_REAL, *r_doth_ei=&NA_REAL, *r_F_efmi=&NA_REAL, *rEff=&NA_REAL, //*r_nbNav_f,  //*r_fm, *r_ventilMoy_f,

//        *r_F_efmi_S1M1=&NA_REAL, *r_F_efmi_S1M2=&NA_REAL, *r_F_efmi_S1M3=&NA_REAL, *r_F_efmi_S1M4=&NA_REAL,
//        *r_F_efmi_S2M1=&NA_REAL, *r_F_efmi_S2M2=&NA_REAL, *r_F_efmi_S2M3=&NA_REAL, *r_F_efmi_S2M4=&NA_REAL,
//        *r_F_efmi_S3M1=&NA_REAL, *r_F_efmi_S3M2=&NA_REAL, *r_F_efmi_S3M3=&NA_REAL, *r_F_efmi_S3M4=&NA_REAL,
//        *r_F_efmi_S4M1=&NA_REAL, *r_F_efmi_S4M2=&NA_REAL, *r_F_efmi_S4M3=&NA_REAL, *r_F_efmi_S4M4=&NA_REAL,

        *r_iniF_efmi_S1M1=&NA_REAL, *r_iniF_efmi_S1M2=&NA_REAL, *r_iniF_efmi_S1M3=&NA_REAL, *r_iniF_efmi_S1M4=&NA_REAL,
        *r_iniF_efmi_S2M1=&NA_REAL, *r_iniF_efmi_S2M2=&NA_REAL, *r_iniF_efmi_S2M3=&NA_REAL, *r_iniF_efmi_S2M4=&NA_REAL,
        *r_iniF_efmi_S3M1=&NA_REAL, *r_iniF_efmi_S3M2=&NA_REAL, *r_iniF_efmi_S3M3=&NA_REAL, *r_iniF_efmi_S3M4=&NA_REAL,
        *r_iniF_efmi_S4M1=&NA_REAL, *r_iniF_efmi_S4M2=&NA_REAL, *r_iniF_efmi_S4M3=&NA_REAL, *r_iniF_efmi_S4M4=&NA_REAL,

        *r_Foth_i_S1M1=&NA_REAL, *r_Foth_i_S1M2=&NA_REAL, *r_Foth_i_S1M3=&NA_REAL, *r_Foth_i_S1M4=&NA_REAL,
        *r_Foth_i_S2M1=&NA_REAL, *r_Foth_i_S2M2=&NA_REAL, *r_Foth_i_S2M3=&NA_REAL, *r_Foth_i_S2M4=&NA_REAL,
        *r_Foth_i_S3M1=&NA_REAL, *r_Foth_i_S3M2=&NA_REAL, *r_Foth_i_S3M3=&NA_REAL, *r_Foth_i_S3M4=&NA_REAL,
        *r_Foth_i_S4M1=&NA_REAL, *r_Foth_i_S4M2=&NA_REAL, *r_Foth_i_S4M3=&NA_REAL, *r_Foth_i_S4M4=&NA_REAL,
        *r_Froth_i_S1M1=&NA_REAL, *r_Froth_i_S1M2=&NA_REAL, *r_Froth_i_S1M3=&NA_REAL, *r_Froth_i_S1M4=&NA_REAL,
        *r_Froth_i_S2M1=&NA_REAL, *r_Froth_i_S2M2=&NA_REAL, *r_Froth_i_S2M3=&NA_REAL, *r_Froth_i_S2M4=&NA_REAL,
        *r_Froth_i_S3M1=&NA_REAL, *r_Froth_i_S3M2=&NA_REAL, *r_Froth_i_S3M3=&NA_REAL, *r_Froth_i_S3M4=&NA_REAL,
        *r_Froth_i_S4M1=&NA_REAL, *r_Froth_i_S4M2=&NA_REAL, *r_Froth_i_S4M3=&NA_REAL, *r_Froth_i_S4M4=&NA_REAL,
        *rans_11_S1M1=&NA_REAL, *rans_11_S1M2=&NA_REAL, *rans_11_S1M3=&NA_REAL, *rans_11_S1M4=&NA_REAL,
        *rans_11_S2M1=&NA_REAL, *rans_11_S2M2=&NA_REAL, *rans_11_S2M3=&NA_REAL, *rans_11_S2M4=&NA_REAL,
        *rans_11_S3M1=&NA_REAL, *rans_11_S3M2=&NA_REAL, *rans_11_S3M3=&NA_REAL, *rans_11_S3M4=&NA_REAL,
        *rans_11_S4M1=&NA_REAL, *rans_11_S4M2=&NA_REAL, *rans_11_S4M3=&NA_REAL, *rans_11_S4M4=&NA_REAL,
        *rans_11l_S1M1=&NA_REAL, *rans_11l_S1M2=&NA_REAL, *rans_11l_S1M3=&NA_REAL, *rans_11l_S1M4=&NA_REAL,
        *rans_11l_S2M1=&NA_REAL, *rans_11l_S2M2=&NA_REAL, *rans_11l_S2M3=&NA_REAL, *rans_11l_S2M4=&NA_REAL,
        *rans_11l_S3M1=&NA_REAL, *rans_11l_S3M2=&NA_REAL, *rans_11l_S3M3=&NA_REAL, *rans_11l_S3M4=&NA_REAL,
        *rans_11l_S4M1=&NA_REAL, *rans_11l_S4M2=&NA_REAL, *rans_11l_S4M3=&NA_REAL, *rans_11l_S4M4=&NA_REAL,

//        *r_FRWT_efmi_S1M1=&NA_REAL, *r_FRWT_efmi_S1M2=&NA_REAL, *r_FRWT_efmi_S1M3=&NA_REAL, *r_FRWT_efmi_S1M4=&NA_REAL,
//        *r_FRWT_efmi_S2M1=&NA_REAL, *r_FRWT_efmi_S2M2=&NA_REAL, *r_FRWT_efmi_S2M3=&NA_REAL, *r_FRWT_efmi_S2M4=&NA_REAL,
//        *r_FRWT_efmi_S3M1=&NA_REAL, *r_FRWT_efmi_S3M2=&NA_REAL, *r_FRWT_efmi_S3M3=&NA_REAL, *r_FRWT_efmi_S3M4=&NA_REAL,
//        *r_FRWT_efmi_S4M1=&NA_REAL, *r_FRWT_efmi_S4M2=&NA_REAL, *r_FRWT_efmi_S4M3=&NA_REAL, *r_FRWT_efmi_S4M4=&NA_REAL,

        *r_iniFRWT_efmi_S1M1=&NA_REAL, *r_iniFRWT_efmi_S1M2=&NA_REAL, *r_iniFRWT_efmi_S1M3=&NA_REAL, *r_iniFRWT_efmi_S1M4=&NA_REAL,
        *r_iniFRWT_efmi_S2M1=&NA_REAL, *r_iniFRWT_efmi_S2M2=&NA_REAL, *r_iniFRWT_efmi_S2M3=&NA_REAL, *r_iniFRWT_efmi_S2M4=&NA_REAL,
        *r_iniFRWT_efmi_S3M1=&NA_REAL, *r_iniFRWT_efmi_S3M2=&NA_REAL, *r_iniFRWT_efmi_S3M3=&NA_REAL, *r_iniFRWT_efmi_S3M4=&NA_REAL,
        *r_iniFRWT_efmi_S4M1=&NA_REAL, *r_iniFRWT_efmi_S4M2=&NA_REAL, *r_iniFRWT_efmi_S4M3=&NA_REAL, *r_iniFRWT_efmi_S4M4=&NA_REAL,

        *r_FRWToth_i_S1M1=&NA_REAL, *r_FRWToth_i_S1M2=&NA_REAL, *r_FRWToth_i_S1M3=&NA_REAL, *r_FRWToth_i_S1M4=&NA_REAL,
        *r_FRWToth_i_S2M1=&NA_REAL, *r_FRWToth_i_S2M2=&NA_REAL, *r_FRWToth_i_S2M3=&NA_REAL, *r_FRWToth_i_S2M4=&NA_REAL,
        *r_FRWToth_i_S3M1=&NA_REAL, *r_FRWToth_i_S3M2=&NA_REAL, *r_FRWToth_i_S3M3=&NA_REAL, *r_FRWToth_i_S3M4=&NA_REAL,
        *r_FRWToth_i_S4M1=&NA_REAL, *r_FRWToth_i_S4M2=&NA_REAL, *r_FRWToth_i_S4M3=&NA_REAL, *r_FRWToth_i_S4M4=&NA_REAL,
        *rans_FRWT_S1M1=&NA_REAL, *rans_FRWT_S1M2=&NA_REAL, *rans_FRWT_S1M3=&NA_REAL, *rans_FRWT_S1M4=&NA_REAL,
        *rans_FRWT_S2M1=&NA_REAL, *rans_FRWT_S2M2=&NA_REAL, *rans_FRWT_S2M3=&NA_REAL, *rans_FRWT_S2M4=&NA_REAL,
        *rans_FRWT_S3M1=&NA_REAL, *rans_FRWT_S3M2=&NA_REAL, *rans_FRWT_S3M3=&NA_REAL, *rans_FRWT_S3M4=&NA_REAL,
        *rans_FRWT_S4M1=&NA_REAL, *rans_FRWT_S4M2=&NA_REAL, *rans_FRWT_S4M3=&NA_REAL, *rans_FRWT_S4M4=&NA_REAL,

//        *r_FDWT_efmi_S1M1=&NA_REAL, *r_FDWT_efmi_S1M2=&NA_REAL, *r_FDWT_efmi_S1M3=&NA_REAL, *r_FDWT_efmi_S1M4=&NA_REAL,
//        *r_FDWT_efmi_S2M1=&NA_REAL, *r_FDWT_efmi_S2M2=&NA_REAL, *r_FDWT_efmi_S2M3=&NA_REAL, *r_FDWT_efmi_S2M4=&NA_REAL,
//        *r_FDWT_efmi_S3M1=&NA_REAL, *r_FDWT_efmi_S3M2=&NA_REAL, *r_FDWT_efmi_S3M3=&NA_REAL, *r_FDWT_efmi_S3M4=&NA_REAL,
//        *r_FDWT_efmi_S4M1=&NA_REAL, *r_FDWT_efmi_S4M2=&NA_REAL, *r_FDWT_efmi_S4M3=&NA_REAL, *r_FDWT_efmi_S4M4=&NA_REAL,

        *r_iniFDWT_efmi_S1M1=&NA_REAL, *r_iniFDWT_efmi_S1M2=&NA_REAL, *r_iniFDWT_efmi_S1M3=&NA_REAL, *r_iniFDWT_efmi_S1M4=&NA_REAL,
        *r_iniFDWT_efmi_S2M1=&NA_REAL, *r_iniFDWT_efmi_S2M2=&NA_REAL, *r_iniFDWT_efmi_S2M3=&NA_REAL, *r_iniFDWT_efmi_S2M4=&NA_REAL,
        *r_iniFDWT_efmi_S3M1=&NA_REAL, *r_iniFDWT_efmi_S3M2=&NA_REAL, *r_iniFDWT_efmi_S3M3=&NA_REAL, *r_iniFDWT_efmi_S3M4=&NA_REAL,
        *r_iniFDWT_efmi_S4M1=&NA_REAL, *r_iniFDWT_efmi_S4M2=&NA_REAL, *r_iniFDWT_efmi_S4M3=&NA_REAL, *r_iniFDWT_efmi_S4M4=&NA_REAL,

        *r_FDWToth_i_S1M1=&NA_REAL, *r_FDWToth_i_S1M2=&NA_REAL, *r_FDWToth_i_S1M3=&NA_REAL, *r_FDWToth_i_S1M4=&NA_REAL,
        *r_FDWToth_i_S2M1=&NA_REAL, *r_FDWToth_i_S2M2=&NA_REAL, *r_FDWToth_i_S2M3=&NA_REAL, *r_FDWToth_i_S2M4=&NA_REAL,
        *r_FDWToth_i_S3M1=&NA_REAL, *r_FDWToth_i_S3M2=&NA_REAL, *r_FDWToth_i_S3M3=&NA_REAL, *r_FDWToth_i_S3M4=&NA_REAL,
        *r_FDWToth_i_S4M1=&NA_REAL, *r_FDWToth_i_S4M2=&NA_REAL, *r_FDWToth_i_S4M3=&NA_REAL, *r_FDWToth_i_S4M4=&NA_REAL,
        *rans_FDWT_S1M1=&NA_REAL, *rans_FDWT_S1M2=&NA_REAL, *rans_FDWT_S1M3=&NA_REAL, *rans_FDWT_S1M4=&NA_REAL,
        *rans_FDWT_S2M1=&NA_REAL, *rans_FDWT_S2M2=&NA_REAL, *rans_FDWT_S2M3=&NA_REAL, *rans_FDWT_S2M4=&NA_REAL,
        *rans_FDWT_S3M1=&NA_REAL, *rans_FDWT_S3M2=&NA_REAL, *rans_FDWT_S3M3=&NA_REAL, *rans_FDWT_S3M4=&NA_REAL,
        *rans_FDWT_S4M1=&NA_REAL, *rans_FDWT_S4M2=&NA_REAL, *rans_FDWT_S4M3=&NA_REAL, *rans_FDWT_S4M4=&NA_REAL,

        *r_nbds_f, *r_Foth_i, *r_Froth_i;

//préparation de l'output
if (ind_t==0) { //Rprintf("Mort1\n");

    PROTECT(rnames = allocVector(STRSXP, nbE));
    setAttrib(out_F_fmi, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi, R_NamesSymbol, rnames);

    setAttrib(out_F_fmi_S1M1, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S1M2, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S1M3, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S1M4, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S2M1, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S2M2, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S2M3, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S2M4, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S3M1, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S3M2, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S3M3, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S3M4, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S4M1, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S4M2, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S4M3, R_NamesSymbol, rnames);
    setAttrib(out_F_fmi_S4M4, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S1M1, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S1M2, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S1M3, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S1M4, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S2M1, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S2M2, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S2M3, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S2M4, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S3M1, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S3M2, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S3M3, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S3M4, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S4M1, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S4M2, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S4M3, R_NamesSymbol, rnames);
    setAttrib(out_Fr_fmi_S4M4, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S1M1, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S1M2, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S1M3, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S1M4, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S2M1, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S2M2, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S2M3, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S2M4, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S3M1, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S3M2, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S3M3, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S3M4, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S4M1, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S4M2, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S4M3, R_NamesSymbol, rnames);
    setAttrib(out_FRWT_fmi_S4M4, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S1M1, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S1M2, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S1M3, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S1M4, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S2M1, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S2M2, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S2M3, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S2M4, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S3M1, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S3M2, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S3M3, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S3M4, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S4M1, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S4M2, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S4M3, R_NamesSymbol, rnames);
    setAttrib(out_FDWT_fmi_S4M4, R_NamesSymbol, rnames);

}

for (int e = 0 ; e < nbE ; e++) {
//Rprintf("Mort2\n");
    //---------
    // calcul de Fr_efmit
    //---------

                        PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));
                        PROTECT(intAge = getListElement(namDC, CHAR(STRING_ELT(sppList,e))));

                        nbI = length(getListElement(elmt, "modI"));

                        PROTECT(v_Sr_e = getListElement(elmt, "sr"));
                        PROTECT(v_d_efi = getListElement(elmt, "d_i"));
                        PROTECT(v_doth_ei = getListElement(elmt, "doth_i"));

                        PROTECT(dimCst_Sr_e = getAttrib(v_Sr_e, install("DimCst")));
                        PROTECT(dimCst_d_efi = getAttrib(v_d_efi, install("DimCst")));
                        PROTECT(dimCst_doth_ei = getAttrib(v_doth_ei, install("DimCst")));

                    //---------------------------------------------------------------------
                    // 1ère étape : on ventile la mortalité par les captures si possible
                    //---------------------------------------------------------------------

                    if (Qvec[e]==1) {
//Rprintf("Mort3.1\n");
                     PROTECT(v_F_efmi_S1M1 = getListElement(elmt, "Ffmi_S1M1"));

                     //double *ttt = REAL(v_F_efmi_S1M1);

//for (int ind_i = 0 ; ind_i < 1 ; ind_i++)
//for (int ind_m = 0 ; ind_m < 1 ; ind_m++)
//for (int ind_f = 0 ; ind_f < 25 ; ind_f++) {
//
//Rprintf("ind_i %i ind_m %i ind_f %i v_F_efmi_S1M1 intro %f\n",ind_i,ind_m,ind_f,ttt[ind_f + ind_m*nbF + ind_i*nbF*nbMe]*10000000000);
//
//}
                     PROTECT(v_F_efmi_S1M2 = getListElement(elmt, "Ffmi_S1M2"));
                     PROTECT(v_F_efmi_S1M3 = getListElement(elmt, "Ffmi_S1M3"));
                     PROTECT(v_F_efmi_S1M4 = getListElement(elmt, "Ffmi_S1M4"));
                     PROTECT(v_F_efmi_S2M1 = getListElement(elmt, "Ffmi_S2M1"));
                     PROTECT(v_F_efmi_S2M2 = getListElement(elmt, "Ffmi_S2M2"));
                     PROTECT(v_F_efmi_S2M3 = getListElement(elmt, "Ffmi_S2M3"));
                     PROTECT(v_F_efmi_S2M4 = getListElement(elmt, "Ffmi_S2M4"));
                     PROTECT(v_F_efmi_S3M1 = getListElement(elmt, "Ffmi_S3M1"));
                     PROTECT(v_F_efmi_S3M2 = getListElement(elmt, "Ffmi_S3M2"));
                     PROTECT(v_F_efmi_S3M3 = getListElement(elmt, "Ffmi_S3M3"));
                     PROTECT(v_F_efmi_S3M4 = getListElement(elmt, "Ffmi_S3M4"));
                     PROTECT(v_F_efmi_S4M1 = getListElement(elmt, "Ffmi_S4M1"));
                     PROTECT(v_F_efmi_S4M2 = getListElement(elmt, "Ffmi_S4M2"));
                     PROTECT(v_F_efmi_S4M3 = getListElement(elmt, "Ffmi_S4M3"));
                     PROTECT(v_F_efmi_S4M4 = getListElement(elmt, "Ffmi_S4M4"));    //PROTECT + 15

                     PROTECT(v_FRWT_efmi_S1M1 = getListElement(elmt, "FLWfmi_S1M1"));
                     PROTECT(v_FRWT_efmi_S1M2 = getListElement(elmt, "FLWfmi_S1M2"));
                     PROTECT(v_FRWT_efmi_S1M3 = getListElement(elmt, "FLWfmi_S1M3"));
                     PROTECT(v_FRWT_efmi_S1M4 = getListElement(elmt, "FLWfmi_S1M4"));
                     PROTECT(v_FRWT_efmi_S2M1 = getListElement(elmt, "FLWfmi_S2M1"));
                     PROTECT(v_FRWT_efmi_S2M2 = getListElement(elmt, "FLWfmi_S2M2"));
                     PROTECT(v_FRWT_efmi_S2M3 = getListElement(elmt, "FLWfmi_S2M3"));
                     PROTECT(v_FRWT_efmi_S2M4 = getListElement(elmt, "FLWfmi_S2M4"));
                     PROTECT(v_FRWT_efmi_S3M1 = getListElement(elmt, "FLWfmi_S3M1"));
                     PROTECT(v_FRWT_efmi_S3M2 = getListElement(elmt, "FLWfmi_S3M2"));
                     PROTECT(v_FRWT_efmi_S3M3 = getListElement(elmt, "FLWfmi_S3M3"));
                     PROTECT(v_FRWT_efmi_S3M4 = getListElement(elmt, "FLWfmi_S3M4"));
                     PROTECT(v_FRWT_efmi_S4M1 = getListElement(elmt, "FLWfmi_S4M1"));
                     PROTECT(v_FRWT_efmi_S4M2 = getListElement(elmt, "FLWfmi_S4M2"));
                     PROTECT(v_FRWT_efmi_S4M3 = getListElement(elmt, "FLWfmi_S4M3"));
                     PROTECT(v_FRWT_efmi_S4M4 = getListElement(elmt, "FLWfmi_S4M4"));

                     PROTECT(v_FDWT_efmi_S1M1 = getListElement(elmt, "FDWfmi_S1M1"));
                     PROTECT(v_FDWT_efmi_S1M2 = getListElement(elmt, "FDWfmi_S1M2"));
                     PROTECT(v_FDWT_efmi_S1M3 = getListElement(elmt, "FDWfmi_S1M3"));
                     PROTECT(v_FDWT_efmi_S1M4 = getListElement(elmt, "FDWfmi_S1M4"));
                     PROTECT(v_FDWT_efmi_S2M1 = getListElement(elmt, "FDWfmi_S2M1"));
                     PROTECT(v_FDWT_efmi_S2M2 = getListElement(elmt, "FDWfmi_S2M2"));
                     PROTECT(v_FDWT_efmi_S2M3 = getListElement(elmt, "FDWfmi_S2M3"));
                     PROTECT(v_FDWT_efmi_S2M4 = getListElement(elmt, "FDWfmi_S2M4"));
                     PROTECT(v_FDWT_efmi_S3M1 = getListElement(elmt, "FDWfmi_S3M1"));
                     PROTECT(v_FDWT_efmi_S3M2 = getListElement(elmt, "FDWfmi_S3M2"));
                     PROTECT(v_FDWT_efmi_S3M3 = getListElement(elmt, "FDWfmi_S3M3"));
                     PROTECT(v_FDWT_efmi_S3M4 = getListElement(elmt, "FDWfmi_S3M4"));
                     PROTECT(v_FDWT_efmi_S4M1 = getListElement(elmt, "FDWfmi_S4M1"));
                     PROTECT(v_FDWT_efmi_S4M2 = getListElement(elmt, "FDWfmi_S4M2"));
                     PROTECT(v_FDWT_efmi_S4M3 = getListElement(elmt, "FDWfmi_S4M3"));
                     PROTECT(v_FDWT_efmi_S4M4 = getListElement(elmt, "FDWfmi_S4M4"));

                     PROTECT(v_iniF_efmi_S1M1 = getListElement(elmt, "iniFfmi_S1M1"));
                     PROTECT(v_iniF_efmi_S1M2 = getListElement(elmt, "iniFfmi_S1M2"));
                     PROTECT(v_iniF_efmi_S1M3 = getListElement(elmt, "iniFfmi_S1M3"));
                     PROTECT(v_iniF_efmi_S1M4 = getListElement(elmt, "iniFfmi_S1M4"));
                     PROTECT(v_iniF_efmi_S2M1 = getListElement(elmt, "iniFfmi_S2M1"));
                     PROTECT(v_iniF_efmi_S2M2 = getListElement(elmt, "iniFfmi_S2M2"));
                     PROTECT(v_iniF_efmi_S2M3 = getListElement(elmt, "iniFfmi_S2M3"));
                     PROTECT(v_iniF_efmi_S2M4 = getListElement(elmt, "iniFfmi_S2M4"));
                     PROTECT(v_iniF_efmi_S3M1 = getListElement(elmt, "iniFfmi_S3M1"));
                     PROTECT(v_iniF_efmi_S3M2 = getListElement(elmt, "iniFfmi_S3M2"));
                     PROTECT(v_iniF_efmi_S3M3 = getListElement(elmt, "iniFfmi_S3M3"));
                     PROTECT(v_iniF_efmi_S3M4 = getListElement(elmt, "iniFfmi_S3M4"));
                     PROTECT(v_iniF_efmi_S4M1 = getListElement(elmt, "iniFfmi_S4M1"));
                     PROTECT(v_iniF_efmi_S4M2 = getListElement(elmt, "iniFfmi_S4M2"));
                     PROTECT(v_iniF_efmi_S4M3 = getListElement(elmt, "iniFfmi_S4M3"));
                     PROTECT(v_iniF_efmi_S4M4 = getListElement(elmt, "iniFfmi_S4M4"));    //PROTECT + 15

                     PROTECT(v_iniFRWT_efmi_S1M1 = getListElement(elmt, "iniFLWfmi_S1M1"));
                     PROTECT(v_iniFRWT_efmi_S1M2 = getListElement(elmt, "iniFLWfmi_S1M2"));
                     PROTECT(v_iniFRWT_efmi_S1M3 = getListElement(elmt, "iniFLWfmi_S1M3"));
                     PROTECT(v_iniFRWT_efmi_S1M4 = getListElement(elmt, "iniFLWfmi_S1M4"));
                     PROTECT(v_iniFRWT_efmi_S2M1 = getListElement(elmt, "iniFLWfmi_S2M1"));
                     PROTECT(v_iniFRWT_efmi_S2M2 = getListElement(elmt, "iniFLWfmi_S2M2"));
                     PROTECT(v_iniFRWT_efmi_S2M3 = getListElement(elmt, "iniFLWfmi_S2M3"));
                     PROTECT(v_iniFRWT_efmi_S2M4 = getListElement(elmt, "iniFLWfmi_S2M4"));
                     PROTECT(v_iniFRWT_efmi_S3M1 = getListElement(elmt, "iniFLWfmi_S3M1"));
                     PROTECT(v_iniFRWT_efmi_S3M2 = getListElement(elmt, "iniFLWfmi_S3M2"));
                     PROTECT(v_iniFRWT_efmi_S3M3 = getListElement(elmt, "iniFLWfmi_S3M3"));
                     PROTECT(v_iniFRWT_efmi_S3M4 = getListElement(elmt, "iniFLWfmi_S3M4"));
                     PROTECT(v_iniFRWT_efmi_S4M1 = getListElement(elmt, "iniFLWfmi_S4M1"));
                     PROTECT(v_iniFRWT_efmi_S4M2 = getListElement(elmt, "iniFLWfmi_S4M2"));
                     PROTECT(v_iniFRWT_efmi_S4M3 = getListElement(elmt, "iniFLWfmi_S4M3"));
                     PROTECT(v_iniFRWT_efmi_S4M4 = getListElement(elmt, "iniFLWfmi_S4M4"));

                     PROTECT(v_iniFDWT_efmi_S1M1 = getListElement(elmt, "iniFDWfmi_S1M1"));
                     PROTECT(v_iniFDWT_efmi_S1M2 = getListElement(elmt, "iniFDWfmi_S1M2"));
                     PROTECT(v_iniFDWT_efmi_S1M3 = getListElement(elmt, "iniFDWfmi_S1M3"));
                     PROTECT(v_iniFDWT_efmi_S1M4 = getListElement(elmt, "iniFDWfmi_S1M4"));
                     PROTECT(v_iniFDWT_efmi_S2M1 = getListElement(elmt, "iniFDWfmi_S2M1"));
                     PROTECT(v_iniFDWT_efmi_S2M2 = getListElement(elmt, "iniFDWfmi_S2M2"));
                     PROTECT(v_iniFDWT_efmi_S2M3 = getListElement(elmt, "iniFDWfmi_S2M3"));
                     PROTECT(v_iniFDWT_efmi_S2M4 = getListElement(elmt, "iniFDWfmi_S2M4"));
                     PROTECT(v_iniFDWT_efmi_S3M1 = getListElement(elmt, "iniFDWfmi_S3M1"));
                     PROTECT(v_iniFDWT_efmi_S3M2 = getListElement(elmt, "iniFDWfmi_S3M2"));
                     PROTECT(v_iniFDWT_efmi_S3M3 = getListElement(elmt, "iniFDWfmi_S3M3"));
                     PROTECT(v_iniFDWT_efmi_S3M4 = getListElement(elmt, "iniFDWfmi_S3M4"));
                     PROTECT(v_iniFDWT_efmi_S4M1 = getListElement(elmt, "iniFDWfmi_S4M1"));
                     PROTECT(v_iniFDWT_efmi_S4M2 = getListElement(elmt, "iniFDWfmi_S4M2"));
                     PROTECT(v_iniFDWT_efmi_S4M3 = getListElement(elmt, "iniFDWfmi_S4M3"));
                     PROTECT(v_iniFDWT_efmi_S4M4 = getListElement(elmt, "iniFDWfmi_S4M4"));   //### +48

                     PROTECT(dim_Finput = getAttrib(v_F_efmi_S1M1, install("DimCst")));

                    } else {
//Rprintf("Mort3.2\n");
                     PROTECT(v_F_efmi = getListElement(elmt, "F_fmi"));
                     PROTECT(dim_Finput = getAttrib(v_F_efmi, install("DimCst")));

                    }

                    dimF = INTEGER(dim_Finput);


                    PROTECT(v_nbNav_f = getListElement(Flist, "nbv_f_m"));
                    PROTECT(dim_nbNavCst = getAttrib(v_nbNav_f, install("DimCst")));
                    dimNav = INTEGER(dim_nbNavCst);
                    //r_nbNav_f = REAL(v_nbNav_f);

                    PROTECT(v_nbds_f = getListElement(Flist, "effort1_f_m"));
                    PROTECT(dim_nbdsCst = getAttrib(v_nbds_f, install("DimCst")));
                    dimNbds = INTEGER(dim_nbdsCst);
                    r_nbds_f = REAL(v_nbds_f);
                    //r_nbds2_f = REAL(getListElement(Flist, "effort2_f_m"));

                    if (e==0) {

                        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            Etemp[ind_f+1] = r_nbds_f[ind_f];

                    }

////Rprintf("Mort4\n");
//Rprintf("Qvec[e] %i\n",Qvec[e]);

                    //on calcule la mortalité via la capturabilité
                    if (Qvec[e]==1) {

                    PROTECT(v_F_efmi2_S1M1 = calcCapturabilite(v_F_efmi_S1M1 , effort));



//fichier2 << "STAAA1S1M1" << endl;
//
//for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
////Rprintf("ind_i %i ind_m %i v_F_efmi_S1M1 %f\n",ind_i,ind_m,REAL(v_F_efmi_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe]*10000000);
////Rprintf("ind_i %i ind_m %i effort %f\n",ind_i,ind_m,REAL(effort)[ind_f + ind_m*nbF]);
////Rprintf("ind_i %i ind_m %i v_F_efmi2_S1M1 %f\n",ind_i,ind_m,REAL(v_F_efmi2_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe]*10000000);
//
//std::stringstream ff4S1M1;
//ff4S1M1 << REAL(v_F_efmi_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe];
//fichier2 << ff4S1M1.str() << endl;
//
//}
//
//fichier2 << "STAAA2S1M1" << endl;
//
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
//std::stringstream ff6S1M1;
//ff6S1M1 << REAL(effort)[ind_f + ind_m*nbF];
//fichier2 << ff6S1M1.str() << endl;
//
//}
//
//
//fichier2 << "STAAA3S1M1" << endl;
//
//for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
//std::stringstream ff5S1M1;
//ff5S1M1 << REAL(v_F_efmi2_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe];
//fichier2 << ff5S1M1.str() << endl;
//
//}
//





                     PROTECT(v_F_efmi2_S1M2 = calcCapturabilite(v_F_efmi_S1M2 , effort));
                     PROTECT(v_F_efmi2_S1M3 = calcCapturabilite(v_F_efmi_S1M3 , effort));
                     PROTECT(v_F_efmi2_S1M4 = calcCapturabilite(v_F_efmi_S1M4 , effort));
                     PROTECT(v_F_efmi2_S2M1 = calcCapturabilite(v_F_efmi_S2M1 , effort));
                     PROTECT(v_F_efmi2_S2M2 = calcCapturabilite(v_F_efmi_S2M2 , effort));
                     PROTECT(v_F_efmi2_S2M3 = calcCapturabilite(v_F_efmi_S2M3 , effort));
                     PROTECT(v_F_efmi2_S2M4 = calcCapturabilite(v_F_efmi_S2M4 , effort));
                     PROTECT(v_F_efmi2_S3M1 = calcCapturabilite(v_F_efmi_S3M1 , effort));
                     PROTECT(v_F_efmi2_S3M2 = calcCapturabilite(v_F_efmi_S3M2 , effort));
                     PROTECT(v_F_efmi2_S3M3 = calcCapturabilite(v_F_efmi_S3M3 , effort));
                     PROTECT(v_F_efmi2_S3M4 = calcCapturabilite(v_F_efmi_S3M4 , effort));
                     PROTECT(v_F_efmi2_S4M1 = calcCapturabilite(v_F_efmi_S4M1 , effort));
                     PROTECT(v_F_efmi2_S4M2 = calcCapturabilite(v_F_efmi_S4M2 , effort));
                     PROTECT(v_F_efmi2_S4M3 = calcCapturabilite(v_F_efmi_S4M3 , effort));
                     PROTECT(v_F_efmi2_S4M4 = calcCapturabilite(v_F_efmi_S4M4 , effort));    //PROTECT + 15



                     PROTECT(v_FRWT_efmi2_S1M1 = calcCapturabilite(v_FRWT_efmi_S1M1 , effort));




//fichier2 << "STBBB1S1M1" << endl;
//
//for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
////Rprintf("ind_i %i ind_m %i v_F_efmi_S1M1 %f\n",ind_i,ind_m,REAL(v_F_efmi_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe]*10000000);
////Rprintf("ind_i %i ind_m %i effort %f\n",ind_i,ind_m,REAL(effort)[ind_f + ind_m*nbF]);
////Rprintf("ind_i %i ind_m %i v_F_efmi2_S1M1 %f\n",ind_i,ind_m,REAL(v_F_efmi2_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe]*10000000);
//
//std::stringstream tt4S1M1;
//tt4S1M1 << REAL(v_FRWT_efmi_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe];
//fichier2 << tt4S1M1.str() << endl;
//
//}
//
//fichier2 << "STBBB2S1M1" << endl;
//
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
//std::stringstream tt6S1M1;
//tt6S1M1 << REAL(effort)[ind_f + ind_m*nbF];
//fichier2 << tt6S1M1.str() << endl;
//
//}
//
//fichier2 << "STBBB3S1M1" << endl;
//
//for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
//for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//for (int ind_f = 0 ; ind_f < 1 ; ind_f++) {
//
//std::stringstream tt5S1M1;
//tt5S1M1 << REAL(v_FRWT_efmi2_S1M1)[ind_f + ind_m*nbF + ind_i*nbF*nbMe];
//fichier2 << tt5S1M1.str() << endl;
//
//}




                     PROTECT(v_FRWT_efmi2_S1M2 = calcCapturabilite(v_FRWT_efmi_S1M2 , effort));
                     PROTECT(v_FRWT_efmi2_S1M3 = calcCapturabilite(v_FRWT_efmi_S1M3 , effort));
                     PROTECT(v_FRWT_efmi2_S1M4 = calcCapturabilite(v_FRWT_efmi_S1M4 , effort));
                     PROTECT(v_FRWT_efmi2_S2M1 = calcCapturabilite(v_FRWT_efmi_S2M1 , effort));
                     PROTECT(v_FRWT_efmi2_S2M2 = calcCapturabilite(v_FRWT_efmi_S2M2 , effort));
                     PROTECT(v_FRWT_efmi2_S2M3 = calcCapturabilite(v_FRWT_efmi_S2M3 , effort));
                     PROTECT(v_FRWT_efmi2_S2M4 = calcCapturabilite(v_FRWT_efmi_S2M4 , effort));
                     PROTECT(v_FRWT_efmi2_S3M1 = calcCapturabilite(v_FRWT_efmi_S3M1 , effort));
                     PROTECT(v_FRWT_efmi2_S3M2 = calcCapturabilite(v_FRWT_efmi_S3M2 , effort));
                     PROTECT(v_FRWT_efmi2_S3M3 = calcCapturabilite(v_FRWT_efmi_S3M3 , effort));
                     PROTECT(v_FRWT_efmi2_S3M4 = calcCapturabilite(v_FRWT_efmi_S3M4 , effort));
                     PROTECT(v_FRWT_efmi2_S4M1 = calcCapturabilite(v_FRWT_efmi_S4M1 , effort));
                     PROTECT(v_FRWT_efmi2_S4M2 = calcCapturabilite(v_FRWT_efmi_S4M2 , effort));
                     PROTECT(v_FRWT_efmi2_S4M3 = calcCapturabilite(v_FRWT_efmi_S4M3 , effort));
                     PROTECT(v_FRWT_efmi2_S4M4 = calcCapturabilite(v_FRWT_efmi_S4M4 , effort));

                     PROTECT(v_FDWT_efmi2_S1M1 = calcCapturabilite(v_FDWT_efmi_S1M1 , effort));
                     PROTECT(v_FDWT_efmi2_S1M2 = calcCapturabilite(v_FDWT_efmi_S1M2 , effort));
                     PROTECT(v_FDWT_efmi2_S1M3 = calcCapturabilite(v_FDWT_efmi_S1M3 , effort));
                     PROTECT(v_FDWT_efmi2_S1M4 = calcCapturabilite(v_FDWT_efmi_S1M4 , effort));
                     PROTECT(v_FDWT_efmi2_S2M1 = calcCapturabilite(v_FDWT_efmi_S2M1 , effort));
                     PROTECT(v_FDWT_efmi2_S2M2 = calcCapturabilite(v_FDWT_efmi_S2M2 , effort));
                     PROTECT(v_FDWT_efmi2_S2M3 = calcCapturabilite(v_FDWT_efmi_S2M3 , effort));
                     PROTECT(v_FDWT_efmi2_S2M4 = calcCapturabilite(v_FDWT_efmi_S2M4 , effort));
                     PROTECT(v_FDWT_efmi2_S3M1 = calcCapturabilite(v_FDWT_efmi_S3M1 , effort));
                     PROTECT(v_FDWT_efmi2_S3M2 = calcCapturabilite(v_FDWT_efmi_S3M2 , effort));
                     PROTECT(v_FDWT_efmi2_S3M3 = calcCapturabilite(v_FDWT_efmi_S3M3 , effort));
                     PROTECT(v_FDWT_efmi2_S3M4 = calcCapturabilite(v_FDWT_efmi_S3M4 , effort));
                     PROTECT(v_FDWT_efmi2_S4M1 = calcCapturabilite(v_FDWT_efmi_S4M1 , effort));
                     PROTECT(v_FDWT_efmi2_S4M2 = calcCapturabilite(v_FDWT_efmi_S4M2 , effort));
                     PROTECT(v_FDWT_efmi2_S4M3 = calcCapturabilite(v_FDWT_efmi_S4M3 , effort));
                     PROTECT(v_FDWT_efmi2_S4M4 = calcCapturabilite(v_FDWT_efmi_S4M4 , effort));

                     PROTECT(v_iniF_efmi2_S1M1 = calcCapturabilite(v_iniF_efmi_S1M1 , effort));
                     PROTECT(v_iniF_efmi2_S1M2 = calcCapturabilite(v_iniF_efmi_S1M2 , effort));
                     PROTECT(v_iniF_efmi2_S1M3 = calcCapturabilite(v_iniF_efmi_S1M3 , effort));
                     PROTECT(v_iniF_efmi2_S1M4 = calcCapturabilite(v_iniF_efmi_S1M4 , effort));
                     PROTECT(v_iniF_efmi2_S2M1 = calcCapturabilite(v_iniF_efmi_S2M1 , effort));
                     PROTECT(v_iniF_efmi2_S2M2 = calcCapturabilite(v_iniF_efmi_S2M2 , effort));
                     PROTECT(v_iniF_efmi2_S2M3 = calcCapturabilite(v_iniF_efmi_S2M3 , effort));
                     PROTECT(v_iniF_efmi2_S2M4 = calcCapturabilite(v_iniF_efmi_S2M4 , effort));
                     PROTECT(v_iniF_efmi2_S3M1 = calcCapturabilite(v_iniF_efmi_S3M1 , effort));
                     PROTECT(v_iniF_efmi2_S3M2 = calcCapturabilite(v_iniF_efmi_S3M2 , effort));
                     PROTECT(v_iniF_efmi2_S3M3 = calcCapturabilite(v_iniF_efmi_S3M3 , effort));
                     PROTECT(v_iniF_efmi2_S3M4 = calcCapturabilite(v_iniF_efmi_S3M4 , effort));
                     PROTECT(v_iniF_efmi2_S4M1 = calcCapturabilite(v_iniF_efmi_S4M1 , effort));
                     PROTECT(v_iniF_efmi2_S4M2 = calcCapturabilite(v_iniF_efmi_S4M2 , effort));
                     PROTECT(v_iniF_efmi2_S4M3 = calcCapturabilite(v_iniF_efmi_S4M3 , effort));
                     PROTECT(v_iniF_efmi2_S4M4 = calcCapturabilite(v_iniF_efmi_S4M4 , effort));

                     PROTECT(v_iniFRWT_efmi2_S1M1 = calcCapturabilite(v_iniFRWT_efmi_S1M1 , effort));
                     PROTECT(v_iniFRWT_efmi2_S1M2 = calcCapturabilite(v_iniFRWT_efmi_S1M2 , effort));
                     PROTECT(v_iniFRWT_efmi2_S1M3 = calcCapturabilite(v_iniFRWT_efmi_S1M3 , effort));
                     PROTECT(v_iniFRWT_efmi2_S1M4 = calcCapturabilite(v_iniFRWT_efmi_S1M4 , effort));
                     PROTECT(v_iniFRWT_efmi2_S2M1 = calcCapturabilite(v_iniFRWT_efmi_S2M1 , effort));
                     PROTECT(v_iniFRWT_efmi2_S2M2 = calcCapturabilite(v_iniFRWT_efmi_S2M2 , effort));
                     PROTECT(v_iniFRWT_efmi2_S2M3 = calcCapturabilite(v_iniFRWT_efmi_S2M3 , effort));
                     PROTECT(v_iniFRWT_efmi2_S2M4 = calcCapturabilite(v_iniFRWT_efmi_S2M4 , effort));
                     PROTECT(v_iniFRWT_efmi2_S3M1 = calcCapturabilite(v_iniFRWT_efmi_S3M1 , effort));
                     PROTECT(v_iniFRWT_efmi2_S3M2 = calcCapturabilite(v_iniFRWT_efmi_S3M2 , effort));
                     PROTECT(v_iniFRWT_efmi2_S3M3 = calcCapturabilite(v_iniFRWT_efmi_S3M3 , effort));
                     PROTECT(v_iniFRWT_efmi2_S3M4 = calcCapturabilite(v_iniFRWT_efmi_S3M4 , effort));
                     PROTECT(v_iniFRWT_efmi2_S4M1 = calcCapturabilite(v_iniFRWT_efmi_S4M1 , effort));
                     PROTECT(v_iniFRWT_efmi2_S4M2 = calcCapturabilite(v_iniFRWT_efmi_S4M2 , effort));
                     PROTECT(v_iniFRWT_efmi2_S4M3 = calcCapturabilite(v_iniFRWT_efmi_S4M3 , effort));
                     PROTECT(v_iniFRWT_efmi2_S4M4 = calcCapturabilite(v_iniFRWT_efmi_S4M4 , effort));

                     PROTECT(v_iniFDWT_efmi2_S1M1 = calcCapturabilite(v_iniFDWT_efmi_S1M1 , effort));
                     PROTECT(v_iniFDWT_efmi2_S1M2 = calcCapturabilite(v_iniFDWT_efmi_S1M2 , effort));
                     PROTECT(v_iniFDWT_efmi2_S1M3 = calcCapturabilite(v_iniFDWT_efmi_S1M3 , effort));
                     PROTECT(v_iniFDWT_efmi2_S1M4 = calcCapturabilite(v_iniFDWT_efmi_S1M4 , effort));
                     PROTECT(v_iniFDWT_efmi2_S2M1 = calcCapturabilite(v_iniFDWT_efmi_S2M1 , effort));
                     PROTECT(v_iniFDWT_efmi2_S2M2 = calcCapturabilite(v_iniFDWT_efmi_S2M2 , effort));
                     PROTECT(v_iniFDWT_efmi2_S2M3 = calcCapturabilite(v_iniFDWT_efmi_S2M3 , effort));
                     PROTECT(v_iniFDWT_efmi2_S2M4 = calcCapturabilite(v_iniFDWT_efmi_S2M4 , effort));
                     PROTECT(v_iniFDWT_efmi2_S3M1 = calcCapturabilite(v_iniFDWT_efmi_S3M1 , effort));
                     PROTECT(v_iniFDWT_efmi2_S3M2 = calcCapturabilite(v_iniFDWT_efmi_S3M2 , effort));
                     PROTECT(v_iniFDWT_efmi2_S3M3 = calcCapturabilite(v_iniFDWT_efmi_S3M3 , effort));
                     PROTECT(v_iniFDWT_efmi2_S3M4 = calcCapturabilite(v_iniFDWT_efmi_S3M4 , effort));
                     PROTECT(v_iniFDWT_efmi2_S4M1 = calcCapturabilite(v_iniFDWT_efmi_S4M1 , effort));
                     PROTECT(v_iniFDWT_efmi2_S4M2 = calcCapturabilite(v_iniFDWT_efmi_S4M2 , effort));
                     PROTECT(v_iniFDWT_efmi2_S4M3 = calcCapturabilite(v_iniFDWT_efmi_S4M3 , effort));
                     PROTECT(v_iniFDWT_efmi2_S4M4 = calcCapturabilite(v_iniFDWT_efmi_S4M4 , effort));    //### +48

                    } else {

                     PROTECT(v_F_efmi2 = calcCapturabilite(v_F_efmi , effort)); //PrintValue(v_F_efmi2);

                    }

                    ////PrintValue(v_F_efmi2);
                            //et dans ce cas, l'effort à appliquer à la capturabilité est...

                        dimE = INTEGER(dimEff);

                        if (Qvec[e]==1) {
                            dimM = INTEGER(getAttrib(v_F_efmi2_S1M1, install("DimCst")));
                        } else {
                            dimM = INTEGER(getAttrib(v_F_efmi2, install("DimCst")));
                        }

                        PROTECT(dimCstEff = allocVector(INTSXP,4));
                        dimEffort = INTEGER(dimCstEff);
                        for (int i = 0 ; i < 3 ; i++) dimEffort[i] = imin2( dimM[i] , dimE[i] );

                        //on conserve tout de même la dimension temporelle
                        dimEffort[3] = dimE[3];


                            PROTECT(formatEff = aggregObj(effort, dimCstEff));////PrintValue(formatEff);
                            rEff = REAL(formatEff);
////Rprintf("Mort5\n");
                        if (Qvec[e]==1) {

//                         r_F_efmi_S1M1 = REAL(v_F_efmi2_S1M1);
//                         r_F_efmi_S1M2 = REAL(v_F_efmi2_S1M2);
//                         r_F_efmi_S1M3 = REAL(v_F_efmi2_S1M3);
//                         r_F_efmi_S1M4 = REAL(v_F_efmi2_S1M4);
//                         r_F_efmi_S2M1 = REAL(v_F_efmi2_S2M1);
//                         r_F_efmi_S2M2 = REAL(v_F_efmi2_S2M2);
//                         r_F_efmi_S2M3 = REAL(v_F_efmi2_S2M3);
//                         r_F_efmi_S2M4 = REAL(v_F_efmi2_S2M4);
//                         r_F_efmi_S3M1 = REAL(v_F_efmi2_S3M1);
//                         r_F_efmi_S3M2 = REAL(v_F_efmi2_S3M2);
//                         r_F_efmi_S3M3 = REAL(v_F_efmi2_S3M3);
//                         r_F_efmi_S3M4 = REAL(v_F_efmi2_S3M4);
//                         r_F_efmi_S4M1 = REAL(v_F_efmi2_S4M1);
//                         r_F_efmi_S4M2 = REAL(v_F_efmi2_S4M2);
//                         r_F_efmi_S4M3 = REAL(v_F_efmi2_S4M3);
//                         r_F_efmi_S4M4 = REAL(v_F_efmi2_S4M4);

//                         r_FRWT_efmi_S1M1 = REAL(v_FRWT_efmi2_S1M1);
//                         r_FRWT_efmi_S1M2 = REAL(v_FRWT_efmi2_S1M2);
//                         r_FRWT_efmi_S1M3 = REAL(v_FRWT_efmi2_S1M3);
//                         r_FRWT_efmi_S1M4 = REAL(v_FRWT_efmi2_S1M4);
//                         r_FRWT_efmi_S2M1 = REAL(v_FRWT_efmi2_S2M1);
//                         r_FRWT_efmi_S2M2 = REAL(v_FRWT_efmi2_S2M2);
//                         r_FRWT_efmi_S2M3 = REAL(v_FRWT_efmi2_S2M3);
//                         r_FRWT_efmi_S2M4 = REAL(v_FRWT_efmi2_S2M4);
//                         r_FRWT_efmi_S3M1 = REAL(v_FRWT_efmi2_S3M1);
//                         r_FRWT_efmi_S3M2 = REAL(v_FRWT_efmi2_S3M2);
//                         r_FRWT_efmi_S3M3 = REAL(v_FRWT_efmi2_S3M3);
//                         r_FRWT_efmi_S3M4 = REAL(v_FRWT_efmi2_S3M4);
//                         r_FRWT_efmi_S4M1 = REAL(v_FRWT_efmi2_S4M1);
//                         r_FRWT_efmi_S4M2 = REAL(v_FRWT_efmi2_S4M2);
//                         r_FRWT_efmi_S4M3 = REAL(v_FRWT_efmi2_S4M3);
//                         r_FRWT_efmi_S4M4 = REAL(v_FRWT_efmi2_S4M4);
//
//                         r_FDWT_efmi_S1M1 = REAL(v_FDWT_efmi2_S1M1);
//                         r_FDWT_efmi_S1M2 = REAL(v_FDWT_efmi2_S1M2);
//                         r_FDWT_efmi_S1M3 = REAL(v_FDWT_efmi2_S1M3);
//                         r_FDWT_efmi_S1M4 = REAL(v_FDWT_efmi2_S1M4);
//                         r_FDWT_efmi_S2M1 = REAL(v_FDWT_efmi2_S2M1);
//                         r_FDWT_efmi_S2M2 = REAL(v_FDWT_efmi2_S2M2);
//                         r_FDWT_efmi_S2M3 = REAL(v_FDWT_efmi2_S2M3);
//                         r_FDWT_efmi_S2M4 = REAL(v_FDWT_efmi2_S2M4);
//                         r_FDWT_efmi_S3M1 = REAL(v_FDWT_efmi2_S3M1);
//                         r_FDWT_efmi_S3M2 = REAL(v_FDWT_efmi2_S3M2);
//                         r_FDWT_efmi_S3M3 = REAL(v_FDWT_efmi2_S3M3);
//                         r_FDWT_efmi_S3M4 = REAL(v_FDWT_efmi2_S3M4);
//                         r_FDWT_efmi_S4M1 = REAL(v_FDWT_efmi2_S4M1);
//                         r_FDWT_efmi_S4M2 = REAL(v_FDWT_efmi2_S4M2);
//                         r_FDWT_efmi_S4M3 = REAL(v_FDWT_efmi2_S4M3);
//                         r_FDWT_efmi_S4M4 = REAL(v_FDWT_efmi2_S4M4);

                         r_iniF_efmi_S1M1 = REAL(v_iniF_efmi2_S1M1);
                         r_iniF_efmi_S1M2 = REAL(v_iniF_efmi2_S1M2);
                         r_iniF_efmi_S1M3 = REAL(v_iniF_efmi2_S1M3);
                         r_iniF_efmi_S1M4 = REAL(v_iniF_efmi2_S1M4);
                         r_iniF_efmi_S2M1 = REAL(v_iniF_efmi2_S2M1);
                         r_iniF_efmi_S2M2 = REAL(v_iniF_efmi2_S2M2);
                         r_iniF_efmi_S2M3 = REAL(v_iniF_efmi2_S2M3);
                         r_iniF_efmi_S2M4 = REAL(v_iniF_efmi2_S2M4);
                         r_iniF_efmi_S3M1 = REAL(v_iniF_efmi2_S3M1);
                         r_iniF_efmi_S3M2 = REAL(v_iniF_efmi2_S3M2);
                         r_iniF_efmi_S3M3 = REAL(v_iniF_efmi2_S3M3);
                         r_iniF_efmi_S3M4 = REAL(v_iniF_efmi2_S3M4);
                         r_iniF_efmi_S4M1 = REAL(v_iniF_efmi2_S4M1);
                         r_iniF_efmi_S4M2 = REAL(v_iniF_efmi2_S4M2);
                         r_iniF_efmi_S4M3 = REAL(v_iniF_efmi2_S4M3);
                         r_iniF_efmi_S4M4 = REAL(v_iniF_efmi2_S4M4);

                         r_iniFRWT_efmi_S1M1 = REAL(v_iniFRWT_efmi2_S1M1);
                         r_iniFRWT_efmi_S1M2 = REAL(v_iniFRWT_efmi2_S1M2);
                         r_iniFRWT_efmi_S1M3 = REAL(v_iniFRWT_efmi2_S1M3);
                         r_iniFRWT_efmi_S1M4 = REAL(v_iniFRWT_efmi2_S1M4);
                         r_iniFRWT_efmi_S2M1 = REAL(v_iniFRWT_efmi2_S2M1);
                         r_iniFRWT_efmi_S2M2 = REAL(v_iniFRWT_efmi2_S2M2);
                         r_iniFRWT_efmi_S2M3 = REAL(v_iniFRWT_efmi2_S2M3);
                         r_iniFRWT_efmi_S2M4 = REAL(v_iniFRWT_efmi2_S2M4);
                         r_iniFRWT_efmi_S3M1 = REAL(v_iniFRWT_efmi2_S3M1);
                         r_iniFRWT_efmi_S3M2 = REAL(v_iniFRWT_efmi2_S3M2);
                         r_iniFRWT_efmi_S3M3 = REAL(v_iniFRWT_efmi2_S3M3);
                         r_iniFRWT_efmi_S3M4 = REAL(v_iniFRWT_efmi2_S3M4);
                         r_iniFRWT_efmi_S4M1 = REAL(v_iniFRWT_efmi2_S4M1);
                         r_iniFRWT_efmi_S4M2 = REAL(v_iniFRWT_efmi2_S4M2);
                         r_iniFRWT_efmi_S4M3 = REAL(v_iniFRWT_efmi2_S4M3);
                         r_iniFRWT_efmi_S4M4 = REAL(v_iniFRWT_efmi2_S4M4);

                         r_iniFDWT_efmi_S1M1 = REAL(v_iniFDWT_efmi2_S1M1);
                         r_iniFDWT_efmi_S1M2 = REAL(v_iniFDWT_efmi2_S1M2);
                         r_iniFDWT_efmi_S1M3 = REAL(v_iniFDWT_efmi2_S1M3);
                         r_iniFDWT_efmi_S1M4 = REAL(v_iniFDWT_efmi2_S1M4);
                         r_iniFDWT_efmi_S2M1 = REAL(v_iniFDWT_efmi2_S2M1);
                         r_iniFDWT_efmi_S2M2 = REAL(v_iniFDWT_efmi2_S2M2);
                         r_iniFDWT_efmi_S2M3 = REAL(v_iniFDWT_efmi2_S2M3);
                         r_iniFDWT_efmi_S2M4 = REAL(v_iniFDWT_efmi2_S2M4);
                         r_iniFDWT_efmi_S3M1 = REAL(v_iniFDWT_efmi2_S3M1);
                         r_iniFDWT_efmi_S3M2 = REAL(v_iniFDWT_efmi2_S3M2);
                         r_iniFDWT_efmi_S3M3 = REAL(v_iniFDWT_efmi2_S3M3);
                         r_iniFDWT_efmi_S3M4 = REAL(v_iniFDWT_efmi2_S3M4);
                         r_iniFDWT_efmi_S4M1 = REAL(v_iniFDWT_efmi2_S4M1);
                         r_iniFDWT_efmi_S4M2 = REAL(v_iniFDWT_efmi2_S4M2);
                         r_iniFDWT_efmi_S4M3 = REAL(v_iniFDWT_efmi2_S4M3);
                         r_iniFDWT_efmi_S4M4 = REAL(v_iniFDWT_efmi2_S4M4);

                         PROTECT(dimCst_F_efmi = getAttrib(v_F_efmi2_S1M1, install("DimCst")));

                        } else {

                         r_F_efmi = REAL(v_F_efmi2);
                         PROTECT(dimCst_F_efmi = getAttrib(v_F_efmi2, install("DimCst")));

                        }

////Rprintf("Mort6\n");
                        //tests sur les dimensions
                        dim_Sr_e = INTEGER(dimCst_Sr_e);
                        if (((dim_Sr_e[0]!=0) & (dim_Sr_e[0]!=nbF)) | ((dim_Sr_e[1]!=0) & (dim_Sr_e[1]!=nbM)) |
                            ((dim_Sr_e[2]!=0) & (dim_Sr_e[2]!=nbI)) | ((dim_Sr_e[3]!=0) & (dim_Sr_e[3]!=nbT)))
                        {
                            error("Non_homogeneous dimensions in Sr_e element. Check .ini biological parameters files !!\n");
                        }

                        dim_d_efi = INTEGER(dimCst_d_efi);
                        if (((dim_d_efi[0]!=0) & (dim_d_efi[0]!=nbF)) | ((dim_d_efi[1]!=0) & (dim_d_efi[1]!=nbM)) |
                            ((dim_d_efi[2]!=0) & (dim_d_efi[2]!=nbI)) | ((dim_d_efi[3]!=0) & (dim_d_efi[3]!=nbT)))
                        {
                            error("Non_homogeneous dimensions in d_efi element. Check .ini biological parameters files !!\n");
                        }

                        dim_doth_ei = INTEGER(dimCst_doth_ei);
                        if (((dim_doth_ei[0]!=0) & (dim_doth_ei[0]!=nbF)) | ((dim_doth_ei[1]!=0) & (dim_doth_ei[1]!=nbM)) |
                            ((dim_doth_ei[2]!=0) & (dim_doth_ei[2]!=nbI)) | ((dim_doth_ei[3]!=0) & (dim_doth_ei[3]!=nbT)))
                        {
                            error("Non_homogeneous dimensions in doth_ei element. Check .ini biological parameters files !!\n");
                        }

                        dim_F_efmi = INTEGER(dimCst_F_efmi);
                        if (((dim_F_efmi[0]!=0) & (dim_F_efmi[0]!=nbF)) | ((dim_F_efmi[1]!=0) & (dim_F_efmi[1]!=nbM)) |
                            ((dim_F_efmi[2]!=0) & (dim_F_efmi[2]!=nbI)) | ((dim_F_efmi[3]!=0) & (dim_F_efmi[3]!=nbT)))
                        {
                            error("Non_homogeneous dimensions in F_efmi element. Check .ini biological parameters files !!\n");
                        }

                        //on détermine l'attribut Dimension du tableau résultant -> dimCst (on en profite pour compter les dimensions réelles + nombre de cellules)
                        PROTECT(dimCst = allocVector(INTSXP, 4));
                        dimC = INTEGER(dimCst);
                        int count = 0, prod = 1, count2 = 0, count3 = 0;

                        for (int k = 0 ; k < 4 ; k++) {

                            dimC[k] = imax2( imax2(dim_d_efi[k] , dim_F_efmi[k]) , dimEffort[k]);
                            if (k==3) dimC[3] = nbT; //on considère la donnée temporellement
                            if (dimC[k]>0) {
                                count++;
                                prod = prod * dimC[k];
                            }

                        }
//Rprintf("Mort7\n");
                        PROTECT(Dim = allocVector(INTSXP, count));
                        int *dim = INTEGER(Dim);

                        for (int k = 0 ; k < 4 ; k++) {
                            if (dimC[k]>0) {
                                dim[count2] = dimC[k];
                                count2++;
                                }
                        }

//Rprintf("Mort8\n");
                    if (ind_t==0) {

                      if (Qvec[e]==1) {

                        PROTECT(ans_11_S1M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S1M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S1M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S1M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S2M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S2M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S2M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S2M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S3M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S3M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S3M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S3M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S4M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S4M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S4M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11_S4M4 = NEW_NUMERIC(prod));

                        PROTECT(ans_11l_S1M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S1M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S1M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S1M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S2M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S2M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S2M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S2M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S3M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S3M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S3M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S3M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S4M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S4M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S4M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_11l_S4M4 = NEW_NUMERIC(prod));

                        PROTECT(ans_FRWT_S1M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S1M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S1M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S1M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S2M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S2M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S2M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S2M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S3M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S3M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S3M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S3M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S4M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S4M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S4M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FRWT_S4M4 = NEW_NUMERIC(prod));

                        PROTECT(ans_FDWT_S1M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S1M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S1M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S1M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S2M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S2M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S2M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S2M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S3M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S3M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S3M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S3M4 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S4M1 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S4M2 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S4M3 = NEW_NUMERIC(prod));
                        PROTECT(ans_FDWT_S4M4 = NEW_NUMERIC(prod));

                        setAttrib(ans_11_S1M1, R_DimSymbol, Dim);
                        setAttrib(ans_11_S1M2, R_DimSymbol, Dim);
                        setAttrib(ans_11_S1M3, R_DimSymbol, Dim);
                        setAttrib(ans_11_S1M4, R_DimSymbol, Dim);
                        setAttrib(ans_11_S2M1, R_DimSymbol, Dim);
                        setAttrib(ans_11_S2M2, R_DimSymbol, Dim);
                        setAttrib(ans_11_S2M3, R_DimSymbol, Dim);
                        setAttrib(ans_11_S2M4, R_DimSymbol, Dim);
                        setAttrib(ans_11_S3M1, R_DimSymbol, Dim);
                        setAttrib(ans_11_S3M2, R_DimSymbol, Dim);
                        setAttrib(ans_11_S3M3, R_DimSymbol, Dim);
                        setAttrib(ans_11_S3M4, R_DimSymbol, Dim);
                        setAttrib(ans_11_S4M1, R_DimSymbol, Dim);
                        setAttrib(ans_11_S4M2, R_DimSymbol, Dim);
                        setAttrib(ans_11_S4M3, R_DimSymbol, Dim);
                        setAttrib(ans_11_S4M4, R_DimSymbol, Dim);

                        setAttrib(ans_11l_S1M1, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S1M2, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S1M3, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S1M4, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S2M1, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S2M2, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S2M3, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S2M4, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S3M1, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S3M2, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S3M3, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S3M4, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S4M1, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S4M2, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S4M3, R_DimSymbol, Dim);
                        setAttrib(ans_11l_S4M4, R_DimSymbol, Dim);

                        setAttrib(ans_FRWT_S1M1, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S1M2, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S1M3, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S1M4, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S2M1, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S2M2, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S2M3, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S2M4, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S3M1, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S3M2, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S3M3, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S3M4, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S4M1, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S4M2, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S4M3, R_DimSymbol, Dim);
                        setAttrib(ans_FRWT_S4M4, R_DimSymbol, Dim);

                        setAttrib(ans_FDWT_S1M1, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S1M2, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S1M3, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S1M4, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S2M1, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S2M2, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S2M3, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S2M4, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S3M1, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S3M2, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S3M3, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S3M4, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S4M1, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S4M2, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S4M3, R_DimSymbol, Dim);
                        setAttrib(ans_FDWT_S4M4, R_DimSymbol, Dim);

                        rans_11_S1M1 = REAL(ans_11_S1M1);
                        rans_11_S1M2 = REAL(ans_11_S1M2);
                        rans_11_S1M3 = REAL(ans_11_S1M3);
                        rans_11_S1M4 = REAL(ans_11_S1M4);
                        rans_11_S2M1 = REAL(ans_11_S2M1);
                        rans_11_S2M2 = REAL(ans_11_S2M2);
                        rans_11_S2M3 = REAL(ans_11_S2M3);
                        rans_11_S2M4 = REAL(ans_11_S2M4);
                        rans_11_S3M1 = REAL(ans_11_S3M1);
                        rans_11_S3M2 = REAL(ans_11_S3M2);
                        rans_11_S3M3 = REAL(ans_11_S3M3);
                        rans_11_S3M4 = REAL(ans_11_S3M4);
                        rans_11_S4M1 = REAL(ans_11_S4M1);
                        rans_11_S4M2 = REAL(ans_11_S4M2);
                        rans_11_S4M3 = REAL(ans_11_S4M3);
                        rans_11_S4M4 = REAL(ans_11_S4M4);

                        rans_11l_S1M1 = REAL(ans_11l_S1M1);
                        rans_11l_S1M2 = REAL(ans_11l_S1M2);
                        rans_11l_S1M3 = REAL(ans_11l_S1M3);
                        rans_11l_S1M4 = REAL(ans_11l_S1M4);
                        rans_11l_S2M1 = REAL(ans_11l_S2M1);
                        rans_11l_S2M2 = REAL(ans_11l_S2M2);
                        rans_11l_S2M3 = REAL(ans_11l_S2M3);
                        rans_11l_S2M4 = REAL(ans_11l_S2M4);
                        rans_11l_S3M1 = REAL(ans_11l_S3M1);
                        rans_11l_S3M2 = REAL(ans_11l_S3M2);
                        rans_11l_S3M3 = REAL(ans_11l_S3M3);
                        rans_11l_S3M4 = REAL(ans_11l_S3M4);
                        rans_11l_S4M1 = REAL(ans_11l_S4M1);
                        rans_11l_S4M2 = REAL(ans_11l_S4M2);
                        rans_11l_S4M3 = REAL(ans_11l_S4M3);
                        rans_11l_S4M4 = REAL(ans_11l_S4M4);

                        rans_FDWT_S1M1 = REAL(ans_FDWT_S1M1);
                        rans_FDWT_S1M2 = REAL(ans_FDWT_S1M2);
                        rans_FDWT_S1M3 = REAL(ans_FDWT_S1M3);
                        rans_FDWT_S1M4 = REAL(ans_FDWT_S1M4);
                        rans_FDWT_S2M1 = REAL(ans_FDWT_S2M1);
                        rans_FDWT_S2M2 = REAL(ans_FDWT_S2M2);
                        rans_FDWT_S2M3 = REAL(ans_FDWT_S2M3);
                        rans_FDWT_S2M4 = REAL(ans_FDWT_S2M4);
                        rans_FDWT_S3M1 = REAL(ans_FDWT_S3M1);
                        rans_FDWT_S3M2 = REAL(ans_FDWT_S3M2);
                        rans_FDWT_S3M3 = REAL(ans_FDWT_S3M3);
                        rans_FDWT_S3M4 = REAL(ans_FDWT_S3M4);
                        rans_FDWT_S4M1 = REAL(ans_FDWT_S4M1);
                        rans_FDWT_S4M2 = REAL(ans_FDWT_S4M2);
                        rans_FDWT_S4M3 = REAL(ans_FDWT_S4M3);
                        rans_FDWT_S4M4 = REAL(ans_FDWT_S4M4);

                        rans_FRWT_S1M1 = REAL(ans_FRWT_S1M1);
                        rans_FRWT_S1M2 = REAL(ans_FRWT_S1M2);
                        rans_FRWT_S1M3 = REAL(ans_FRWT_S1M3);
                        rans_FRWT_S1M4 = REAL(ans_FRWT_S1M4);
                        rans_FRWT_S2M1 = REAL(ans_FRWT_S2M1);
                        rans_FRWT_S2M2 = REAL(ans_FRWT_S2M2);
                        rans_FRWT_S2M3 = REAL(ans_FRWT_S2M3);
                        rans_FRWT_S2M4 = REAL(ans_FRWT_S2M4);
                        rans_FRWT_S3M1 = REAL(ans_FRWT_S3M1);
                        rans_FRWT_S3M2 = REAL(ans_FRWT_S3M2);
                        rans_FRWT_S3M3 = REAL(ans_FRWT_S3M3);
                        rans_FRWT_S3M4 = REAL(ans_FRWT_S3M4);
                        rans_FRWT_S4M1 = REAL(ans_FRWT_S4M1);
                        rans_FRWT_S4M2 = REAL(ans_FRWT_S4M2);
                        rans_FRWT_S4M3 = REAL(ans_FRWT_S4M3);
                        rans_FRWT_S4M4 = REAL(ans_FRWT_S4M4);

                      }



                        PROTECT(ans_11l = NEW_NUMERIC(prod));
                        PROTECT(ans_11 = NEW_NUMERIC(prod));


                        setAttrib(ans_11, R_DimSymbol, Dim);
                        setAttrib(ans_11l, R_DimSymbol, Dim);

                        rans_11 = REAL(ans_11);
                        rans_11l = REAL(ans_11l);
//Rprintf("Mort9\n");

                        PROTECT(dimnames = allocVector(VECSXP,count));
                        if (dimC[0]>0) {SET_VECTOR_ELT(dimnames, count3, fleetList) ; count3++;}
                        if (dimC[1]>0) {SET_VECTOR_ELT(dimnames, count3, metierList) ; count3++;}
                        if (dimC[2]>0) {SET_VECTOR_ELT(dimnames, count3, intAge) ; count3++;}
                        if (dimC[3]>0) {SET_VECTOR_ELT(dimnames, count3, times) ; count3++;}


                    } else {

                      if (Qvec[e]==1) {

                        rans_11_S1M1 = REAL(VECTOR_ELT(out_F_fmi_S1M1, e));
                        rans_11_S1M2 = REAL(VECTOR_ELT(out_F_fmi_S1M2, e));
                        rans_11_S1M3 = REAL(VECTOR_ELT(out_F_fmi_S1M3, e));
                        rans_11_S1M4 = REAL(VECTOR_ELT(out_F_fmi_S1M4, e));
                        rans_11_S2M1 = REAL(VECTOR_ELT(out_F_fmi_S2M1, e));
                        rans_11_S2M2 = REAL(VECTOR_ELT(out_F_fmi_S2M2, e));
                        rans_11_S2M3 = REAL(VECTOR_ELT(out_F_fmi_S2M3, e));
                        rans_11_S2M4 = REAL(VECTOR_ELT(out_F_fmi_S2M4, e));
                        rans_11_S3M1 = REAL(VECTOR_ELT(out_F_fmi_S3M1, e));
                        rans_11_S3M2 = REAL(VECTOR_ELT(out_F_fmi_S3M2, e));
                        rans_11_S3M3 = REAL(VECTOR_ELT(out_F_fmi_S3M3, e));
                        rans_11_S3M4 = REAL(VECTOR_ELT(out_F_fmi_S3M4, e));
                        rans_11_S4M1 = REAL(VECTOR_ELT(out_F_fmi_S4M1, e));
                        rans_11_S4M2 = REAL(VECTOR_ELT(out_F_fmi_S4M2, e));
                        rans_11_S4M3 = REAL(VECTOR_ELT(out_F_fmi_S4M3, e));
                        rans_11_S4M4 = REAL(VECTOR_ELT(out_F_fmi_S4M4, e));

                        rans_11l_S1M1 = REAL(VECTOR_ELT(out_Fr_fmi_S1M1, e));
                        rans_11l_S1M2 = REAL(VECTOR_ELT(out_Fr_fmi_S1M2, e));
                        rans_11l_S1M3 = REAL(VECTOR_ELT(out_Fr_fmi_S1M3, e));
                        rans_11l_S1M4 = REAL(VECTOR_ELT(out_Fr_fmi_S1M4, e));
                        rans_11l_S2M1 = REAL(VECTOR_ELT(out_Fr_fmi_S2M1, e));
                        rans_11l_S2M2 = REAL(VECTOR_ELT(out_Fr_fmi_S2M2, e));
                        rans_11l_S2M3 = REAL(VECTOR_ELT(out_Fr_fmi_S2M3, e));
                        rans_11l_S2M4 = REAL(VECTOR_ELT(out_Fr_fmi_S2M4, e));
                        rans_11l_S3M1 = REAL(VECTOR_ELT(out_Fr_fmi_S3M1, e));
                        rans_11l_S3M2 = REAL(VECTOR_ELT(out_Fr_fmi_S3M2, e));
                        rans_11l_S3M3 = REAL(VECTOR_ELT(out_Fr_fmi_S3M3, e));
                        rans_11l_S3M4 = REAL(VECTOR_ELT(out_Fr_fmi_S3M4, e));
                        rans_11l_S4M1 = REAL(VECTOR_ELT(out_Fr_fmi_S4M1, e));
                        rans_11l_S4M2 = REAL(VECTOR_ELT(out_Fr_fmi_S4M2, e));
                        rans_11l_S4M3 = REAL(VECTOR_ELT(out_Fr_fmi_S4M3, e));
                        rans_11l_S4M4 = REAL(VECTOR_ELT(out_Fr_fmi_S4M4, e));

                        rans_FRWT_S1M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M1, e));
                        rans_FRWT_S1M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M2, e));
                        rans_FRWT_S1M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M3, e));
                        rans_FRWT_S1M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M4, e));
                        rans_FRWT_S2M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M1, e));
                        rans_FRWT_S2M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M2, e));
                        rans_FRWT_S2M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M3, e));
                        rans_FRWT_S2M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M4, e));
                        rans_FRWT_S3M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M1, e));
                        rans_FRWT_S3M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M2, e));
                        rans_FRWT_S3M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M3, e));
                        rans_FRWT_S3M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M4, e));
                        rans_FRWT_S4M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M1, e));
                        rans_FRWT_S4M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M2, e));
                        rans_FRWT_S4M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M3, e));
                        rans_FRWT_S4M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M4, e));

                        rans_FDWT_S1M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M1, e));
                        rans_FDWT_S1M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M2, e));
                        rans_FDWT_S1M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M3, e));
                        rans_FDWT_S1M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M4, e));
                        rans_FDWT_S2M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M1, e));
                        rans_FDWT_S2M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M2, e));
                        rans_FDWT_S2M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M3, e));
                        rans_FDWT_S2M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M4, e));
                        rans_FDWT_S3M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M1, e));
                        rans_FDWT_S3M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M2, e));
                        rans_FDWT_S3M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M3, e));
                        rans_FDWT_S3M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M4, e));
                        rans_FDWT_S4M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M1, e));
                        rans_FDWT_S4M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M2, e));
                        rans_FDWT_S4M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M3, e));
                        rans_FDWT_S4M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M4, e));

                      }

                        rans_11 = REAL(VECTOR_ELT(out_F_fmi, e));
                        rans_11l = REAL(VECTOR_ELT(out_Fr_fmi, e));

                    }



                        r_Sr_e = REAL(v_Sr_e);
                        r_d_efi = REAL(v_d_efi);
                        r_doth_ei = REAL(v_doth_ei);

                            //facteurs des indices pour genériciser le processus
//Rprintf("Mort10\n");
                            PROTECT(fFACT1 = iDim(dimC));
                            PROTECT(fFACT2 = iDim(dim_d_efi));
                            PROTECT(fFACT3 = iDim(dim_Sr_e));
                            PROTECT(fFACT4 = iDim(dim_F_efmi));
                            PROTECT(fFACT5 = iDim(dimEffort));
                            PROTECT(fFACTsup1 = iDim(dimNav));
                            PROTECT(fFACTsup2 = iDim(dimNbds));
                            PROTECT(fFACT6 = iDim(dim_doth_ei));

                            int *fFact1 = INTEGER(fFACT1);
                            int *fFact2 = INTEGER(fFACT2);
                            int *fFact3 = INTEGER(fFACT3);
                            int *fFact4 = INTEGER(fFACT4);
                            int *fFact5 = INTEGER(fFACT5);
                            int *fFact6 = INTEGER(fFACT6);

//Rprintf("Mort11\n");
                            //équation

                        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                        if (Qvec[e]==1) {

                           rans_11_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_11_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_11_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                          // l'évaluation de rans_11 et rans_11l ne peut se faire que dans le module de dynamiques de pop car on a besoin de N

                           rans_11l_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]] ;//*
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);
                           if (ind_i==0) rans_11l_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_11l_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                           rans_11l_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniF_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];// *
                            //(1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            //  r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);



                           rans_FRWT_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FRWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FRWT_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FRWT_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFRWT_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];


                           rans_FDWT_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];
                           if (ind_i==0) rans_FDWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                           rans_FDWT_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                           rans_FDWT_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_iniFDWT_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];


                        } else {


                        rans_11[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_F_efmi[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]];

                        rans_11l[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                            r_F_efmi[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                            rEff[ind_f*fFact5[0] + ind_m*fFact5[1] + ind_i*fFact5[2] + ind_t*fFact5[3]] *
                            (1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                              r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                        }}

                    if (ind_t==0) {

                      if (Qvec[e]==1) {

                        setAttrib(ans_11_S1M1, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S1M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S1M1, install("DimCst"), dimCst); setAttrib(ans_11l_S1M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S1M1, e, ans_11_S1M1); SET_VECTOR_ELT(out_Fr_fmi_S1M1, e, ans_11l_S1M1);

                        setAttrib(ans_11_S1M2, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S1M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S1M2, install("DimCst"), dimCst); setAttrib(ans_11l_S1M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S1M2, e, ans_11_S1M2); SET_VECTOR_ELT(out_Fr_fmi_S1M2, e, ans_11l_S1M2);

                        setAttrib(ans_11_S1M3, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S1M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S1M3, install("DimCst"), dimCst); setAttrib(ans_11l_S1M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S1M3, e, ans_11_S1M3); SET_VECTOR_ELT(out_Fr_fmi_S1M3, e, ans_11l_S1M3);

                        setAttrib(ans_11_S1M4, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S1M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S1M4, install("DimCst"), dimCst); setAttrib(ans_11l_S1M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S1M4, e, ans_11_S1M4); SET_VECTOR_ELT(out_Fr_fmi_S1M4, e, ans_11l_S1M4);

                        setAttrib(ans_11_S2M1, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S2M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S2M1, install("DimCst"), dimCst); setAttrib(ans_11l_S2M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S2M1, e, ans_11_S2M1); SET_VECTOR_ELT(out_Fr_fmi_S2M1, e, ans_11l_S2M1);

                        setAttrib(ans_11_S2M2, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S2M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S2M2, install("DimCst"), dimCst); setAttrib(ans_11l_S2M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S2M2, e, ans_11_S2M2); SET_VECTOR_ELT(out_Fr_fmi_S2M2, e, ans_11l_S2M2);

                        setAttrib(ans_11_S2M3, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S2M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S2M3, install("DimCst"), dimCst); setAttrib(ans_11l_S2M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S2M3, e, ans_11_S2M3); SET_VECTOR_ELT(out_Fr_fmi_S2M3, e, ans_11l_S2M3);

                        setAttrib(ans_11_S2M4, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S2M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S2M4, install("DimCst"), dimCst); setAttrib(ans_11l_S2M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S2M4, e, ans_11_S2M4); SET_VECTOR_ELT(out_Fr_fmi_S2M4, e, ans_11l_S2M4);

                        setAttrib(ans_11_S3M1, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S3M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S3M1, install("DimCst"), dimCst); setAttrib(ans_11l_S3M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S3M1, e, ans_11_S3M1); SET_VECTOR_ELT(out_Fr_fmi_S3M1, e, ans_11l_S3M1);

                        setAttrib(ans_11_S3M2, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S3M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S3M2, install("DimCst"), dimCst); setAttrib(ans_11l_S3M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S3M2, e, ans_11_S3M2); SET_VECTOR_ELT(out_Fr_fmi_S3M2, e, ans_11l_S3M2);

                        setAttrib(ans_11_S3M3, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S3M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S3M3, install("DimCst"), dimCst); setAttrib(ans_11l_S3M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S3M3, e, ans_11_S3M3); SET_VECTOR_ELT(out_Fr_fmi_S3M3, e, ans_11l_S3M3);

                        setAttrib(ans_11_S3M4, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S3M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S3M4, install("DimCst"), dimCst); setAttrib(ans_11l_S3M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S3M4, e, ans_11_S3M4); SET_VECTOR_ELT(out_Fr_fmi_S3M4, e, ans_11l_S3M4);

                        setAttrib(ans_11_S4M1, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S4M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S4M1, install("DimCst"), dimCst); setAttrib(ans_11l_S4M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S4M1, e, ans_11_S4M1); SET_VECTOR_ELT(out_Fr_fmi_S4M1, e, ans_11l_S4M1);

                        setAttrib(ans_11_S4M2, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S4M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S4M2, install("DimCst"), dimCst); setAttrib(ans_11l_S4M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S4M2, e, ans_11_S4M2); SET_VECTOR_ELT(out_Fr_fmi_S4M2, e, ans_11l_S4M2);

                        setAttrib(ans_11_S4M3, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S4M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S4M3, install("DimCst"), dimCst); setAttrib(ans_11l_S4M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S4M3, e, ans_11_S4M3); SET_VECTOR_ELT(out_Fr_fmi_S4M3, e, ans_11l_S4M3);

                        setAttrib(ans_11_S4M4, R_DimNamesSymbol, dimnames); setAttrib(ans_11l_S4M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11_S4M4, install("DimCst"), dimCst); setAttrib(ans_11l_S4M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi_S4M4, e, ans_11_S4M4); SET_VECTOR_ELT(out_Fr_fmi_S4M4, e, ans_11l_S4M4);



                        setAttrib(ans_FRWT_S1M1, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S1M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S1M1, install("DimCst"), dimCst); setAttrib(ans_FDWT_S1M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S1M1, e, ans_FRWT_S1M1); SET_VECTOR_ELT(out_FDWT_fmi_S1M1, e, ans_FDWT_S1M1);

                        setAttrib(ans_FRWT_S1M2, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S1M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S1M2, install("DimCst"), dimCst); setAttrib(ans_FDWT_S1M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S1M2, e, ans_FRWT_S1M2); SET_VECTOR_ELT(out_FDWT_fmi_S1M2, e, ans_FDWT_S1M2);

                        setAttrib(ans_FRWT_S1M3, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S1M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S1M3, install("DimCst"), dimCst); setAttrib(ans_FDWT_S1M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S1M3, e, ans_FRWT_S1M3); SET_VECTOR_ELT(out_FDWT_fmi_S1M3, e, ans_FDWT_S1M3);

                        setAttrib(ans_FRWT_S1M4, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S1M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S1M4, install("DimCst"), dimCst); setAttrib(ans_FDWT_S1M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S1M4, e, ans_FRWT_S1M4); SET_VECTOR_ELT(out_FDWT_fmi_S1M4, e, ans_FDWT_S1M4);

                        setAttrib(ans_FRWT_S2M1, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S2M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S2M1, install("DimCst"), dimCst); setAttrib(ans_FDWT_S2M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S2M1, e, ans_FRWT_S2M1); SET_VECTOR_ELT(out_FDWT_fmi_S2M1, e, ans_FDWT_S2M1);

                        setAttrib(ans_FRWT_S2M2, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S2M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S2M2, install("DimCst"), dimCst); setAttrib(ans_FDWT_S2M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S2M2, e, ans_FRWT_S2M2); SET_VECTOR_ELT(out_FDWT_fmi_S2M2, e, ans_FDWT_S2M2);

                        setAttrib(ans_FRWT_S2M3, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S2M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S2M3, install("DimCst"), dimCst); setAttrib(ans_FDWT_S2M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S2M3, e, ans_FRWT_S2M3); SET_VECTOR_ELT(out_FDWT_fmi_S2M3, e, ans_FDWT_S2M3);

                        setAttrib(ans_FRWT_S2M4, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S2M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S2M4, install("DimCst"), dimCst); setAttrib(ans_FDWT_S2M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S2M4, e, ans_FRWT_S2M4); SET_VECTOR_ELT(out_FDWT_fmi_S2M4, e, ans_FDWT_S2M4);

                        setAttrib(ans_FRWT_S3M1, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S3M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S3M1, install("DimCst"), dimCst); setAttrib(ans_FDWT_S3M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S3M1, e, ans_FRWT_S3M1); SET_VECTOR_ELT(out_FDWT_fmi_S3M1, e, ans_FDWT_S3M1);

                        setAttrib(ans_FRWT_S3M2, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S3M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S3M2, install("DimCst"), dimCst); setAttrib(ans_FDWT_S3M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S3M2, e, ans_FRWT_S3M2); SET_VECTOR_ELT(out_FDWT_fmi_S3M2, e, ans_FDWT_S3M2);

                        setAttrib(ans_FRWT_S3M3, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S3M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S3M3, install("DimCst"), dimCst); setAttrib(ans_FDWT_S3M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S3M3, e, ans_FRWT_S3M3); SET_VECTOR_ELT(out_FDWT_fmi_S3M3, e, ans_FDWT_S3M3);

                        setAttrib(ans_FRWT_S3M4, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S3M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S3M4, install("DimCst"), dimCst); setAttrib(ans_FDWT_S3M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S3M4, e, ans_FRWT_S3M4); SET_VECTOR_ELT(out_FDWT_fmi_S3M4, e, ans_FDWT_S3M4);

                        setAttrib(ans_FRWT_S4M1, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S4M1, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S4M1, install("DimCst"), dimCst); setAttrib(ans_FDWT_S4M1, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S4M1, e, ans_FRWT_S4M1); SET_VECTOR_ELT(out_FDWT_fmi_S4M1, e, ans_FDWT_S4M1);

                        setAttrib(ans_FRWT_S4M2, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S4M2, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S4M2, install("DimCst"), dimCst); setAttrib(ans_FDWT_S4M2, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S4M2, e, ans_FRWT_S4M2); SET_VECTOR_ELT(out_FDWT_fmi_S4M2, e, ans_FDWT_S4M2);

                        setAttrib(ans_FRWT_S4M3, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S4M3, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S4M3, install("DimCst"), dimCst); setAttrib(ans_FDWT_S4M3, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S4M3, e, ans_FRWT_S4M3); SET_VECTOR_ELT(out_FDWT_fmi_S4M3, e, ans_FDWT_S4M3);

                        setAttrib(ans_FRWT_S4M4, R_DimNamesSymbol, dimnames); setAttrib(ans_FDWT_S4M4, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_FRWT_S4M4, install("DimCst"), dimCst); setAttrib(ans_FDWT_S4M4, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_FRWT_fmi_S4M4, e, ans_FRWT_S4M4); SET_VECTOR_ELT(out_FDWT_fmi_S4M4, e, ans_FDWT_S4M4);

                      }

                        setAttrib(ans_11, R_DimNamesSymbol, dimnames); setAttrib(ans_11l, R_DimNamesSymbol, dimnames);
                        setAttrib(ans_11, install("DimCst"), dimCst); setAttrib(ans_11l, install("DimCst"), dimCst);
                        SET_VECTOR_ELT(out_F_fmi, e, ans_11); SET_VECTOR_ELT(out_Fr_fmi, e, ans_11l);
                        SET_STRING_ELT(rnames, e, STRING_ELT(sppList,e));
                        UNPROTECT(3);
                        if (Qvec[e]==1) UNPROTECT(32);
                        if (Qvec[e]==1) UNPROTECT(32);

                    }


                    //il ne reste plus qu'à calculer Foth_i en soutrayant de Ftot_i la somme aux âges de la mortalité ventilée non corrigée, et Froth_i en lui appliquant doth_i

                        PROTECT(Foth_i = NEW_NUMERIC(nbI*nbT)); //attention, on considère la mortalité initiale comme étant définie sans dimension temporelle --> à revoir
                        PROTECT(Froth_i = NEW_NUMERIC(nbI*nbT));
                        PROTECT(dimI = allocVector(INTSXP,4));
                        PROTECT(dimIT = allocVector(INTSXP,4));
                        PROTECT(DimIT = allocVector(INTSXP,2));
                        int *rdimI = INTEGER(dimI); rdimI[0] = 0; rdimI[1] = 0; rdimI[2] = nbI; rdimI[3] = dimF[3];
                        int *rdimIT = INTEGER(dimIT); rdimIT[0] = 0; rdimIT[1] = 0; rdimIT[2] = nbI; rdimIT[3] = nbT;
                        int *rDimIT = INTEGER(DimIT); rDimIT[0] = nbI; rDimIT[1] = nbT;

                        PROTECT(dimnamesIT = allocVector(VECSXP,2));
                        SET_VECTOR_ELT(dimnamesIT, 0, intAge);
                        SET_VECTOR_ELT(dimnamesIT, 1, times);

                        setAttrib(Foth_i, R_DimSymbol, DimIT); setAttrib(Froth_i, R_DimSymbol, DimIT);
                        setAttrib(Foth_i, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i, install("DimCst"), dimIT); setAttrib(Froth_i, install("DimCst"), dimIT);

                        r_Foth_i = REAL(Foth_i);
                        r_Froth_i = REAL(Froth_i);


                      if (Qvec[e]==1) {

                        PROTECT(Foth_i_S1M1 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S1M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S1M1, R_DimSymbol, DimIT); setAttrib(Froth_i_S1M1, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S1M1, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S1M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S1M1, install("DimCst"), dimIT); setAttrib(Froth_i_S1M1, install("DimCst"), dimIT);
                        r_Foth_i_S1M1 = REAL(Foth_i_S1M1);
                        r_Froth_i_S1M1 = REAL(Froth_i_S1M1);

                        PROTECT(Foth_i_S1M2 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S1M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S1M2, R_DimSymbol, DimIT); setAttrib(Froth_i_S1M2, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S1M2, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S1M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S1M2, install("DimCst"), dimIT); setAttrib(Froth_i_S1M2, install("DimCst"), dimIT);
                        r_Foth_i_S1M2 = REAL(Foth_i_S1M2);
                        r_Froth_i_S1M2 = REAL(Froth_i_S1M2);

                        PROTECT(Foth_i_S1M3 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S1M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S1M3, R_DimSymbol, DimIT); setAttrib(Froth_i_S1M3, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S1M3, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S1M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S1M3, install("DimCst"), dimIT); setAttrib(Froth_i_S1M3, install("DimCst"), dimIT);
                        r_Foth_i_S1M3 = REAL(Foth_i_S1M3);
                        r_Froth_i_S1M3 = REAL(Froth_i_S1M3);

                        PROTECT(Foth_i_S1M4 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S1M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S1M4, R_DimSymbol, DimIT); setAttrib(Froth_i_S1M4, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S1M4, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S1M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S1M4, install("DimCst"), dimIT); setAttrib(Froth_i_S1M4, install("DimCst"), dimIT);
                        r_Foth_i_S1M4 = REAL(Foth_i_S1M4);
                        r_Froth_i_S1M4 = REAL(Froth_i_S1M4);

                        PROTECT(Foth_i_S2M1 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S2M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S2M1, R_DimSymbol, DimIT); setAttrib(Froth_i_S2M1, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S2M1, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S2M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S2M1, install("DimCst"), dimIT); setAttrib(Froth_i_S2M1, install("DimCst"), dimIT);
                        r_Foth_i_S2M1 = REAL(Foth_i_S2M1);
                        r_Froth_i_S2M1 = REAL(Froth_i_S2M1);

                        PROTECT(Foth_i_S2M2 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S2M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S2M2, R_DimSymbol, DimIT); setAttrib(Froth_i_S2M2, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S2M2, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S2M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S2M2, install("DimCst"), dimIT); setAttrib(Froth_i_S2M2, install("DimCst"), dimIT);
                        r_Foth_i_S2M2 = REAL(Foth_i_S2M2);
                        r_Froth_i_S2M2 = REAL(Froth_i_S2M2);

                        PROTECT(Foth_i_S2M3 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S2M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S2M3, R_DimSymbol, DimIT); setAttrib(Froth_i_S2M3, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S2M3, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S2M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S2M3, install("DimCst"), dimIT); setAttrib(Froth_i_S2M3, install("DimCst"), dimIT);
                        r_Foth_i_S2M3 = REAL(Foth_i_S2M3);
                        r_Froth_i_S2M3 = REAL(Froth_i_S2M3);

                        PROTECT(Foth_i_S2M4 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S2M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S2M4, R_DimSymbol, DimIT); setAttrib(Froth_i_S2M4, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S2M4, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S2M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S2M4, install("DimCst"), dimIT); setAttrib(Froth_i_S2M4, install("DimCst"), dimIT);
                        r_Foth_i_S2M4 = REAL(Foth_i_S2M4);
                        r_Froth_i_S2M4 = REAL(Froth_i_S2M4);

                        PROTECT(Foth_i_S3M1 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S3M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S3M1, R_DimSymbol, DimIT); setAttrib(Froth_i_S3M1, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S3M1, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S3M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S3M1, install("DimCst"), dimIT); setAttrib(Froth_i_S3M1, install("DimCst"), dimIT);
                        r_Foth_i_S3M1 = REAL(Foth_i_S3M1);
                        r_Froth_i_S3M1 = REAL(Froth_i_S3M1);

                        PROTECT(Foth_i_S3M2 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S3M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S3M2, R_DimSymbol, DimIT); setAttrib(Froth_i_S3M2, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S3M2, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S3M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S3M2, install("DimCst"), dimIT); setAttrib(Froth_i_S3M2, install("DimCst"), dimIT);
                        r_Foth_i_S3M2 = REAL(Foth_i_S3M2);
                        r_Froth_i_S3M2 = REAL(Froth_i_S3M2);

                        PROTECT(Foth_i_S3M3 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S3M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S3M3, R_DimSymbol, DimIT); setAttrib(Froth_i_S3M3, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S3M3, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S3M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S3M3, install("DimCst"), dimIT); setAttrib(Froth_i_S3M3, install("DimCst"), dimIT);
                        r_Foth_i_S3M3 = REAL(Foth_i_S3M3);
                        r_Froth_i_S3M3 = REAL(Froth_i_S3M3);

                        PROTECT(Foth_i_S3M4 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S3M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S3M4, R_DimSymbol, DimIT); setAttrib(Froth_i_S3M4, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S3M4, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S3M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S3M4, install("DimCst"), dimIT); setAttrib(Froth_i_S3M4, install("DimCst"), dimIT);
                        r_Foth_i_S3M4 = REAL(Foth_i_S3M4);
                        r_Froth_i_S3M4 = REAL(Froth_i_S3M4);

                        PROTECT(Foth_i_S4M1 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S4M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S4M1, R_DimSymbol, DimIT); setAttrib(Froth_i_S4M1, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S4M1, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S4M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S4M1, install("DimCst"), dimIT); setAttrib(Froth_i_S4M1, install("DimCst"), dimIT);
                        r_Foth_i_S4M1 = REAL(Foth_i_S4M1);
                        r_Froth_i_S4M1 = REAL(Froth_i_S4M1);

                        PROTECT(Foth_i_S4M2 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S4M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S4M2, R_DimSymbol, DimIT); setAttrib(Froth_i_S4M2, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S4M2, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S4M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S4M2, install("DimCst"), dimIT); setAttrib(Froth_i_S4M2, install("DimCst"), dimIT);
                        r_Foth_i_S4M2 = REAL(Foth_i_S4M2);
                        r_Froth_i_S4M2 = REAL(Froth_i_S4M2);

                        PROTECT(Foth_i_S4M3 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S4M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S4M3, R_DimSymbol, DimIT); setAttrib(Froth_i_S4M3, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S4M3, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S4M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S4M3, install("DimCst"), dimIT); setAttrib(Froth_i_S4M3, install("DimCst"), dimIT);
                        r_Foth_i_S4M3 = REAL(Foth_i_S4M3);
                        r_Froth_i_S4M3 = REAL(Froth_i_S4M3);

                        PROTECT(Foth_i_S4M4 = NEW_NUMERIC(nbI*nbT));
                        PROTECT(Froth_i_S4M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(Foth_i_S4M4, R_DimSymbol, DimIT); setAttrib(Froth_i_S4M4, R_DimSymbol, DimIT);
                        setAttrib(Foth_i_S4M4, R_DimNamesSymbol, dimnamesIT); setAttrib(Froth_i_S4M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(Foth_i_S4M4, install("DimCst"), dimIT); setAttrib(Froth_i_S4M4, install("DimCst"), dimIT);
                        r_Foth_i_S4M4 = REAL(Foth_i_S4M4);
                        r_Froth_i_S4M4 = REAL(Froth_i_S4M4);


                        PROTECT(FRWToth_i_S1M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S1M1, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S1M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S1M1, install("DimCst"), dimIT);
                        r_FRWToth_i_S1M1 = REAL(FRWToth_i_S1M1);

                        PROTECT(FRWToth_i_S1M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S1M2, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S1M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S1M2, install("DimCst"), dimIT);
                        r_FRWToth_i_S1M2 = REAL(FRWToth_i_S1M2);

                        PROTECT(FRWToth_i_S1M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S1M3, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S1M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S1M3, install("DimCst"), dimIT);
                        r_FRWToth_i_S1M3 = REAL(FRWToth_i_S1M3);

                        PROTECT(FRWToth_i_S1M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S1M4, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S1M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S1M4, install("DimCst"), dimIT);
                        r_FRWToth_i_S1M4 = REAL(FRWToth_i_S1M4);

                        PROTECT(FRWToth_i_S2M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S2M1, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S2M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S2M1, install("DimCst"), dimIT);
                        r_FRWToth_i_S2M1 = REAL(FRWToth_i_S2M1);

                        PROTECT(FRWToth_i_S2M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S2M2, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S2M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S2M2, install("DimCst"), dimIT);
                        r_FRWToth_i_S2M2 = REAL(FRWToth_i_S2M2);

                        PROTECT(FRWToth_i_S2M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S2M3, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S2M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S2M3, install("DimCst"), dimIT);
                        r_FRWToth_i_S2M3 = REAL(FRWToth_i_S2M3);

                        PROTECT(FRWToth_i_S2M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S2M4, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S2M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S2M4, install("DimCst"), dimIT);
                        r_FRWToth_i_S2M4 = REAL(FRWToth_i_S2M4);

                        PROTECT(FRWToth_i_S3M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S3M1, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S3M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S3M1, install("DimCst"), dimIT);
                        r_FRWToth_i_S3M1 = REAL(FRWToth_i_S3M1);

                        PROTECT(FRWToth_i_S3M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S3M2, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S3M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S3M2, install("DimCst"), dimIT);
                        r_FRWToth_i_S3M2 = REAL(FRWToth_i_S3M2);

                        PROTECT(FRWToth_i_S3M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S3M3, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S3M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S3M3, install("DimCst"), dimIT);
                        r_FRWToth_i_S3M3 = REAL(FRWToth_i_S3M3);

                        PROTECT(FRWToth_i_S3M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S3M4, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S3M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S3M4, install("DimCst"), dimIT);
                        r_FRWToth_i_S3M4 = REAL(FRWToth_i_S3M4);

                        PROTECT(FRWToth_i_S4M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S4M1, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S4M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S4M1, install("DimCst"), dimIT);
                        r_FRWToth_i_S4M1 = REAL(FRWToth_i_S4M1);

                        PROTECT(FRWToth_i_S4M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S4M2, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S4M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S4M2, install("DimCst"), dimIT);
                        r_FRWToth_i_S4M2 = REAL(FRWToth_i_S4M2);

                        PROTECT(FRWToth_i_S4M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S4M3, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S4M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S4M3, install("DimCst"), dimIT);
                        r_FRWToth_i_S4M3 = REAL(FRWToth_i_S4M3);

                        PROTECT(FRWToth_i_S4M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FRWToth_i_S4M4, R_DimSymbol, DimIT);
                        setAttrib(FRWToth_i_S4M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FRWToth_i_S4M4, install("DimCst"), dimIT);
                        r_FRWToth_i_S4M4 = REAL(FRWToth_i_S4M4);


                        PROTECT(FDWToth_i_S1M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S1M1, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S1M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S1M1, install("DimCst"), dimIT);
                        r_FDWToth_i_S1M1 = REAL(FDWToth_i_S1M1);

                        PROTECT(FDWToth_i_S1M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S1M2, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S1M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S1M2, install("DimCst"), dimIT);
                        r_FDWToth_i_S1M2 = REAL(FDWToth_i_S1M2);

                        PROTECT(FDWToth_i_S1M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S1M3, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S1M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S1M3, install("DimCst"), dimIT);
                        r_FDWToth_i_S1M3 = REAL(FDWToth_i_S1M3);

                        PROTECT(FDWToth_i_S1M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S1M4, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S1M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S1M4, install("DimCst"), dimIT);
                        r_FDWToth_i_S1M4 = REAL(FDWToth_i_S1M4);

                        PROTECT(FDWToth_i_S2M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S2M1, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S2M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S2M1, install("DimCst"), dimIT);
                        r_FDWToth_i_S2M1 = REAL(FDWToth_i_S2M1);

                        PROTECT(FDWToth_i_S2M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S2M2, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S2M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S2M2, install("DimCst"), dimIT);
                        r_FDWToth_i_S2M2 = REAL(FDWToth_i_S2M2);

                        PROTECT(FDWToth_i_S2M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S2M3, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S2M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S2M3, install("DimCst"), dimIT);
                        r_FDWToth_i_S2M3 = REAL(FDWToth_i_S2M3);

                        PROTECT(FDWToth_i_S2M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S2M4, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S2M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S2M4, install("DimCst"), dimIT);
                        r_FDWToth_i_S2M4 = REAL(FDWToth_i_S2M4);

                        PROTECT(FDWToth_i_S3M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S3M1, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S3M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S3M1, install("DimCst"), dimIT);
                        r_FDWToth_i_S3M1 = REAL(FDWToth_i_S3M1);

                        PROTECT(FDWToth_i_S3M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S3M2, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S3M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S3M2, install("DimCst"), dimIT);
                        r_FDWToth_i_S3M2 = REAL(FDWToth_i_S3M2);

                        PROTECT(FDWToth_i_S3M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S3M3, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S3M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S3M3, install("DimCst"), dimIT);
                        r_FDWToth_i_S3M3 = REAL(FDWToth_i_S3M3);

                        PROTECT(FDWToth_i_S3M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S3M4, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S3M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S3M4, install("DimCst"), dimIT);
                        r_FDWToth_i_S3M4 = REAL(FDWToth_i_S3M4);

                        PROTECT(FDWToth_i_S4M1 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S4M1, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S4M1, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S4M1, install("DimCst"), dimIT);
                        r_FDWToth_i_S4M1 = REAL(FDWToth_i_S4M1);

                        PROTECT(FDWToth_i_S4M2 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S4M2, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S4M2, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S4M2, install("DimCst"), dimIT);
                        r_FDWToth_i_S4M2 = REAL(FDWToth_i_S4M2);

                        PROTECT(FDWToth_i_S4M3 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S4M3, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S4M3, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S4M3, install("DimCst"), dimIT);
                        r_FDWToth_i_S4M3 = REAL(FDWToth_i_S4M3);

                        PROTECT(FDWToth_i_S4M4 = NEW_NUMERIC(nbI*nbT));
                        setAttrib(FDWToth_i_S4M4, R_DimSymbol, DimIT);
                        setAttrib(FDWToth_i_S4M4, R_DimNamesSymbol, dimnamesIT);
                        setAttrib(FDWToth_i_S4M4, install("DimCst"), dimIT);
                        r_FDWToth_i_S4M4 = REAL(FDWToth_i_S4M4);


                      } else {


                    //if (ind_t==0) {//PrintValue(v_F_efmi); //PrintValue(aggregObj(v_F_efmi, dimI)); }

                        double *sumFtot = REAL(getListElement(elmt, "F_i"));

                        rdimI[3] = dimC[3];
                        double *sumFr = REAL(aggregObj(ans_11, dimI));
                    //if (ind_t==0) {//PrintValue(aggregObj(ans_11, dimI));}

                        if (ind_t==0) { //on initialise
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                                r_Foth_i[ind_i+ind_t*nbI] = fmax2(0.0 , sumFtot[ind_i+ind_t*nbI*(dimF[3]>0)] - sumFr[ind_i+ind_t*nbI*(dimC[3]>0)]); //ON N'INTEGRE PAS DE MORTALITES NEGATIVES

                                if (FOTHoptim_use & (e==eTemp)) {
                                    r_Foth_i[ind_i+(ind_t+1)*nbI] = FOTHoptim[ind_i+(ind_t+1)*nbI];
                                } else {
                                    r_Foth_i[ind_i+(ind_t+1)*nbI] = r_Foth_i[ind_i+ind_t*nbI];
                                }
                            }
                            ////PrintValue(v_F_efmi);//PrintValue(dimI);//PrintValue(Foth_i);
                        } else {
                           if (ind_t<(nbT-1)) {
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                                if (FOTHoptim_use & (e==eTemp)) {
                                    r_Foth_i[ind_i+(ind_t+1)*nbI] = FOTHoptim[ind_i+(ind_t+1)*nbI];
                                } else {
                                    r_Foth_i[ind_i+(ind_t+1)*nbI] = r_Foth_i[ind_i+ind_t*nbI];
                                }
                            }

                           }
                        }


                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                r_Froth_i[ind_i+ind_t*nbI] = r_Foth_i[ind_i+ind_t*nbI] *
                                    (1 - r_Sr_e[0*fFact3[0] + 0*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                                    r_doth_ei[0*fFact6[0] + 0*fFact6[1] + ind_i*fFact6[2] + ind_t*fFact6[3]]);

                      }


                      if (Qvec[e]==1) {

                       double *fothi = REAL(getListElement(elmt, "iniFothi_S1M1")) ; double *fothi2 = REAL(getListElement(elmt, "Fothi_S1M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S1M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S1M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S1M1[ind_i+ind_t*nbI] = r_Foth_i_S1M1[ind_i+ind_t*nbI] ;//*

                       fothi = REAL(getListElement(elmt, "iniFothi_S1M2")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S1M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M2[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S1M2[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S1M2[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S1M2[ind_i+ind_t*nbI] = r_Foth_i_S1M2[ind_i+ind_t*nbI];// *
                        if (ind_i==0) r_Froth_i_S1M2[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S1M3")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S1M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S1M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S1M3[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S1M3[ind_i+ind_t*nbI] = r_Foth_i_S1M3[ind_i+ind_t*nbI];// *
                        if (ind_i==0) r_Froth_i_S1M3[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S1M4")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S1M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S1M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S1M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S1M4[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S1M4[ind_i+ind_t*nbI] = r_Foth_i_S1M4[ind_i+ind_t*nbI] ;//*
                        if (ind_i==0) r_Froth_i_S1M4[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S2M1")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S2M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S2M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S2M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S2M1[ind_i+ind_t*nbI] = r_Foth_i_S2M1[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S2M2")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S2M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S2M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S2M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S2M2[ind_i+ind_t*nbI] = r_Foth_i_S2M2[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S2M3")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S2M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S2M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S2M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S2M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S2M3[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S2M3[ind_i+ind_t*nbI] = r_Foth_i_S2M3[ind_i+ind_t*nbI];// *
                        if (ind_i==0) r_Froth_i_S2M3[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S2M4")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S2M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S2M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S2M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S2M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S2M4[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S2M4[ind_i+ind_t*nbI] = r_Foth_i_S2M4[ind_i+ind_t*nbI];// *
                        if (ind_i==0) r_Froth_i_S2M4[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S3M1")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S3M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S3M1[ind_i+ind_t*nbI] = r_Foth_i_S3M1[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S3M2")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S3M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S3M2[ind_i+ind_t*nbI] = r_Foth_i_S3M2[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S3M3")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S3M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S3M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S3M3[ind_i+ind_t*nbI] = r_Foth_i_S3M3[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S3M4")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S3M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S3M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_Foth_i_S3M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Foth_i_S3M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_Foth_i_S3M4[ind_i+(ind_t+1)*nbI] = 0.0;}
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_Froth_i_S3M4[ind_i+ind_t*nbI] = r_Foth_i_S3M4[ind_i+ind_t*nbI];// *
                        if (ind_i==0) r_Froth_i_S3M4[ind_i+ind_t*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFothi_S4M1")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S4M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S4M1[ind_i+ind_t*nbI] = r_Foth_i_S4M1[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S4M2")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S4M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S4M2[ind_i+ind_t*nbI] = r_Foth_i_S4M2[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S4M3")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S4M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S4M3[ind_i+ind_t*nbI] = r_Foth_i_S4M3[ind_i+ind_t*nbI];// *

                       fothi = REAL(getListElement(elmt, "iniFothi_S4M4")) ; fothi2 = REAL(getListElement(elmt, "Fothi_S4M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M4[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_i_S4M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];
                       for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Froth_i_S4M4[ind_i+ind_t*nbI] = r_Foth_i_S4M4[ind_i+ind_t*nbI];// *



                       fothi = REAL(getListElement(elmt, "iniFLWothi_S1M1")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S1M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S1M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S1M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S1M2")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S1M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M2[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S1M2[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S1M2[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S1M3")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S1M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S1M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S1M3[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S1M4")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S1M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S1M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S1M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S1M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S2M1")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S2M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S2M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S2M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S2M2")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S2M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S2M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S2M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S2M3")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S2M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S2M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S2M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S2M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S2M3[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S2M4")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S2M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S2M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S2M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S2M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S2M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S3M1")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S3M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S3M2")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S3M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S3M3")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S3M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S3M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S3M4")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S3M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S3M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FRWToth_i_S3M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FRWToth_i_S3M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FRWToth_i_S3M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S4M1")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S4M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S4M2")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S4M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S4M3")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S4M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFLWothi_S4M4")) ; fothi2 = REAL(getListElement(elmt, "FLWothi_S4M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M4[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FRWToth_i_S4M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];



                       fothi = REAL(getListElement(elmt, "iniFDWothi_S1M1")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S1M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S1M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S1M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S1M2")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S1M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M2[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S1M2[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S1M2[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S1M3")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S1M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S1M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S1M3[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S1M4")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S1M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S1M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S1M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S1M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S2M1")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S2M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S2M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S2M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S2M2")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S2M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S2M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S2M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S2M3")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S2M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S2M3[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S2M3[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S2M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S2M3[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S2M4")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S2M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S2M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S2M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S2M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S2M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S3M1")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S3M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S3M2")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S3M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S3M3")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S3M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S3M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S3M4")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S3M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S3M4[ind_i+ind_t*nbI] = fothi[ind_i]; if (ind_i==0) r_FDWToth_i_S3M4[ind_i+ind_t*nbI] = 0.0;}
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {r_FDWToth_i_S3M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i]; if (ind_i==0) r_FDWToth_i_S3M4[ind_i+(ind_t+1)*nbI] = 0.0;}

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S4M1")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S4M1"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M1[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M1[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S4M2")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S4M2"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M2[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M2[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S4M3")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S4M3"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M3[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M3[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                       fothi = REAL(getListElement(elmt, "iniFDWothi_S4M4")) ; fothi2 = REAL(getListElement(elmt, "FDWothi_S4M4"));
                       if (ind_t==0) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M4[ind_i+ind_t*nbI] = fothi[ind_i];
                       if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_FDWToth_i_S4M4[ind_i+(ind_t+1)*nbI] = fothi2[ind_i];

                      }

                        //on n'oublie pas d'archiver dans eVar ce dont on aura besoin dans les itérations suivantes
                        if (Qvec[e]==0) SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 0, v_F_efmi2); //ESSENTIEL!!! : ne pas laisser d'indéfini en premier élément d'une liste ; il vaut mieux laisser la partie telle qu'initialisée
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 1, formatEff);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 2, v_Sr_e);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 3, v_d_efi);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 4, fFACT1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 5, fFACT2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 6, fFACT3);//Rprintf("SOURCE\n\n\n");//PrintValue(fFACT3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 7, fFACT4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 8, fFACT5);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 61, fFACT6);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 44, Foth_i);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 60, Froth_i);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 50, fFACTsup1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 51, fFACTsup2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 52, v_nbNav_f);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 53, v_nbds_f);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 100, v_F_efmi2_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 101, v_F_efmi2_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 102, v_F_efmi2_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 103, v_F_efmi2_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 104, v_F_efmi2_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 105, v_F_efmi2_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 106, v_F_efmi2_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 107, v_F_efmi2_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 108, v_F_efmi2_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 109, v_F_efmi2_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 110, v_F_efmi2_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 111, v_F_efmi2_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 112, v_F_efmi2_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 113, v_F_efmi2_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 114, v_F_efmi2_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 115, v_F_efmi2_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 116, Foth_i_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 117, Foth_i_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 118, Foth_i_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 119, Foth_i_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 120, Foth_i_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 121, Foth_i_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 122, Foth_i_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 123, Foth_i_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 124, Foth_i_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 125, Foth_i_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 126, Foth_i_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 127, Foth_i_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 128, Foth_i_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 129, Foth_i_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 130, Foth_i_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 131, Foth_i_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 132, Froth_i_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 133, Froth_i_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 134, Froth_i_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 135, Froth_i_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 136, Froth_i_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 137, Froth_i_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 138, Froth_i_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 139, Froth_i_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 140, Froth_i_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 141, Froth_i_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 142, Froth_i_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 143, Froth_i_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 144, Froth_i_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 145, Froth_i_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 146, Froth_i_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 147, Froth_i_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 160, v_FRWT_efmi2_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 161, v_FRWT_efmi2_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 162, v_FRWT_efmi2_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 163, v_FRWT_efmi2_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 164, v_FRWT_efmi2_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 165, v_FRWT_efmi2_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 166, v_FRWT_efmi2_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 167, v_FRWT_efmi2_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 168, v_FRWT_efmi2_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 169, v_FRWT_efmi2_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 170, v_FRWT_efmi2_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 171, v_FRWT_efmi2_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 172, v_FRWT_efmi2_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 173, v_FRWT_efmi2_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 174, v_FRWT_efmi2_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 175, v_FRWT_efmi2_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 176, FRWToth_i_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 177, FRWToth_i_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 178, FRWToth_i_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 179, FRWToth_i_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 180, FRWToth_i_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 181, FRWToth_i_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 182, FRWToth_i_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 183, FRWToth_i_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 184, FRWToth_i_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 185, FRWToth_i_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 186, FRWToth_i_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 187, FRWToth_i_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 188, FRWToth_i_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 189, FRWToth_i_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 190, FRWToth_i_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 191, FRWToth_i_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 192, v_FDWT_efmi2_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 193, v_FDWT_efmi2_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 194, v_FDWT_efmi2_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 195, v_FDWT_efmi2_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 196, v_FDWT_efmi2_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 197, v_FDWT_efmi2_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 198, v_FDWT_efmi2_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 199, v_FDWT_efmi2_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 200, v_FDWT_efmi2_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 201, v_FDWT_efmi2_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 202, v_FDWT_efmi2_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 203, v_FDWT_efmi2_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 204, v_FDWT_efmi2_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 205, v_FDWT_efmi2_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 206, v_FDWT_efmi2_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 207, v_FDWT_efmi2_S4M4);

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 208, FDWToth_i_S1M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 209, FDWToth_i_S1M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 210, FDWToth_i_S1M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 211, FDWToth_i_S1M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 212, FDWToth_i_S2M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 213, FDWToth_i_S2M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 214, FDWToth_i_S2M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 215, FDWToth_i_S2M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 216, FDWToth_i_S3M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 217, FDWToth_i_S3M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 218, FDWToth_i_S3M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 219, FDWToth_i_S3M4);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 220, FDWToth_i_S4M1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 221, FDWToth_i_S4M2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 222, FDWToth_i_S4M3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 223, FDWToth_i_S4M4);


                    //if (indP==1) UNPROTECT(1);
                    //Rprintf("K3\n");
                    if (Qvec[e]==1) {
                     UNPROTECT(65);
                     UNPROTECT(96);
                     UNPROTECT(96);
                    } else {
                     UNPROTECT(3);
                    }
                    UNPROTECT(31);
                    //UNPROTECT(34+94);
}

fUpdate = false;
//Rprintf("K4\n");
if (ind_t==0) UNPROTECT(1);
UNPROTECT(2);

} else {

for (int e = 0 ; e < nbE ; e++) {

//Rprintf("Mort20\n");

                    int nbI = length(VECTOR_ELT(namDC,e));

                    SEXP elmt;
                    PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));

                    double *r_Sr_e = REAL(getListElement(elmt, "sr"));
                    double *r_d_efi = REAL(getListElement(elmt, "d_i"));
                    double *r_doth_ei = REAL(getListElement(elmt, "doth_i"));
                    double *r_nbv_f, *r_nbds_f, *r_nbds2_f;
                    r_nbv_f = REAL(getListElement(Flist, "nbv_f_m"));
                    r_nbds_f = REAL(getListElement(Flist, "effort1_f_m"));
                    r_nbds2_f = REAL(getListElement(Flist, "effort2_f_m"));
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 4));//Rprintf("Mort20.1\n");//Rprintf("%i %i lgth",length(VECTOR_ELT(EVAR, 0)),length(VECTOR_ELT(EVAR, 1)));
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 5));//Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 6));//Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 7));//Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 61));//Rprintf("Mort20.5\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 50));//Rprintf("Mort20.6\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 51));//Rprintf("Mort20.7\n");
//Rprintf("MortZ0\n");
                    int *fFact1 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 4));//Rprintf("MortZ1\n");
                    int *fFact2 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 5));//Rprintf("MortZ2\n");//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, e), 6));
                    int *fFact3 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 6));//Rprintf("MortZ3\n");
                    int *fFact4 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 7));//Rprintf("MortZ4\n");
                    int *fFact6 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 61));//Rprintf("MortZ5\n");
                    int *fFactSup1 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 50));//Rprintf("MortZ6\n");
                    int *fFactSup2 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 51));//Rprintf("MortZ7\n");
//Rprintf("Mort21\n");
                    if (Qvec[e]==1) {

                    double *rans_11_S1M1 = REAL(VECTOR_ELT(out_F_fmi_S1M1, e));
                    double *rans_11_S1M2 = REAL(VECTOR_ELT(out_F_fmi_S1M2, e));
                    double *rans_11_S1M3 = REAL(VECTOR_ELT(out_F_fmi_S1M3, e));
                    double *rans_11_S1M4 = REAL(VECTOR_ELT(out_F_fmi_S1M4, e));
                    double *rans_11_S2M1 = REAL(VECTOR_ELT(out_F_fmi_S2M1, e));
                    double *rans_11_S2M2 = REAL(VECTOR_ELT(out_F_fmi_S2M2, e));
                    double *rans_11_S2M3 = REAL(VECTOR_ELT(out_F_fmi_S2M3, e));
                    double *rans_11_S2M4 = REAL(VECTOR_ELT(out_F_fmi_S2M4, e));
                    double *rans_11_S3M1 = REAL(VECTOR_ELT(out_F_fmi_S3M1, e));
                    double *rans_11_S3M2 = REAL(VECTOR_ELT(out_F_fmi_S3M2, e));
                    double *rans_11_S3M3 = REAL(VECTOR_ELT(out_F_fmi_S3M3, e));
                    double *rans_11_S3M4 = REAL(VECTOR_ELT(out_F_fmi_S3M4, e));
                    double *rans_11_S4M1 = REAL(VECTOR_ELT(out_F_fmi_S4M1, e));
                    double *rans_11_S4M2 = REAL(VECTOR_ELT(out_F_fmi_S4M2, e));
                    double *rans_11_S4M3 = REAL(VECTOR_ELT(out_F_fmi_S4M3, e));
                    double *rans_11_S4M4 = REAL(VECTOR_ELT(out_F_fmi_S4M4, e));

                    double *rans_11l_S1M1 = REAL(VECTOR_ELT(out_Fr_fmi_S1M1, e));
                    double *rans_11l_S1M2 = REAL(VECTOR_ELT(out_Fr_fmi_S1M2, e));
                    double *rans_11l_S1M3 = REAL(VECTOR_ELT(out_Fr_fmi_S1M3, e));
                    double *rans_11l_S1M4 = REAL(VECTOR_ELT(out_Fr_fmi_S1M4, e));
                    double *rans_11l_S2M1 = REAL(VECTOR_ELT(out_Fr_fmi_S2M1, e));
                    double *rans_11l_S2M2 = REAL(VECTOR_ELT(out_Fr_fmi_S2M2, e));
                    double *rans_11l_S2M3 = REAL(VECTOR_ELT(out_Fr_fmi_S2M3, e));
                    double *rans_11l_S2M4 = REAL(VECTOR_ELT(out_Fr_fmi_S2M4, e));
                    double *rans_11l_S3M1 = REAL(VECTOR_ELT(out_Fr_fmi_S3M1, e));
                    double *rans_11l_S3M2 = REAL(VECTOR_ELT(out_Fr_fmi_S3M2, e));
                    double *rans_11l_S3M3 = REAL(VECTOR_ELT(out_Fr_fmi_S3M3, e));
                    double *rans_11l_S3M4 = REAL(VECTOR_ELT(out_Fr_fmi_S3M4, e));
                    double *rans_11l_S4M1 = REAL(VECTOR_ELT(out_Fr_fmi_S4M1, e));
                    double *rans_11l_S4M2 = REAL(VECTOR_ELT(out_Fr_fmi_S4M2, e));
                    double *rans_11l_S4M3 = REAL(VECTOR_ELT(out_Fr_fmi_S4M3, e));
                    double *rans_11l_S4M4 = REAL(VECTOR_ELT(out_Fr_fmi_S4M4, e));

                    double *rans_FRWT_S1M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M1, e));
                    double *rans_FRWT_S1M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M2, e));
                    double *rans_FRWT_S1M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M3, e));
                    double *rans_FRWT_S1M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S1M4, e));
                    double *rans_FRWT_S2M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M1, e));
                    double *rans_FRWT_S2M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M2, e));
                    double *rans_FRWT_S2M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M3, e));
                    double *rans_FRWT_S2M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S2M4, e));
                    double *rans_FRWT_S3M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M1, e));
                    double *rans_FRWT_S3M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M2, e));
                    double *rans_FRWT_S3M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M3, e));
                    double *rans_FRWT_S3M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S3M4, e));
                    double *rans_FRWT_S4M1 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M1, e));
                    double *rans_FRWT_S4M2 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M2, e));
                    double *rans_FRWT_S4M3 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M3, e));
                    double *rans_FRWT_S4M4 = REAL(VECTOR_ELT(out_FRWT_fmi_S4M4, e));

                    double *rans_FDWT_S1M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M1, e));
                    double *rans_FDWT_S1M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M2, e));
                    double *rans_FDWT_S1M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M3, e));
                    double *rans_FDWT_S1M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S1M4, e));
                    double *rans_FDWT_S2M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M1, e));
                    double *rans_FDWT_S2M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M2, e));
                    double *rans_FDWT_S2M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M3, e));
                    double *rans_FDWT_S2M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S2M4, e));
                    double *rans_FDWT_S3M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M1, e));
                    double *rans_FDWT_S3M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M2, e));
                    double *rans_FDWT_S3M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M3, e));
                    double *rans_FDWT_S3M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S3M4, e));
                    double *rans_FDWT_S4M1 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M1, e));
                    double *rans_FDWT_S4M2 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M2, e));
                    double *rans_FDWT_S4M3 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M3, e));
                    double *rans_FDWT_S4M4 = REAL(VECTOR_ELT(out_FDWT_fmi_S4M4, e));

                    double *r_F_efmi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 100));
                    double *r_F_efmi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 101));
                    double *r_F_efmi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 102));
                    double *r_F_efmi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 103));
                    double *r_F_efmi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 104));
                    double *r_F_efmi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 105));
                    double *r_F_efmi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 106));
                    double *r_F_efmi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 107));
                    double *r_F_efmi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 108));
                    double *r_F_efmi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 109));
                    double *r_F_efmi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 110));
                    double *r_F_efmi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 111));
                    double *r_F_efmi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 112));
                    double *r_F_efmi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 113));
                    double *r_F_efmi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 114));
                    double *r_F_efmi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 115));

                    double *r_Foth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 116));
                    double *r_Foth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 117));
                    double *r_Foth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 118));
                    double *r_Foth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 119));
                    double *r_Foth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 120));
                    double *r_Foth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 121));
                    double *r_Foth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 122));
                    double *r_Foth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 123));
                    double *r_Foth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 124));
                    double *r_Foth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 125));
                    double *r_Foth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 126));
                    double *r_Foth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 127));
                    double *r_Foth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 128));
                    double *r_Foth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 129));
                    double *r_Foth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 130));
                    double *r_Foth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 131));

                    double *r_Froth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 132));
                    double *r_Froth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 133));
                    double *r_Froth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 134));
                    double *r_Froth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 135));
                    double *r_Froth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 136));
                    double *r_Froth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 137));
                    double *r_Froth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 138));
                    double *r_Froth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 139));
                    double *r_Froth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 140));
                    double *r_Froth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 141));
                    double *r_Froth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 142));
                    double *r_Froth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 143));
                    double *r_Froth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 144));
                    double *r_Froth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 145));
                    double *r_Froth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 146));
                    double *r_Froth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 147));

                    double *r_FRWT_efmi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 160));
                    double *r_FRWT_efmi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 161));
                    double *r_FRWT_efmi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 162));
                    double *r_FRWT_efmi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 163));
                    double *r_FRWT_efmi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 164));
                    double *r_FRWT_efmi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 165));
                    double *r_FRWT_efmi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 166));
                    double *r_FRWT_efmi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 167));
                    double *r_FRWT_efmi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 168));
                    double *r_FRWT_efmi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 169));
                    double *r_FRWT_efmi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 170));
                    double *r_FRWT_efmi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 171));
                    double *r_FRWT_efmi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 172));
                    double *r_FRWT_efmi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 173));
                    double *r_FRWT_efmi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 174));
                    double *r_FRWT_efmi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 175));

                    double *r_FRWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 176));
                    double *r_FRWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 177));
                    double *r_FRWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 178));
                    double *r_FRWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 179));
                    double *r_FRWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 180));
                    double *r_FRWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 181));
                    double *r_FRWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 182));
                    double *r_FRWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 183));
                    double *r_FRWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 184));
                    double *r_FRWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 185));
                    double *r_FRWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 186));
                    double *r_FRWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 187));
                    double *r_FRWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 188));
                    double *r_FRWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 189));
                    double *r_FRWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 190));
                    double *r_FRWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 191));

                    double *r_FDWT_efmi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 192));
                    double *r_FDWT_efmi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 193));
                    double *r_FDWT_efmi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 194));
                    double *r_FDWT_efmi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 195));
                    double *r_FDWT_efmi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 196));
                    double *r_FDWT_efmi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 197));
                    double *r_FDWT_efmi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 198));
                    double *r_FDWT_efmi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 199));
                    double *r_FDWT_efmi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 200));
                    double *r_FDWT_efmi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 201));
                    double *r_FDWT_efmi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 202));
                    double *r_FDWT_efmi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 203));
                    double *r_FDWT_efmi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 204));
                    double *r_FDWT_efmi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 205));
                    double *r_FDWT_efmi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 206));
                    double *r_FDWT_efmi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 207));

                    double *r_FDWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 208));
                    double *r_FDWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 209));
                    double *r_FDWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 210));
                    double *r_FDWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 211));
                    double *r_FDWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 212));
                    double *r_FDWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 213));
                    double *r_FDWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 214));
                    double *r_FDWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 215));
                    double *r_FDWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 216));
                    double *r_FDWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 217));
                    double *r_FDWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 218));
                    double *r_FDWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 219));
                    double *r_FDWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 220));
                    double *r_FDWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 221));
                    double *r_FDWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 222));
                    double *r_FDWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 223));

                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    rans_11_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_11_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_11_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_11_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];


                    rans_11l_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];

                    rans_11l_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        rans_11_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];



                    rans_FRWT_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

//if ((ind_t==1) & (ind_f==0)) {
//
//std::stringstream tstt1,tstt2,tstt3,tstt4,tstt5;
//tstt1 << r_FRWT_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]];
//tstt2 << r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]];
//tstt3 << r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
//tstt4 << r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
//tstt5 << rans_FRWT_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]];
//
//fichier2 << "detail_T1" << tstt1.str() << " " << tstt2.str() << " " << tstt3.str() << " " << tstt4.str() << " " << tstt5.str() << endl;
//
//}


                    rans_FRWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FRWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FRWT_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FRWT_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FRWT_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];



                    rans_FDWT_S1M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S1M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S1M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S1M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S1M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S1M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S1M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S1M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S2M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S2M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S2M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S2M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S2M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S2M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S2M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S2M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S3M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S3M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S3M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S3M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S3M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S3M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S3M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];
                    if (ind_i==0) rans_FDWT_S3M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] = 0.0;

                    rans_FDWT_S4M1[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S4M1[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S4M2[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S4M2[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S4M3[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S4M3[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    rans_FDWT_S4M4[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_FDWT_efmi_S4M4[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];

                    }

                    if (ind_t<(nbT-1)) for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                            r_Foth_it_S1M1[ind_i+(ind_t+1)*nbI] = r_Foth_it_S1M1[ind_i+ind_t*nbI];
                            r_Foth_it_S1M2[ind_i+(ind_t+1)*nbI] = r_Foth_it_S1M2[ind_i+ind_t*nbI];
                            r_Foth_it_S1M3[ind_i+(ind_t+1)*nbI] = r_Foth_it_S1M3[ind_i+ind_t*nbI];
                            r_Foth_it_S1M4[ind_i+(ind_t+1)*nbI] = r_Foth_it_S1M4[ind_i+ind_t*nbI];
                            r_Foth_it_S2M1[ind_i+(ind_t+1)*nbI] = r_Foth_it_S2M1[ind_i+ind_t*nbI];
                            r_Foth_it_S2M2[ind_i+(ind_t+1)*nbI] = r_Foth_it_S2M2[ind_i+ind_t*nbI];
                            r_Foth_it_S2M3[ind_i+(ind_t+1)*nbI] = r_Foth_it_S2M3[ind_i+ind_t*nbI];
                            r_Foth_it_S2M4[ind_i+(ind_t+1)*nbI] = r_Foth_it_S2M4[ind_i+ind_t*nbI];
                            r_Foth_it_S3M1[ind_i+(ind_t+1)*nbI] = r_Foth_it_S3M1[ind_i+ind_t*nbI];
                            r_Foth_it_S3M2[ind_i+(ind_t+1)*nbI] = r_Foth_it_S3M2[ind_i+ind_t*nbI];
                            r_Foth_it_S3M3[ind_i+(ind_t+1)*nbI] = r_Foth_it_S3M3[ind_i+ind_t*nbI];
                            r_Foth_it_S3M4[ind_i+(ind_t+1)*nbI] = r_Foth_it_S3M4[ind_i+ind_t*nbI];
                            r_Foth_it_S4M1[ind_i+(ind_t+1)*nbI] = r_Foth_it_S4M1[ind_i+ind_t*nbI];
                            r_Foth_it_S4M2[ind_i+(ind_t+1)*nbI] = r_Foth_it_S4M2[ind_i+ind_t*nbI];
                            r_Foth_it_S4M3[ind_i+(ind_t+1)*nbI] = r_Foth_it_S4M3[ind_i+ind_t*nbI];
                            r_Foth_it_S4M4[ind_i+(ind_t+1)*nbI] = r_Foth_it_S4M4[ind_i+ind_t*nbI];

                            r_FRWToth_it_S1M1[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S1M1[ind_i+ind_t*nbI];
                            r_FRWToth_it_S1M2[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S1M2[ind_i+ind_t*nbI];
                            r_FRWToth_it_S1M3[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S1M3[ind_i+ind_t*nbI];
                            r_FRWToth_it_S1M4[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S1M4[ind_i+ind_t*nbI];
                            r_FRWToth_it_S2M1[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S2M1[ind_i+ind_t*nbI];
                            r_FRWToth_it_S2M2[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S2M2[ind_i+ind_t*nbI];
                            r_FRWToth_it_S2M3[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S2M3[ind_i+ind_t*nbI];
                            r_FRWToth_it_S2M4[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S2M4[ind_i+ind_t*nbI];
                            r_FRWToth_it_S3M1[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S3M1[ind_i+ind_t*nbI];
                            r_FRWToth_it_S3M2[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S3M2[ind_i+ind_t*nbI];
                            r_FRWToth_it_S3M3[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S3M3[ind_i+ind_t*nbI];
                            r_FRWToth_it_S3M4[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S3M4[ind_i+ind_t*nbI];
                            r_FRWToth_it_S4M1[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S4M1[ind_i+ind_t*nbI];
                            r_FRWToth_it_S4M2[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S4M2[ind_i+ind_t*nbI];
                            r_FRWToth_it_S4M3[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S4M3[ind_i+ind_t*nbI];
                            r_FRWToth_it_S4M4[ind_i+(ind_t+1)*nbI] = r_FRWToth_it_S4M4[ind_i+ind_t*nbI];

                            r_FDWToth_it_S1M1[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S1M1[ind_i+ind_t*nbI];
                            r_FDWToth_it_S1M2[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S1M2[ind_i+ind_t*nbI];
                            r_FDWToth_it_S1M3[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S1M3[ind_i+ind_t*nbI];
                            r_FDWToth_it_S1M4[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S1M4[ind_i+ind_t*nbI];
                            r_FDWToth_it_S2M1[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S2M1[ind_i+ind_t*nbI];
                            r_FDWToth_it_S2M2[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S2M2[ind_i+ind_t*nbI];
                            r_FDWToth_it_S2M3[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S2M3[ind_i+ind_t*nbI];
                            r_FDWToth_it_S2M4[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S2M4[ind_i+ind_t*nbI];
                            r_FDWToth_it_S3M1[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S3M1[ind_i+ind_t*nbI];
                            r_FDWToth_it_S3M2[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S3M2[ind_i+ind_t*nbI];
                            r_FDWToth_it_S3M3[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S3M3[ind_i+ind_t*nbI];
                            r_FDWToth_it_S3M4[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S3M4[ind_i+ind_t*nbI];
                            r_FDWToth_it_S4M1[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S4M1[ind_i+ind_t*nbI];
                            r_FDWToth_it_S4M2[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S4M2[ind_i+ind_t*nbI];
                            r_FDWToth_it_S4M3[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S4M3[ind_i+ind_t*nbI];
                            r_FDWToth_it_S4M4[ind_i+(ind_t+1)*nbI] = r_FDWToth_it_S4M4[ind_i+ind_t*nbI];

                    }

                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                        r_Froth_it_S1M1[ind_i+ind_t*nbI] = r_Foth_it_S1M1[ind_i+ind_t*nbI];
                        r_Froth_it_S1M2[ind_i+ind_t*nbI] = r_Foth_it_S1M2[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S1M2[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S1M3[ind_i+ind_t*nbI] = r_Foth_it_S1M3[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S1M3[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S1M4[ind_i+ind_t*nbI] = r_Foth_it_S1M4[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S1M4[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S2M1[ind_i+ind_t*nbI] = r_Foth_it_S2M1[ind_i+ind_t*nbI];
                        r_Froth_it_S2M2[ind_i+ind_t*nbI] = r_Foth_it_S2M2[ind_i+ind_t*nbI];
                        r_Froth_it_S2M3[ind_i+ind_t*nbI] = r_Foth_it_S2M3[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S2M3[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S2M4[ind_i+ind_t*nbI] = r_Foth_it_S2M4[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S2M4[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S3M1[ind_i+ind_t*nbI] = r_Foth_it_S3M1[ind_i+ind_t*nbI];
                        r_Froth_it_S3M2[ind_i+ind_t*nbI] = r_Foth_it_S3M2[ind_i+ind_t*nbI];
                        r_Froth_it_S3M3[ind_i+ind_t*nbI] = r_Foth_it_S3M3[ind_i+ind_t*nbI];
                        r_Froth_it_S3M4[ind_i+ind_t*nbI] = r_Foth_it_S3M4[ind_i+ind_t*nbI];
                        if (ind_i==0) r_Froth_it_S3M4[ind_i+ind_t*nbI] = 0.0;
                        r_Froth_it_S4M1[ind_i+ind_t*nbI] = r_Foth_it_S4M1[ind_i+ind_t*nbI];
                        r_Froth_it_S4M2[ind_i+ind_t*nbI] = r_Foth_it_S4M2[ind_i+ind_t*nbI];
                        r_Froth_it_S4M3[ind_i+ind_t*nbI] = r_Foth_it_S4M3[ind_i+ind_t*nbI];
                        r_Froth_it_S4M4[ind_i+ind_t*nbI] = r_Foth_it_S4M4[ind_i+ind_t*nbI];

                    }

                    } else {

                    double *rans_11 = REAL(VECTOR_ELT(out_F_fmi, e));
                    double *rans_11l = REAL(VECTOR_ELT(out_Fr_fmi, e));
                    double *r_F_efmi = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 0));
                    double *r_Foth_it = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                    double *r_Froth_it = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 60));

                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    rans_11[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]]*
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]];


                    rans_11l[ind_f*fFact1[0] + ind_m*fFact1[1] + ind_i*fFact1[2] + ind_t*fFact1[3]] =
                        r_F_efmi[ind_f*fFact4[0] + ind_m*fFact4[1] + ind_i*fFact4[2] + ind_t*fFact4[3]] *
                        r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + ind_i*fFactSup1[2] + ind_t*fFactSup1[3]] *
                        r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]] *
                        r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + ind_i*fFactSup2[2] + ind_t*fFactSup2[3]] *
                        (1 - r_Sr_e[ind_f*fFact3[0] + ind_m*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                        r_d_efi[ind_f*fFact2[0] + ind_m*fFact2[1] + ind_i*fFact2[2] + ind_t*fFact2[3]]);

                    }

                    if (ind_t<(nbT-1)) {
                        if (FOTHoptim_use & (e==eTemp)) {
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_it[ind_i+(ind_t+1)*nbI] = FOTHoptim[ind_i+(ind_t+1)*nbI];
                        } else {
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) r_Foth_it[ind_i+(ind_t+1)*nbI] = r_Foth_it[ind_i+ind_t*nbI];   //à modifier quand on considèrera une mortalité "autres" variable
                        }
                    }

                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                        r_Froth_it[ind_i+ind_t*nbI] = r_Foth_it[ind_i+ind_t*nbI] *
                            (1 - r_Sr_e[0*fFact3[0] + 0*fFact3[1] + ind_i*fFact3[2] + ind_t*fFact3[3]] *
                            r_doth_ei[0*fFact6[0] + 0*fFact6[1] + ind_i*fFact6[2] + ind_t*fFact6[3]]);

                    }

//Rprintf("K5\n");
                UNPROTECT(1);
////Rprintf("Mort\n");//PrintValue(out_Fbar_et);
}
}
//Rprintf("K6\n");
UNPROTECT(1);

//fichier2.close();

}}










//------------------------------------------
// Module 'Dynamique de population' : 'out_F_fmi' = output de la fonction 'Mortalite' MAJ 27/09/2010 ajout de l'output SSB_et
//------------------------------------------

extern "C" {

void BioEcoPar::DynamicPop(SEXP list, int ind_t, SEXP EVAR, bool Reality) //Reality : si True, on appelle DynamicPop pour une vraie projection, sinon uniquement utilisé pour estimer TAC comme dans WG
                                                                           // ~ si True, arbitrage RecParamList VS MeanRec_Ftarg en faveur du premier (ie sinon, en faveur du deuxième)
{

////Rprintf("G0");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 5));//Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 6));//Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 7));//Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 61));//Rprintf("Mort20.5\n");

//ofstream fichier("C:\\Users\\mmerzere\\Desktop\\test2\\testDyn.txt", ios::out | ios::trunc);

if (dUpdate) {

    SEXP    elmt, dFACT1, dFACT2, dFACT3, dFACT4, dFACT5, dFACT6, dFACT7, dFACT8, dFACT9, dFACT10,
            dimCst1, dimCst2, dimCst3, dimCst4, Dim1, Dim2, Dim3, Dim4,
            dimCst_Fr_efmit, dimCst_M_ei, dimCst_w_ei, dimCst_N_ei0, dimCst_N_e0t, dimCst_mat_ei,
            intAge, v_Fr_efmit, v_F_efmit, v_M_ei, v_w_ei, v_N_ei0=R_NilValue, v_N_e0t=R_NilValue, v_mat_ei, v_Fbar,
            v_r=R_NilValue, v_K=R_NilValue, v_n=R_NilValue, v_B=R_NilValue;

    SEXP v_Fr_efmit_S1M1 = R_NilValue, v_Fr_efmit_S1M2 = R_NilValue, v_Fr_efmit_S1M3 = R_NilValue, v_Fr_efmit_S1M4 = R_NilValue,
         v_Fr_efmit_S2M1 = R_NilValue, v_Fr_efmit_S2M2 = R_NilValue, v_Fr_efmit_S2M3 = R_NilValue, v_Fr_efmit_S2M4 = R_NilValue,
         v_Fr_efmit_S3M1 = R_NilValue, v_Fr_efmit_S3M2 = R_NilValue, v_Fr_efmit_S3M3 = R_NilValue, v_Fr_efmit_S3M4 = R_NilValue,
         v_Fr_efmit_S4M1 = R_NilValue, v_Fr_efmit_S4M2 = R_NilValue, v_Fr_efmit_S4M3 = R_NilValue, v_Fr_efmit_S4M4 = R_NilValue,
         v_F_efmit_S1M1 = R_NilValue, v_F_efmit_S1M2 = R_NilValue, v_F_efmit_S1M3 = R_NilValue, v_F_efmit_S1M4 = R_NilValue,
         v_F_efmit_S2M1 = R_NilValue, v_F_efmit_S2M2 = R_NilValue, v_F_efmit_S2M3 = R_NilValue, v_F_efmit_S2M4 = R_NilValue,
         v_F_efmit_S3M1 = R_NilValue, v_F_efmit_S3M2 = R_NilValue, v_F_efmit_S3M3 = R_NilValue, v_F_efmit_S3M4 = R_NilValue,
         v_F_efmit_S4M1 = R_NilValue, v_F_efmit_S4M2 = R_NilValue, v_F_efmit_S4M3 = R_NilValue, v_F_efmit_S4M4 = R_NilValue,
         v_N_ei0_S1M1 = R_NilValue, v_N_ei0_S1M2 = R_NilValue, v_N_ei0_S1M3 = R_NilValue, v_N_ei0_S1M4 = R_NilValue,
         v_N_e0t_S1M1 = R_NilValue, v_N_e0t_S2M2 = R_NilValue, v_N_e0t_S3M3 = R_NilValue, v_N_e0t_S4M4 = R_NilValue,
         v_iniNt0q_S1M1 = R_NilValue, v_iniNt0q_S1M2 = R_NilValue, v_iniNt0q_S1M3 = R_NilValue, v_iniNt0q_S1M4 = R_NilValue,
         v_iniNt0q_S2M1 = R_NilValue, v_iniNt0q_S2M2 = R_NilValue, v_iniNt0q_S2M3 = R_NilValue, v_iniNt0q_S2M4 = R_NilValue,
         v_iniNt0q_S3M1 = R_NilValue, v_iniNt0q_S3M2 = R_NilValue, v_iniNt0q_S3M3 = R_NilValue, v_iniNt0q_S3M4 = R_NilValue,
         v_iniNt0q_S4M1 = R_NilValue, v_iniNt0q_S4M2 = R_NilValue, v_iniNt0q_S4M3 = R_NilValue, v_iniNt0q_S4M4 = R_NilValue,
         v_matwt_M1 = R_NilValue, v_matwt_M2 = R_NilValue, v_matwt_M3 = R_NilValue, v_matwt_M4 = R_NilValue;

    SEXP dimnames1=R_NilValue, dimnames2=R_NilValue, dimnames3=R_NilValue, dimnames4=R_NilValue, rnames_Esp=R_NilValue;

    int *dim_Fr_efmit, *dim_M_ei, *dim_w_ei, *dim_N_ei0, *dim_N_e0t, *dim_mat_ei, *dimC1, *dimC2, *dimC3, *dimC4, *dim1, *dim2, *dim3, *dim4, *fact4_D;
    int nbI;

    double *rans_Z_eit, *rans_N_eit, *rans_B_et, *rans_Fbar_et, *rans_SSB_et, *r_Fr_efmit,  *r_F_efmit, *r_Fbar, *r_M_ei, *r_w_ei,
                *r_N_ei0, *r_N_e0t, *r_mat_ei, *r_r, *r_K, *r_n, *r_B;

    double *rans_Z_eit_S1M1=&NA_REAL, *rans_Z_eit_S1M2=&NA_REAL, *rans_Z_eit_S1M3=&NA_REAL, *rans_Z_eit_S1M4=&NA_REAL,
           *rans_Z_eit_S2M1=&NA_REAL, *rans_Z_eit_S2M2=&NA_REAL, *rans_Z_eit_S2M3=&NA_REAL, *rans_Z_eit_S2M4=&NA_REAL,
           *rans_Z_eit_S3M1=&NA_REAL, *rans_Z_eit_S3M2=&NA_REAL, *rans_Z_eit_S3M3=&NA_REAL, *rans_Z_eit_S3M4=&NA_REAL,
           *rans_Z_eit_S4M1=&NA_REAL, *rans_Z_eit_S4M2=&NA_REAL, *rans_Z_eit_S4M3=&NA_REAL, *rans_Z_eit_S4M4=&NA_REAL,
           *rans_N_eit_S1M1=&NA_REAL, *rans_N_eit_S1M2=&NA_REAL, *rans_N_eit_S1M3=&NA_REAL, *rans_N_eit_S1M4=&NA_REAL,
           *rans_N_eit_S2M1=&NA_REAL, *rans_N_eit_S2M2=&NA_REAL, *rans_N_eit_S2M3=&NA_REAL, *rans_N_eit_S2M4=&NA_REAL,
           *rans_N_eit_S3M1=&NA_REAL, *rans_N_eit_S3M2=&NA_REAL, *rans_N_eit_S3M3=&NA_REAL, *rans_N_eit_S3M4=&NA_REAL,
           *rans_N_eit_S4M1=&NA_REAL, *rans_N_eit_S4M2=&NA_REAL, *rans_N_eit_S4M3=&NA_REAL, *rans_N_eit_S4M4=&NA_REAL,
           *r_Fr_efmit_S1M1=&NA_REAL, *r_Fr_efmit_S1M2=&NA_REAL, *r_Fr_efmit_S1M3=&NA_REAL, *r_Fr_efmit_S1M4=&NA_REAL,
           *r_Fr_efmit_S2M1=&NA_REAL, *r_Fr_efmit_S2M2=&NA_REAL, *r_Fr_efmit_S2M3=&NA_REAL, *r_Fr_efmit_S2M4=&NA_REAL,
           *r_Fr_efmit_S3M1=&NA_REAL, *r_Fr_efmit_S3M2=&NA_REAL, *r_Fr_efmit_S3M3=&NA_REAL, *r_Fr_efmit_S3M4=&NA_REAL,
           *r_Fr_efmit_S4M1=&NA_REAL, *r_Fr_efmit_S4M2=&NA_REAL, *r_Fr_efmit_S4M3=&NA_REAL, *r_Fr_efmit_S4M4=&NA_REAL,
           *r_F_efmit_S1M1=&NA_REAL, *r_F_efmit_S1M2=&NA_REAL, *r_F_efmit_S1M3=&NA_REAL, *r_F_efmit_S1M4=&NA_REAL,
           *r_F_efmit_S2M1=&NA_REAL, *r_F_efmit_S2M2=&NA_REAL, *r_F_efmit_S2M3=&NA_REAL, *r_F_efmit_S2M4=&NA_REAL,
           *r_F_efmit_S3M1=&NA_REAL, *r_F_efmit_S3M2=&NA_REAL, *r_F_efmit_S3M3=&NA_REAL, *r_F_efmit_S3M4=&NA_REAL,
           *r_F_efmit_S4M1=&NA_REAL, *r_F_efmit_S4M2=&NA_REAL, *r_F_efmit_S4M3=&NA_REAL, *r_F_efmit_S4M4=&NA_REAL,
//           *r_N_e0t_S1M1=&NA_REAL, *r_N_e0t_S2M2=&NA_REAL, *r_N_e0t_S3M3=&NA_REAL, *r_N_e0t_S4M4=&NA_REAL,
//           *r_N_ei0_S1M1=&NA_REAL, *r_N_ei0_S1M2=&NA_REAL, *r_N_ei0_S1M3=&NA_REAL, *r_N_ei0_S1M4=&NA_REAL,
           *r_iniNt0q_S1M1=&NA_REAL, *r_iniNt0q_S1M2=&NA_REAL, *r_iniNt0q_S1M3=&NA_REAL, *r_iniNt0q_S1M4=&NA_REAL,
           *r_iniNt0q_S2M1=&NA_REAL, *r_iniNt0q_S2M2=&NA_REAL, *r_iniNt0q_S2M3=&NA_REAL, *r_iniNt0q_S2M4=&NA_REAL,
           *r_iniNt0q_S3M1=&NA_REAL, *r_iniNt0q_S3M2=&NA_REAL, *r_iniNt0q_S3M3=&NA_REAL, *r_iniNt0q_S3M4=&NA_REAL,
           *r_iniNt0q_S4M1=&NA_REAL, *r_iniNt0q_S4M2=&NA_REAL, *r_iniNt0q_S4M3=&NA_REAL, *r_iniNt0q_S4M4=&NA_REAL,
           *r_matwt_M1=&NA_REAL, *r_matwt_M2=&NA_REAL, *r_matwt_M3=&NA_REAL, *r_matwt_M4=&NA_REAL;


    SEXP ans_Z_eit=R_NilValue, ans_N_eit=R_NilValue, ans_Fbar_et=R_NilValue, ans_B_et=R_NilValue, ans_SSB_et=R_NilValue;

    SEXP ans_Z_eit_S1M1=R_NilValue, ans_Z_eit_S1M2=R_NilValue, ans_Z_eit_S1M3=R_NilValue, ans_Z_eit_S1M4=R_NilValue,
         ans_Z_eit_S2M1=R_NilValue, ans_Z_eit_S2M2=R_NilValue, ans_Z_eit_S2M3=R_NilValue, ans_Z_eit_S2M4=R_NilValue,
         ans_Z_eit_S3M1=R_NilValue, ans_Z_eit_S3M2=R_NilValue, ans_Z_eit_S3M3=R_NilValue, ans_Z_eit_S3M4=R_NilValue,
         ans_Z_eit_S4M1=R_NilValue, ans_Z_eit_S4M2=R_NilValue, ans_Z_eit_S4M3=R_NilValue, ans_Z_eit_S4M4=R_NilValue,
         ans_N_eit_S1M1=R_NilValue, ans_N_eit_S1M2=R_NilValue, ans_N_eit_S1M3=R_NilValue, ans_N_eit_S1M4=R_NilValue,
         ans_N_eit_S2M1=R_NilValue, ans_N_eit_S2M2=R_NilValue, ans_N_eit_S2M3=R_NilValue, ans_N_eit_S2M4=R_NilValue,
         ans_N_eit_S3M1=R_NilValue, ans_N_eit_S3M2=R_NilValue, ans_N_eit_S3M3=R_NilValue, ans_N_eit_S3M4=R_NilValue,
         ans_N_eit_S4M1=R_NilValue, ans_N_eit_S4M2=R_NilValue, ans_N_eit_S4M3=R_NilValue, ans_N_eit_S4M4=R_NilValue;

    double fmax, sumWt;

if (ind_t==0) {


    //à t=0, préparation des outputs

    PROTECT(rnames_Esp = allocVector(STRSXP, nbE));

    setAttrib(out_Z_eit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Fbar_et, R_NamesSymbol, rnames_Esp);
    setAttrib(out_B_et, R_NamesSymbol, rnames_Esp);
    setAttrib(out_SSB_et, R_NamesSymbol, rnames_Esp);

    setAttrib(out_Z_eit_S1M1, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S1M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S1M3, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S1M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S2M1, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S2M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S2M3, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S2M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S3M1, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S3M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S3M3, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S3M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S4M1, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S4M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Z_eit_S4M3, R_NamesSymbol, rnames_Esp); setAttrib(out_Z_eit_S4M4, R_NamesSymbol, rnames_Esp);

    setAttrib(out_N_eit_S1M1, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S1M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S1M3, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S1M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S2M1, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S2M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S2M3, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S2M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S3M1, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S3M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S3M3, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S3M4, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S4M1, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S4M2, R_NamesSymbol, rnames_Esp);
    setAttrib(out_N_eit_S4M3, R_NamesSymbol, rnames_Esp); setAttrib(out_N_eit_S4M4, R_NamesSymbol, rnames_Esp);

}


for (int e = 0 ; e < nbE ; e++) {//Rprintf("G1one");fichier << "G1one" << endl;

                                    double *Ztemp = REAL(getListElement(ZtempList, CHAR(STRING_ELT(sppList,e))));
//fichier << "G2one" << endl;
                                    PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));//Rprintf("g1");fichier << "g1" << endl;
                                    PROTECT(intAge = getListElement(namDC, CHAR(STRING_ELT(sppList,e))));//Rprintf("g2");fichier << "g2" << endl;

                                    nbI = length(getListElement(elmt, "modI"));//Rprintf("g3");fichier << "g3" << endl;

                                    PROTECT(v_M_ei = getListElement(elmt, "M_i"));//Rprintf("g4");fichier << "g4" << endl;
                                    PROTECT(v_w_ei = getListElement(elmt, "wStock_i"));//Rprintf("g5");fichier << "g5" << endl;
                                    PROTECT(v_mat_ei = getListElement(elmt, "mat_i"));//Rprintf("g6");fichier << "g6" << endl;

                                    PROTECT(v_r = getListElement(elmt, "r"));//Rprintf("g4");   fichier << "g4" << endl;           //added SPiCT 19/07/2016
                                    PROTECT(v_K = getListElement(elmt, "K"));//Rprintf("g5");    fichier << "g5" << endl;          //
                                    PROTECT(v_n = getListElement(elmt, "n"));                              //
                                    PROTECT(v_B = getListElement(elmt, "B_i"));                            //

                             if (Qvec[e]==1) {
//PrintValue(out_Fr_fmi_S1M1);
                                    PROTECT(v_Fr_efmit = getListElement(out_Fr_fmi, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit = getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))));

                                    PROTECT(v_Fr_efmit_S1M1 = getListElement(out_Fr_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));//Rprintf("g7");fichier << "g7" << endl;
                                    PROTECT(v_Fr_efmit_S1M2 = getListElement(out_Fr_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));//Rprintf("g8");fichier << "g8" << endl;
                                    PROTECT(v_Fr_efmit_S1M3 = getListElement(out_Fr_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S1M4 = getListElement(out_Fr_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S2M1 = getListElement(out_Fr_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S2M2 = getListElement(out_Fr_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S2M3 = getListElement(out_Fr_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S2M4 = getListElement(out_Fr_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S3M1 = getListElement(out_Fr_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S3M2 = getListElement(out_Fr_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S3M3 = getListElement(out_Fr_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S3M4 = getListElement(out_Fr_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S4M1 = getListElement(out_Fr_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S4M2 = getListElement(out_Fr_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S4M3 = getListElement(out_Fr_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_Fr_efmit_S4M4 = getListElement(out_Fr_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));
//Rprintf("G1.1");fichier << "G1.1" << endl;
                                    PROTECT(v_F_efmit_S1M1 = getListElement(out_F_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S1M2 = getListElement(out_F_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S1M3 = getListElement(out_F_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S1M4 = getListElement(out_F_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S2M1 = getListElement(out_F_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S2M2 = getListElement(out_F_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S2M3 = getListElement(out_F_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S2M4 = getListElement(out_F_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S3M1 = getListElement(out_F_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S3M2 = getListElement(out_F_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S3M3 = getListElement(out_F_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S3M4 = getListElement(out_F_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S4M1 = getListElement(out_F_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S4M2 = getListElement(out_F_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S4M3 = getListElement(out_F_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit_S4M4 = getListElement(out_F_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));
//Rprintf("G1.2");fichier << "G1.2" << endl;
                                    PROTECT(v_N_ei0_S1M1 = getListElement(elmt, "Nt0_S1M1"));
                                    PROTECT(v_N_ei0_S1M2 = getListElement(elmt, "Nt0_S1M2"));
                                    PROTECT(v_N_ei0_S1M3 = getListElement(elmt, "Nt0_S1M3"));
                                    PROTECT(v_N_ei0_S1M4 = getListElement(elmt, "Nt0_S1M4"));

                                    PROTECT(v_N_e0t_S1M1 = getListElement(elmt, "Ni0_S1M1"));
                                    PROTECT(v_N_e0t_S2M2 = getListElement(elmt, "Ni0_S2M2"));
                                    PROTECT(v_N_e0t_S3M3 = getListElement(elmt, "Ni0_S3M3"));
                                    PROTECT(v_N_e0t_S4M4 = getListElement(elmt, "Ni0_S4M4"));

                                    PROTECT(v_iniNt0q_S1M1 = getListElement(elmt, "iniNt0q_S1M1"));
                                    PROTECT(v_iniNt0q_S1M2 = getListElement(elmt, "iniNt0q_S1M2"));
                                    PROTECT(v_iniNt0q_S1M3 = getListElement(elmt, "iniNt0q_S1M3"));
                                    PROTECT(v_iniNt0q_S1M4 = getListElement(elmt, "iniNt0q_S1M4"));
                                    PROTECT(v_iniNt0q_S2M1 = getListElement(elmt, "iniNt0q_S2M1"));
                                    PROTECT(v_iniNt0q_S2M2 = getListElement(elmt, "iniNt0q_S2M2"));
                                    PROTECT(v_iniNt0q_S2M3 = getListElement(elmt, "iniNt0q_S2M3"));
                                    PROTECT(v_iniNt0q_S2M4 = getListElement(elmt, "iniNt0q_S2M4"));
                                    PROTECT(v_iniNt0q_S3M1 = getListElement(elmt, "iniNt0q_S3M1"));
                                    PROTECT(v_iniNt0q_S3M2 = getListElement(elmt, "iniNt0q_S3M2"));
                                    PROTECT(v_iniNt0q_S3M3 = getListElement(elmt, "iniNt0q_S3M3"));
                                    PROTECT(v_iniNt0q_S3M4 = getListElement(elmt, "iniNt0q_S3M4"));
                                    PROTECT(v_iniNt0q_S4M1 = getListElement(elmt, "iniNt0q_S4M1"));
                                    PROTECT(v_iniNt0q_S4M2 = getListElement(elmt, "iniNt0q_S4M2"));
                                    PROTECT(v_iniNt0q_S4M3 = getListElement(elmt, "iniNt0q_S4M3"));
                                    PROTECT(v_iniNt0q_S4M4 = getListElement(elmt, "iniNt0q_S4M4"));

                                    PROTECT(v_matwt_M1 = getListElement(elmt, "matwt_M1"));
                                    PROTECT(v_matwt_M2 = getListElement(elmt, "matwt_M2"));
                                    PROTECT(v_matwt_M3 = getListElement(elmt, "matwt_M3"));
                                    PROTECT(v_matwt_M4 = getListElement(elmt, "matwt_M4"));  // ### +20

                                    PROTECT(dimCst_Fr_efmit = getAttrib(v_Fr_efmit_S1M1, install("DimCst")));
                                    PROTECT(dimCst_N_ei0 = getAttrib(v_N_ei0_S1M1, install("DimCst")));
                                    PROTECT(dimCst_N_e0t = getAttrib(v_N_e0t_S1M1, install("DimCst"))); //+36 PROTECT

                             }  else {

                                    PROTECT(v_Fr_efmit = getListElement(out_Fr_fmi, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_F_efmit = getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))));
                                    PROTECT(v_N_ei0 = getListElement(elmt, "N_it0"));
                                    PROTECT(v_N_e0t = getListElement(elmt, "N_i0t"));
//Rprintf("G1.3");fichier << "G1.3" << endl;
                                    PROTECT(dimCst_Fr_efmit = getAttrib(v_Fr_efmit, install("DimCst")));
                                    PROTECT(dimCst_N_ei0 = getAttrib(v_N_ei0, install("DimCst")));
                                    PROTECT(dimCst_N_e0t = getAttrib(v_N_e0t, install("DimCst")));
                             }


                                    PROTECT(v_Fbar = getListElement(elmt, "Fbar"));
                                    PROTECT(dimCst_M_ei = getAttrib(v_M_ei, install("DimCst")));
                                    PROTECT(dimCst_w_ei = getAttrib(v_w_ei, install("DimCst")));
                                    PROTECT(dimCst_mat_ei = getAttrib(v_mat_ei, install("DimCst")));

//Rprintf("G1.4");fichier << "G1.4" << endl;
                                    dim_M_ei = INTEGER(dimCst_M_ei);
                                    dim_w_ei = INTEGER(dimCst_w_ei);
                                    dim_mat_ei = INTEGER(dimCst_mat_ei);
                                    dim_N_ei0 = INTEGER(dimCst_N_ei0);
                                    dim_N_e0t = INTEGER(dimCst_N_e0t);

                            if (nbI>1) {
                                    //tests sur les dimensions (pas pour SPiCT) :

                                    if ((dim_M_ei[0]!=0) | (dim_M_ei[1]!=0) |
                                        ((dim_M_ei[2]!=0) & (dim_M_ei[2]!=nbI)) | ((dim_M_ei[3]!=0) & (dim_M_ei[3]!=nbT))) //on laisse une ouverture pour un indice temporel
                                    {
                                        error("Non_homogeneous dimensions in M_ei element. Check .ini biological parameters files !!\n");
                                    }


                                    if ((dim_w_ei[0]!=0) | (dim_w_ei[1]!=0) |
                                        ((dim_w_ei[2]!=0) & (dim_w_ei[2]!=nbI)) | (dim_w_ei[3]!=0))
                                    {
                                        error("Non_homogeneous dimensions in w_ei element. Check .ini biological parameters files !!\n");
                                    }


                                    if ((dim_mat_ei[0]!=0) | (dim_mat_ei[1]!=0) |
                                        ((dim_mat_ei[2]!=0) & (dim_mat_ei[2]!=nbI)) | (dim_mat_ei[3]!=0))
                                    {
                                        error("Non_homogeneous dimensions in mat_ei element. Check .ini biological parameters files !!\n");
                                    }


                                    if ((dim_N_ei0[0]!=0) | (dim_N_ei0[1]!=0) |
                                        ((dim_N_ei0[2]!=0) & (dim_N_ei0[2]!=nbI))) // | (dim_N_ei0[3]!=0)) --> peu importe, on ne prendra de toute façon que la donnée à t0
                                    {
                                        error("Non_homogeneous dimensions in N_ei0 element. Check .ini biological parameters files !!\n");
                                    }


                                    if ((dim_N_e0t[0]!=0) | (dim_N_e0t[1]!=0) |
                                        (dim_N_e0t[2]!=0) | ((dim_N_e0t[3]!=0) & (dim_N_e0t[3]!=nbT)))
                                    {
                                        error("Non_homogeneous dimensions in N_e0t element. Check .ini biological parameters files !!\n");
                                    }

                            }

                                    dim_Fr_efmit = INTEGER(dimCst_Fr_efmit);
                                    if (((dim_Fr_efmit[0]!=0) & (dim_Fr_efmit[0]!=nbF)) | ((dim_Fr_efmit[1]!=0) & (dim_Fr_efmit[1]!=nbM)) |
                                        ((dim_Fr_efmit[2]!=0) & (dim_Fr_efmit[2]!=nbI)) | ((dim_Fr_efmit[3]!=0) & (dim_Fr_efmit[3]!=nbT)))
                                    {
                                        error("Non_homogeneous dimensions in Fr_efmit element. Check .ini biological parameters files !!\n");
                                    }

                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////

                                    //---------
                                    // initialisation de out_Z_eit
                                    //---------
//Rprintf("G1.5");fichier << "G1.5" << endl;
                                    //on détermine l'attribut Dimension de Z_eit
                                    PROTECT(dimCst1 = allocVector(INTSXP, 4));
                                    dimC1 = INTEGER(dimCst1);
                                    dimC1[0] = 0 ; dimC1[1] = 0 ; dimC1[2] = imax2(dim_M_ei[2] , dim_Fr_efmit[2]);
                                    dimC1[3] = imax2(dim_M_ei[3] , dim_Fr_efmit[3]);
                                    //Rprintf("Fr %i %i %i %i",dim_Fr_efmit[0],dim_Fr_efmit[1],dim_Fr_efmit[2],dim_Fr_efmit[3]);
                                    //Rprintf("M %i %i %i %i",dim_M_ei[0],dim_M_ei[1],dim_M_ei[2],dim_M_ei[3]);
                                    //Rprintf("C1 %i %i %i %i",dimC1[0],dimC1[1],dimC1[2],dimC1[3]);

                                    int count = 0, prod = 1, count2 = 0, count3 = 0, count4 = 0;

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC1[k]>0) {
                                            count++;
                                            prod = prod * dimC1[k];
                                        }
                                    }
//Rprintf("G1.6");fichier << "G1.6" << endl;
                                    PROTECT(Dim1 = allocVector(INTSXP, count));//Rprintf("G1.61");
                                    dim1 = INTEGER(Dim1);//Rprintf("G1.62");

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC1[k]>0) {
                                            dim1[count2] = dimC1[k];
                                            count2++;
                                            }
                                    }
//Rprintf("G1.63");//Rprintf("%i ",prod);fichier << "G1.63" << endl;
                            if (ind_t==0){
                                    //on crée le tableau résultat pour l'espèce en question
                                    PROTECT(ans_Z_eit = NEW_NUMERIC(prod));//Rprintf("G1.64");fichier << "G1.64" << endl;
                                    setAttrib(ans_Z_eit, R_DimSymbol, Dim1);//Rprintf("G1.65");fichier << "G1.65" << endl;
//Rprintf("G1.7");fichier << "G1.7" << endl;
                                    if (Qvec[e]==1) {

                                    PROTECT(ans_Z_eit_S1M1 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S1M1, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S1M2 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S1M2, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S1M3 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S1M3, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S1M4 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S1M4, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S2M1 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S2M1, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S2M2 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S2M2, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S2M3 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S2M3, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S2M4 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S2M4, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S3M1 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S3M1, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S3M2 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S3M2, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S3M3 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S3M3, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S3M4 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S3M4, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S4M1 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S4M1, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S4M2 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S4M2, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S4M3 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S4M3, R_DimSymbol, Dim1);
                                    PROTECT(ans_Z_eit_S4M4 = NEW_NUMERIC(prod)); setAttrib(ans_Z_eit_S4M4, R_DimSymbol, Dim1);

                                    }
//Rprintf("G1.8");fichier << "G1.8" << endl;
                                    PROTECT(dimnames1 = allocVector(VECSXP,count));
                                    if (dimC1[0]>0) {SET_VECTOR_ELT(dimnames1, count3, fleetList) ; count3++;}
                                    if (dimC1[1]>0) {SET_VECTOR_ELT(dimnames1, count3, metierList) ; count3++;}
                                    if (dimC1[2]>0) {SET_VECTOR_ELT(dimnames1, count3, intAge) ; count3++;}
                                    if (dimC1[3]>0) {SET_VECTOR_ELT(dimnames1, count3, times) ; count3++;}

                                    rans_Z_eit = REAL(ans_Z_eit);

                                    if (Qvec[e]==1) {

                                    rans_Z_eit_S1M1 = REAL(ans_Z_eit_S1M1); rans_Z_eit_S1M2 = REAL(ans_Z_eit_S1M2);
                                    rans_Z_eit_S1M3 = REAL(ans_Z_eit_S1M3); rans_Z_eit_S1M4 = REAL(ans_Z_eit_S1M4);
                                    rans_Z_eit_S2M1 = REAL(ans_Z_eit_S2M1); rans_Z_eit_S2M2 = REAL(ans_Z_eit_S2M2);
                                    rans_Z_eit_S2M3 = REAL(ans_Z_eit_S2M3); rans_Z_eit_S2M4 = REAL(ans_Z_eit_S2M4);
                                    rans_Z_eit_S3M1 = REAL(ans_Z_eit_S3M1); rans_Z_eit_S3M2 = REAL(ans_Z_eit_S3M2);
                                    rans_Z_eit_S3M3 = REAL(ans_Z_eit_S3M3); rans_Z_eit_S3M4 = REAL(ans_Z_eit_S3M4);
                                    rans_Z_eit_S4M1 = REAL(ans_Z_eit_S4M1); rans_Z_eit_S4M2 = REAL(ans_Z_eit_S4M2);
                                    rans_Z_eit_S4M3 = REAL(ans_Z_eit_S4M3); rans_Z_eit_S4M4 = REAL(ans_Z_eit_S4M4);
//Rprintf("G1.9");fichier << "G1.9" << endl;
                                    }

                            } else {

                                    rans_Z_eit = REAL(VECTOR_ELT(out_Z_eit, e));

                                    if (Qvec[e]==1) {

                                    rans_Z_eit_S1M1 = REAL(VECTOR_ELT(out_Z_eit_S1M1, e)); rans_Z_eit_S1M2 = REAL(VECTOR_ELT(out_Z_eit_S1M2, e));
                                    rans_Z_eit_S1M3 = REAL(VECTOR_ELT(out_Z_eit_S1M3, e)); rans_Z_eit_S1M4 = REAL(VECTOR_ELT(out_Z_eit_S1M4, e));
                                    rans_Z_eit_S2M1 = REAL(VECTOR_ELT(out_Z_eit_S2M1, e)); rans_Z_eit_S2M2 = REAL(VECTOR_ELT(out_Z_eit_S2M2, e));
                                    rans_Z_eit_S2M3 = REAL(VECTOR_ELT(out_Z_eit_S2M3, e)); rans_Z_eit_S2M4 = REAL(VECTOR_ELT(out_Z_eit_S2M4, e));
                                    rans_Z_eit_S3M1 = REAL(VECTOR_ELT(out_Z_eit_S3M1, e)); rans_Z_eit_S3M2 = REAL(VECTOR_ELT(out_Z_eit_S3M2, e));
                                    rans_Z_eit_S3M3 = REAL(VECTOR_ELT(out_Z_eit_S3M3, e)); rans_Z_eit_S3M4 = REAL(VECTOR_ELT(out_Z_eit_S3M4, e));
                                    rans_Z_eit_S4M1 = REAL(VECTOR_ELT(out_Z_eit_S4M1, e)); rans_Z_eit_S4M2 = REAL(VECTOR_ELT(out_Z_eit_S4M2, e));
                                    rans_Z_eit_S4M3 = REAL(VECTOR_ELT(out_Z_eit_S4M3, e)); rans_Z_eit_S4M4 = REAL(VECTOR_ELT(out_Z_eit_S4M4, e));

                                    }

                            }
//Rprintf("G1.10");fichier << "G1.10" << endl;

    if (Qvec[e]==0) {
//Rprintf("G1.10.1");fichier << "G1.10.1" << endl;
                                    r_Fr_efmit = REAL(v_Fr_efmit);
                                    r_F_efmit = REAL(v_F_efmit);
                                    r_M_ei = REAL(v_M_ei);
                                    r_Fbar = REAL(v_Fbar);
//Rprintf("G1.10.2");fichier << "G1.10.2" << endl;
                                    //facteurs des indices
                                    PROTECT(dFACT1 = iDim(dimC1));
                                    PROTECT(dFACT2 = iDim(dim_Fr_efmit));
                                    PROTECT(dFACT3 = iDim(dim_M_ei));

                                    int *fact1_D = INTEGER(dFACT1);
                                    int *fact2_D = INTEGER(dFACT2);
                                    int *fact3_D = INTEGER(dFACT3);
//Rprintf("G1.10.3");fichier << "G1.10.3" << endl;
                                    double *r_Froth_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 60));

                                    fmax = 0.0; sumWt = 0.0;
//Rprintf("G1.10.4");fichier << "G1.10.4" << endl;
                                    //équation
                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                        double temp = 0.0, tempCap = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                            temp = temp +  r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        if (!ISNA(r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                            tempCap = tempCap +  r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];

                                        }

                                    if (Zoptim_use & (e==eTemp)) {

                                     rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                        Zoptim[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
//Rprintf("G1.11");fichier << "G1.11" << endl;

                                    } else {

                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i[ind_i + nbI*ind_t];

                                           //on initialise aussi Ztemp (attention : indexé à partir de 1)

                                           //if (e==eTemp) Ztemp[ind_i+1] = rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        }

                                        Ztemp[ind_i] = rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                    }

                                    //on en profite pour calculer Fbar

                                    fmax = fmax + (temp + r_Froth_i[ind_i + nbI*ind_t])*r_Fbar[ind_i];
                                    sumWt = sumWt + r_Fbar[ind_i];

                                    }


                            if (ind_t==0) {

                                    setAttrib(ans_Z_eit, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit, install("DimCst"), dimCst1);

                                    SET_VECTOR_ELT(out_Z_eit, e, ans_Z_eit);

                            }

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 9, dimCst_Fr_efmit);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 10, v_Fr_efmit);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 11, v_M_ei);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 12, dFACT1);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 13, dFACT2);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 14, dFACT3);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 59, v_Fbar);

//Rprintf("G1.12");fichier << "G1.12" << endl;

                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////

                                    //---------
                                    // calcul de N_eit
                                    //---------

                                    //on détermine l'attribut Dimension de N_eit
                                    PROTECT(dimCst2 = allocVector(INTSXP, 4));
                                    dimC2 = INTEGER(dimCst2);

                                    dimC2[0] = 0 ; dimC2[1] = 0 ; dimC2[2] = imax2(dimC1[2] , dim_N_ei0[2]) ; dimC2[3] = nbT;

                                    count = 0 ; prod = 1 ; count2 = 0 ; count3 = 0;

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC2[k]>0) {
                                            count++;
                                            prod = prod * dimC2[k];
                                        }
                                    }

                                    PROTECT(Dim2 = allocVector(INTSXP, count));
                                    dim2 = INTEGER(Dim2);

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC2[k]>0) {
                                            dim2[count2] = dimC2[k];
                                            count2++;
                                            }
                                    }

//Rprintf("G1.13");fichier << "G1.13" << endl;
                            if (ind_t==0) {

                                    //on crée le tableau résultat pour l'espèce en question
                                    PROTECT(ans_N_eit = NEW_NUMERIC(prod));
                                    setAttrib(ans_N_eit, R_DimSymbol, Dim2);

                                    PROTECT(dimnames2 = allocVector(VECSXP,count));
                                    if (dimC2[0]>0) {SET_VECTOR_ELT(dimnames2, count3, fleetList) ; count3++;}
                                    if (dimC2[1]>0) {SET_VECTOR_ELT(dimnames2, count3, metierList) ; count3++;}
                                    if (dimC2[2]>0) {SET_VECTOR_ELT(dimnames2, count3, intAge) ; count3++;}
                                    if (dimC2[3]>0) {SET_VECTOR_ELT(dimnames2, count3, times) ; count3++;}

                                    rans_N_eit = REAL(ans_N_eit);

                            } else {

                                    rans_N_eit = REAL(VECTOR_ELT(out_N_eit, e));

                            }

                                    r_N_ei0 = REAL(v_N_ei0);

                                    r_N_e0t = REAL(v_N_e0t);


                                    //facteurs des indices
                                    PROTECT(dFACT4 = iDim(dimC2));
                                    PROTECT(dFACT5 = iDim(dim_N_ei0));
                                    PROTECT(dFACT6 = iDim(dim_N_e0t));

                                    fact4_D = INTEGER(dFACT4);
                                    int *fact5_D = INTEGER(dFACT5);
                                    int *fact6_D = INTEGER(dFACT6);


                                    //ajout 24/04/2018 pour prise en compte forçage recrutement XSA
                                    if ((!isNull(getListElement(recList,CHAR(STRING_ELT(sppList,e))))) & (ind_t>0) & (nbI>1) & Reality) {
                                       SRInd[e]=0;     //on n'utilise alors pas l'information de l'objet Args
                                       r_N_e0t[ind_t*fact6_D[3]] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[ind_t];
                                       if (ind_t<(nbT-1)) r_N_e0t[ind_t*fact6_D[3]+1] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[ind_t+1];
                                    }



                                    //équation

                                        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                            if (ind_i == 0) { //recrutement

                                                if ((SRInd[e]==1) & (ind_t>0)) {

                                                    if (!ISNA(REAL(VECTOR_ELT(out_SRmod,e))[ind_t])) {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                            REAL(VECTOR_ELT(out_SRmod,e))[ind_t];

                                                    } else {

                                                     if (ISNA(r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]])) {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]]; //seul instant initial défini

                                                    } else {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]];

                                                    }}
//Rprintf("G1.14");fichier << "G1.14" << endl;

                                                } else {

                                                    if (ISNA(r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]])) {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]]; //seul instant initial défini

                                                    } else {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]];

                                                    }
                                                }

                                            } else {

                                                if (ind_t == 0) {

                                                    rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                      r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + ind_t*fact5_D[3]];

                                                } else {

                                                    if (ind_i == (nbI-1)) {  //groupe d'âge +

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                          exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]) +
                                                          rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                          exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]);

                                                    } else {

                                                        rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                          rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                          exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]);

                                                    }
                                                }
                                            }
                                    }


                            if (ind_t==0) {

                                    setAttrib(ans_N_eit, R_DimNamesSymbol, dimnames2);
                                    setAttrib(ans_N_eit, install("DimCst"), dimCst2);

                                    SET_VECTOR_ELT(out_N_eit, e, ans_N_eit);

                            }

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 15, v_N_ei0);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 16, v_N_e0t);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 17, dFACT4);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 18, dFACT5);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 19, dFACT6);



    } else {

//Rprintf("G1.14.1");fichier << "G1.14.1" << endl;
                                    r_Fr_efmit = REAL(v_Fr_efmit);
                                    r_F_efmit = REAL(v_F_efmit);//Rprintf("G1.14.2");
//Rprintf("G1.15");fichier << "G1.15" << endl;
                                    r_Fr_efmit_S1M1 = REAL(v_Fr_efmit_S1M1);  r_Fr_efmit_S1M2 = REAL(v_Fr_efmit_S1M2);
                                    r_Fr_efmit_S1M3 = REAL(v_Fr_efmit_S1M3);  r_Fr_efmit_S1M4 = REAL(v_Fr_efmit_S1M4);
                                    r_Fr_efmit_S2M1 = REAL(v_Fr_efmit_S2M1);  r_Fr_efmit_S2M2 = REAL(v_Fr_efmit_S2M2);
                                    r_Fr_efmit_S2M3 = REAL(v_Fr_efmit_S2M3);  r_Fr_efmit_S2M4 = REAL(v_Fr_efmit_S2M4);
                                    r_Fr_efmit_S3M1 = REAL(v_Fr_efmit_S3M1);  r_Fr_efmit_S3M2 = REAL(v_Fr_efmit_S3M2);
                                    r_Fr_efmit_S3M3 = REAL(v_Fr_efmit_S3M3);  r_Fr_efmit_S3M4 = REAL(v_Fr_efmit_S3M4);
                                    r_Fr_efmit_S4M1 = REAL(v_Fr_efmit_S4M1);  r_Fr_efmit_S4M2 = REAL(v_Fr_efmit_S4M2);
                                    r_Fr_efmit_S4M3 = REAL(v_Fr_efmit_S4M3);  r_Fr_efmit_S4M4 = REAL(v_Fr_efmit_S4M4);
//Rprintf("G1.16");fichier << "G1.16" << endl;
                                    r_F_efmit_S1M1 = REAL(v_F_efmit_S1M1);  r_F_efmit_S1M2 = REAL(v_F_efmit_S1M2);
                                    r_F_efmit_S1M3 = REAL(v_F_efmit_S1M3);  r_F_efmit_S1M4 = REAL(v_F_efmit_S1M4);
                                    r_F_efmit_S2M1 = REAL(v_F_efmit_S2M1);  r_F_efmit_S2M2 = REAL(v_F_efmit_S2M2);
                                    r_F_efmit_S2M3 = REAL(v_F_efmit_S2M3);  r_F_efmit_S2M4 = REAL(v_F_efmit_S2M4);
                                    r_F_efmit_S3M1 = REAL(v_F_efmit_S3M1);  r_F_efmit_S3M2 = REAL(v_F_efmit_S3M2);
                                    r_F_efmit_S3M3 = REAL(v_F_efmit_S3M3);  r_F_efmit_S3M4 = REAL(v_F_efmit_S3M4);
                                    r_F_efmit_S4M1 = REAL(v_F_efmit_S4M1);  r_F_efmit_S4M2 = REAL(v_F_efmit_S4M2);
                                    r_F_efmit_S4M3 = REAL(v_F_efmit_S4M3);  r_F_efmit_S4M4 = REAL(v_F_efmit_S4M4);
//Rprintf("G1.17");fichier << "G1.17" << endl;
                                    r_M_ei = REAL(v_M_ei);
                                    r_Fbar = REAL(v_Fbar);
//Rprintf("G1.18");fichier << "G1.18" << endl;
                                    //facteurs des indices
                                    PROTECT(dFACT1 = iDim(dimC1));
                                    PROTECT(dFACT2 = iDim(dim_Fr_efmit));
                                    PROTECT(dFACT3 = iDim(dim_M_ei));

                                    int *fact1_D = INTEGER(dFACT1);
                                    int *fact2_D = INTEGER(dFACT2);
                                    int *fact3_D = INTEGER(dFACT3);

                                    double *r_Foth_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                                    double *r_Froth_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 60));
//Rprintf("G1.19");fichier << "G1.19" << endl;
                                    double *r_Foth_i_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 116));
                                    double *r_Foth_i_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 117));
                                    double *r_Foth_i_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 118));
                                    double *r_Foth_i_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 119));
                                    double *r_Foth_i_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 120));
                                    double *r_Foth_i_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 121));
                                    double *r_Foth_i_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 122));
                                    double *r_Foth_i_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 123));
                                    double *r_Foth_i_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 124));
                                    double *r_Foth_i_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 125));
                                    double *r_Foth_i_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 126));
                                    double *r_Foth_i_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 127));
                                    double *r_Foth_i_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 128));
                                    double *r_Foth_i_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 129));
                                    double *r_Foth_i_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 130));
                                    double *r_Foth_i_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 131));
//Rprintf("G1.20");fichier << "G1.20" << endl;
                                    double *r_Froth_i_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 132));
                                    double *r_Froth_i_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 133));
                                    double *r_Froth_i_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 134));
                                    double *r_Froth_i_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 135));
                                    double *r_Froth_i_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 136));
                                    double *r_Froth_i_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 137));
                                    double *r_Froth_i_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 138));
                                    double *r_Froth_i_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 139));
                                    double *r_Froth_i_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 140));
                                    double *r_Froth_i_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 141));
                                    double *r_Froth_i_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 142));
                                    double *r_Froth_i_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 143));
                                    double *r_Froth_i_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 144));
                                    double *r_Froth_i_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 145));
                                    double *r_Froth_i_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 146));
                                    double *r_Froth_i_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 147));
//Rprintf("G1.21");fichier << "G1.21" << endl;
                                    //équation
                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                        double temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M1[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S1M1 -> 0

                                        //if (e==eTemp) Ztemp[ind_i+1+(0*nbI)] = rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(0*nbI)] = rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M2[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S1M2 -> 1

                                        //if (e==eTemp) Ztemp[ind_i+1+(1*nbI)] = rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(1*nbI)] = rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M3[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S1M3 -> 2

                                        //if (e==eTemp) Ztemp[ind_i+1+(2*nbI)] = rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(2*nbI)] = rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M4[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S1M4 -> 3

                                        //if (e==eTemp) Ztemp[ind_i+1+(3*nbI)] = rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(3*nbI)] = rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M1[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S2M1 -> 4

                                        //if (e==eTemp) Ztemp[ind_i+1+(4*nbI)] = rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(4*nbI)] = rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M2[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S2M2 -> 5

                                        //if (e==eTemp) Ztemp[ind_i+1+(5*nbI)] = rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(5*nbI)] = rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M3[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S2M3 -> 6

                                        //if (e==eTemp) Ztemp[ind_i+1+(6*nbI)] = rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(6*nbI)] = rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M4[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S2M4 -> 7

                                        //if (e==eTemp) Ztemp[ind_i+1+(7*nbI)] = rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(7*nbI)] = rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M1[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S3M1 -> 8

                                        //if (e==eTemp) Ztemp[ind_i+1+(8*nbI)] = rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(8*nbI)] = rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M2[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S3M2 -> 9

                                        //if (e==eTemp) Ztemp[ind_i+1+(9*nbI)] = rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(9*nbI)] = rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M3[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S3M3 -> 10

                                        //if (e==eTemp) Ztemp[ind_i+1+(10*nbI)] = rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(10*nbI)] = rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M4[ind_i + nbI*ind_t];
                                          if (ind_i==0) rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S3M4 -> 11

                                        //if (e==eTemp) Ztemp[ind_i+1+(11*nbI)] = rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(11*nbI)] = rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M1[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S4M1 -> 12

                                        //if (e==eTemp) Ztemp[ind_i+1+(12*nbI)] = rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(12*nbI)] = rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M2[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S4M2 -> 13

                                        //if (e==eTemp) Ztemp[ind_i+1+(13*nbI)] = rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(13*nbI)] = rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M3[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S4M3 -> 14

                                        //if (e==eTemp) Ztemp[ind_i+1+(14*nbI)] = rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(14*nbI)] = rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M4[ind_i + nbI*ind_t];
                                        }

                                        //on initialise aussi Ztemp (attention : indexé à partir de 1) : S4M4 -> 15

                                        //if (e==eTemp) Ztemp[ind_i+1+(15*nbI)] = rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];
                                        Ztemp[ind_i+(15*nbI)] = rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];

                                    }


                              if (ind_t==0) {

                                    setAttrib(ans_Z_eit_S1M1, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S1M2, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S1M3, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S1M4, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S2M1, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S2M2, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S2M3, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S2M4, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S3M1, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S3M2, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S3M3, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S3M4, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S4M1, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S4M2, R_DimNamesSymbol, dimnames1);
                                    setAttrib(ans_Z_eit_S4M3, R_DimNamesSymbol, dimnames1); setAttrib(ans_Z_eit_S4M4, R_DimNamesSymbol, dimnames1);

                                    setAttrib(ans_Z_eit_S1M1, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S1M2, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S1M3, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S1M4, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S2M1, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S2M2, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S2M3, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S2M4, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S3M1, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S3M2, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S3M3, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S3M4, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S4M1, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S4M2, install("DimCst"), dimCst1);
                                    setAttrib(ans_Z_eit_S4M3, install("DimCst"), dimCst1); setAttrib(ans_Z_eit_S4M4, install("DimCst"), dimCst1);

                                    SET_VECTOR_ELT(out_Z_eit_S1M1, e, ans_Z_eit_S1M1); SET_VECTOR_ELT(out_Z_eit_S1M2, e, ans_Z_eit_S1M2);
                                    SET_VECTOR_ELT(out_Z_eit_S1M3, e, ans_Z_eit_S1M3); SET_VECTOR_ELT(out_Z_eit_S1M4, e, ans_Z_eit_S1M4);
                                    SET_VECTOR_ELT(out_Z_eit_S2M1, e, ans_Z_eit_S2M1); SET_VECTOR_ELT(out_Z_eit_S2M2, e, ans_Z_eit_S2M2);
                                    SET_VECTOR_ELT(out_Z_eit_S2M3, e, ans_Z_eit_S2M3); SET_VECTOR_ELT(out_Z_eit_S2M4, e, ans_Z_eit_S2M4);
                                    SET_VECTOR_ELT(out_Z_eit_S3M1, e, ans_Z_eit_S3M1); SET_VECTOR_ELT(out_Z_eit_S3M2, e, ans_Z_eit_S3M2);
                                    SET_VECTOR_ELT(out_Z_eit_S3M3, e, ans_Z_eit_S3M3); SET_VECTOR_ELT(out_Z_eit_S3M4, e, ans_Z_eit_S3M4);
                                    SET_VECTOR_ELT(out_Z_eit_S4M1, e, ans_Z_eit_S4M1); SET_VECTOR_ELT(out_Z_eit_S4M2, e, ans_Z_eit_S4M2);
                                    SET_VECTOR_ELT(out_Z_eit_S4M3, e, ans_Z_eit_S4M3); SET_VECTOR_ELT(out_Z_eit_S4M4, e, ans_Z_eit_S4M4);
                                    ////Rprintf("AAAhhh!!!");//PrintValue(out_Z_eit_S1M1);
                              }






                                    //---------
                                    // calcul de N_eit
                                    //---------

                                    //on détermine l'attribut Dimension de N_eit
                                    PROTECT(dimCst2 = allocVector(INTSXP, 4));
                                    dimC2 = INTEGER(dimCst2);

                                    dimC2[0] = 0 ; dimC2[1] = 0 ; dimC2[2] = imax2(dimC1[2] , dim_N_ei0[2]) ; dimC2[3] = nbT;

                                    count = 0 ; prod = 1 ; count2 = 0 ; count3 = 0;

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC2[k]>0) {
                                            count++;
                                            prod = prod * dimC2[k];
                                        }
                                    }

                                    PROTECT(Dim2 = allocVector(INTSXP, count));
                                    dim2 = INTEGER(Dim2);

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC2[k]>0) {
                                            dim2[count2] = dimC2[k];
                                            count2++;
                                            }
                                    }


                            if (ind_t==0) {

                                    //on crée le tableau résultat pour l'espèce en question
                                    PROTECT(ans_N_eit = NEW_NUMERIC(prod));
                                    setAttrib(ans_N_eit, R_DimSymbol, Dim2);

                                    PROTECT(dimnames2 = allocVector(VECSXP,count));
                                    if (dimC2[0]>0) {SET_VECTOR_ELT(dimnames2, count3, fleetList) ; count3++;}
                                    if (dimC2[1]>0) {SET_VECTOR_ELT(dimnames2, count3, metierList) ; count3++;}
                                    if (dimC2[2]>0) {SET_VECTOR_ELT(dimnames2, count3, intAge) ; count3++;}
                                    if (dimC2[3]>0) {SET_VECTOR_ELT(dimnames2, count3, times) ; count3++;}

                                    rans_N_eit = REAL(ans_N_eit);

                                    PROTECT(ans_N_eit_S1M1 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S1M1, R_DimSymbol, Dim2); rans_N_eit_S1M1 = REAL(ans_N_eit_S1M1);
                                    PROTECT(ans_N_eit_S1M2 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S1M2, R_DimSymbol, Dim2); rans_N_eit_S1M2 = REAL(ans_N_eit_S1M2);
                                    PROTECT(ans_N_eit_S1M3 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S1M3, R_DimSymbol, Dim2); rans_N_eit_S1M3 = REAL(ans_N_eit_S1M3);
                                    PROTECT(ans_N_eit_S1M4 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S1M4, R_DimSymbol, Dim2); rans_N_eit_S1M4 = REAL(ans_N_eit_S1M4);
                                    PROTECT(ans_N_eit_S2M1 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S2M1, R_DimSymbol, Dim2); rans_N_eit_S2M1 = REAL(ans_N_eit_S2M1);
                                    PROTECT(ans_N_eit_S2M2 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S2M2, R_DimSymbol, Dim2); rans_N_eit_S2M2 = REAL(ans_N_eit_S2M2);
                                    PROTECT(ans_N_eit_S2M3 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S2M3, R_DimSymbol, Dim2); rans_N_eit_S2M3 = REAL(ans_N_eit_S2M3);
                                    PROTECT(ans_N_eit_S2M4 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S2M4, R_DimSymbol, Dim2); rans_N_eit_S2M4 = REAL(ans_N_eit_S2M4);
                                    PROTECT(ans_N_eit_S3M1 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S3M1, R_DimSymbol, Dim2); rans_N_eit_S3M1 = REAL(ans_N_eit_S3M1);
                                    PROTECT(ans_N_eit_S3M2 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S3M2, R_DimSymbol, Dim2); rans_N_eit_S3M2 = REAL(ans_N_eit_S3M2);
                                    PROTECT(ans_N_eit_S3M3 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S3M3, R_DimSymbol, Dim2); rans_N_eit_S3M3 = REAL(ans_N_eit_S3M3);
                                    PROTECT(ans_N_eit_S3M4 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S3M4, R_DimSymbol, Dim2); rans_N_eit_S3M4 = REAL(ans_N_eit_S3M4);
                                    PROTECT(ans_N_eit_S4M1 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S4M1, R_DimSymbol, Dim2); rans_N_eit_S4M1 = REAL(ans_N_eit_S4M1);
                                    PROTECT(ans_N_eit_S4M2 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S4M2, R_DimSymbol, Dim2); rans_N_eit_S4M2 = REAL(ans_N_eit_S4M2);
                                    PROTECT(ans_N_eit_S4M3 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S4M3, R_DimSymbol, Dim2); rans_N_eit_S4M3 = REAL(ans_N_eit_S4M3);
                                    PROTECT(ans_N_eit_S4M4 = NEW_NUMERIC(prod)); setAttrib(ans_N_eit_S4M4, R_DimSymbol, Dim2); rans_N_eit_S4M4 = REAL(ans_N_eit_S4M4);

                            } else {

                                    rans_N_eit = REAL(VECTOR_ELT(out_N_eit, e));

                                    rans_N_eit_S1M1 = REAL(VECTOR_ELT(out_N_eit_S1M1, e)); rans_N_eit_S1M2 = REAL(VECTOR_ELT(out_N_eit_S1M2, e));
                                    rans_N_eit_S1M3 = REAL(VECTOR_ELT(out_N_eit_S1M3, e)); rans_N_eit_S1M4 = REAL(VECTOR_ELT(out_N_eit_S1M4, e));
                                    rans_N_eit_S2M1 = REAL(VECTOR_ELT(out_N_eit_S2M1, e)); rans_N_eit_S2M2 = REAL(VECTOR_ELT(out_N_eit_S2M2, e));
                                    rans_N_eit_S2M3 = REAL(VECTOR_ELT(out_N_eit_S2M3, e)); rans_N_eit_S2M4 = REAL(VECTOR_ELT(out_N_eit_S2M4, e));
                                    rans_N_eit_S3M1 = REAL(VECTOR_ELT(out_N_eit_S3M1, e)); rans_N_eit_S3M2 = REAL(VECTOR_ELT(out_N_eit_S3M2, e));
                                    rans_N_eit_S3M3 = REAL(VECTOR_ELT(out_N_eit_S3M3, e)); rans_N_eit_S3M4 = REAL(VECTOR_ELT(out_N_eit_S3M4, e));
                                    rans_N_eit_S4M1 = REAL(VECTOR_ELT(out_N_eit_S4M1, e)); rans_N_eit_S4M2 = REAL(VECTOR_ELT(out_N_eit_S4M2, e));
                                    rans_N_eit_S4M3 = REAL(VECTOR_ELT(out_N_eit_S4M3, e)); rans_N_eit_S4M4 = REAL(VECTOR_ELT(out_N_eit_S4M4, e));

                            }

//   r_N_ei0_S1M1 = REAL(v_N_ei0_S1M1); r_N_ei0_S1M2 = REAL(v_N_ei0_S1M2); r_N_ei0_S1M3 = REAL(v_N_ei0_S1M3); r_N_ei0_S1M4 = REAL(v_N_ei0_S1M4);
//   r_N_e0t_S1M1 = REAL(v_N_e0t_S1M1); r_N_e0t_S2M2 = REAL(v_N_e0t_S2M2); r_N_e0t_S3M3 = REAL(v_N_e0t_S3M3); r_N_e0t_S4M4 = REAL(v_N_e0t_S4M4);
   r_iniNt0q_S1M1 = REAL(v_iniNt0q_S1M1); r_iniNt0q_S1M2 = REAL(v_iniNt0q_S1M2); r_iniNt0q_S1M3 = REAL(v_iniNt0q_S1M3); r_iniNt0q_S1M4 = REAL(v_iniNt0q_S1M4);
   r_iniNt0q_S2M1 = REAL(v_iniNt0q_S2M1); r_iniNt0q_S2M2 = REAL(v_iniNt0q_S2M2); r_iniNt0q_S2M3 = REAL(v_iniNt0q_S2M3); r_iniNt0q_S2M4 = REAL(v_iniNt0q_S2M4);
   r_iniNt0q_S3M1 = REAL(v_iniNt0q_S3M1); r_iniNt0q_S3M2 = REAL(v_iniNt0q_S3M2); r_iniNt0q_S3M3 = REAL(v_iniNt0q_S3M3); r_iniNt0q_S3M4 = REAL(v_iniNt0q_S3M4);
   r_iniNt0q_S4M1 = REAL(v_iniNt0q_S4M1); r_iniNt0q_S4M2 = REAL(v_iniNt0q_S4M2); r_iniNt0q_S4M3 = REAL(v_iniNt0q_S4M3); r_iniNt0q_S4M4 = REAL(v_iniNt0q_S4M4);


                                    //facteurs des indices
                                    PROTECT(dFACT4 = iDim(dimC2));
                                    PROTECT(dFACT5 = iDim(dim_N_ei0));
                                    PROTECT(dFACT6 = iDim(dim_N_e0t));

                                    fact4_D = INTEGER(dFACT4);
                                    //int *fact5_D = INTEGER(dFACT5);
                                    //int *fact6_D = INTEGER(dFACT6);

                                    //équation

                            if (ind_t==0) {

                                        //S1
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                 rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S1M1[ind_i];
                                 rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S1M2[ind_i];
                                 rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S1M3[ind_i];
                                 rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S1M4[ind_i];
                                 rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S2M1[ind_i];
                                 rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S2M2[ind_i];
                                 rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S2M3[ind_i];
                                 rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S2M4[ind_i];
                                 rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S3M1[ind_i];
                                 rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S3M2[ind_i];
                                 rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S3M3[ind_i];
                                 rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S3M4[ind_i];
                                 rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S4M1[ind_i];
                                 rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S4M2[ind_i];
                                 rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S4M3[ind_i];
                                 rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = r_iniNt0q_S4M4[ind_i];

                                }

                            }


                            if (ind_t==0) {

                             setAttrib(ans_N_eit, R_DimNamesSymbol, dimnames2);
                             setAttrib(ans_N_eit, install("DimCst"), dimCst2);

                             setAttrib(ans_N_eit_S1M1, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S1M1, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S1M2, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S1M2, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S1M3, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S1M3, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S1M4, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S1M4, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S2M1, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S2M1, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S2M2, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S2M2, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S2M3, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S2M3, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S2M4, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S2M4, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S3M1, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S3M1, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S3M2, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S3M2, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S3M3, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S3M3, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S3M4, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S3M4, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S4M1, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S4M1, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S4M2, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S4M2, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S4M3, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S4M3, install("DimCst"), dimCst2);
                             setAttrib(ans_N_eit_S4M4, R_DimNamesSymbol, dimnames2); setAttrib(ans_N_eit_S4M4, install("DimCst"), dimCst2);

                             SET_VECTOR_ELT(out_N_eit, e, ans_N_eit);

                             SET_VECTOR_ELT(out_N_eit_S1M1, e, ans_N_eit_S1M1); SET_VECTOR_ELT(out_N_eit_S1M2, e, ans_N_eit_S1M2);
                             SET_VECTOR_ELT(out_N_eit_S1M3, e, ans_N_eit_S1M3); SET_VECTOR_ELT(out_N_eit_S1M4, e, ans_N_eit_S1M4);
                             SET_VECTOR_ELT(out_N_eit_S2M1, e, ans_N_eit_S2M1); SET_VECTOR_ELT(out_N_eit_S2M2, e, ans_N_eit_S2M2);
                             SET_VECTOR_ELT(out_N_eit_S2M3, e, ans_N_eit_S2M3); SET_VECTOR_ELT(out_N_eit_S2M4, e, ans_N_eit_S2M4);
                             SET_VECTOR_ELT(out_N_eit_S3M1, e, ans_N_eit_S3M1); SET_VECTOR_ELT(out_N_eit_S3M2, e, ans_N_eit_S3M2);
                             SET_VECTOR_ELT(out_N_eit_S3M3, e, ans_N_eit_S3M3); SET_VECTOR_ELT(out_N_eit_S3M4, e, ans_N_eit_S3M4);
                             SET_VECTOR_ELT(out_N_eit_S4M1, e, ans_N_eit_S4M1); SET_VECTOR_ELT(out_N_eit_S4M2, e, ans_N_eit_S4M2);
                             SET_VECTOR_ELT(out_N_eit_S4M3, e, ans_N_eit_S4M3); SET_VECTOR_ELT(out_N_eit_S4M4, e, ans_N_eit_S4M4);

                            }

// on peut désormais évaluer F, Z et N au niveau annuel et global
            for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++)
            for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++)
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]] =

                            (r_F_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]));


                r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]] =

                            (r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]));

            }




for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

     r_Froth_i[ind_i+ind_t*nbI] =
      (r_Froth_i_S1M1[ind_i+ind_t*nbI]*rans_N_eit_S1M1[ind_i+ind_t*nbI] +
      r_Froth_i_S1M2[ind_i+ind_t*nbI]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
      r_Froth_i_S1M3[ind_i+ind_t*nbI]*rans_N_eit_S1M3[ind_i+ind_t*nbI] +
      r_Froth_i_S1M4[ind_i+ind_t*nbI]*rans_N_eit_S1M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
           rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S2M1[ind_i+ind_t*nbI]*rans_N_eit_S2M1[ind_i+ind_t*nbI] +
      r_Froth_i_S2M2[ind_i+ind_t*nbI]*rans_N_eit_S2M2[ind_i+ind_t*nbI] +
      r_Froth_i_S2M3[ind_i+ind_t*nbI]*rans_N_eit_S2M3[ind_i+ind_t*nbI] +
      r_Froth_i_S2M4[ind_i+ind_t*nbI]*rans_N_eit_S2M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S2M1[ind_i+ind_t*nbI] + rans_N_eit_S2M2[ind_i+ind_t*nbI] +
           rans_N_eit_S2M3[ind_i+ind_t*nbI] + rans_N_eit_S2M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S3M1[ind_i+ind_t*nbI]*rans_N_eit_S3M1[ind_i+ind_t*nbI] +
      r_Froth_i_S3M2[ind_i+ind_t*nbI]*rans_N_eit_S3M2[ind_i+ind_t*nbI] +
      r_Froth_i_S3M3[ind_i+ind_t*nbI]*rans_N_eit_S3M3[ind_i+ind_t*nbI] +
      r_Froth_i_S3M4[ind_i+ind_t*nbI]*rans_N_eit_S3M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S3M1[ind_i+ind_t*nbI] + rans_N_eit_S3M2[ind_i+ind_t*nbI] +
           rans_N_eit_S3M3[ind_i+ind_t*nbI] + rans_N_eit_S3M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S4M1[ind_i+ind_t*nbI]*rans_N_eit_S4M1[ind_i+ind_t*nbI] +
      r_Froth_i_S4M2[ind_i+ind_t*nbI]*rans_N_eit_S4M2[ind_i+ind_t*nbI] +
      r_Froth_i_S4M3[ind_i+ind_t*nbI]*rans_N_eit_S4M3[ind_i+ind_t*nbI] +
      r_Froth_i_S4M4[ind_i+ind_t*nbI]*rans_N_eit_S4M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S4M1[ind_i+ind_t*nbI] + rans_N_eit_S4M2[ind_i+ind_t*nbI] +
           rans_N_eit_S4M3[ind_i+ind_t*nbI] + rans_N_eit_S4M4[ind_i+ind_t*nbI]));


    r_Foth_i[ind_i+ind_t*nbI] =
      (r_Foth_i_S1M1[ind_i+ind_t*nbI]*rans_N_eit_S1M1[ind_i+ind_t*nbI] +
      r_Foth_i_S1M2[ind_i+ind_t*nbI]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
      r_Foth_i_S1M3[ind_i+ind_t*nbI]*rans_N_eit_S1M3[ind_i+ind_t*nbI] +
      r_Foth_i_S1M4[ind_i+ind_t*nbI]*rans_N_eit_S1M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
           rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S2M1[ind_i+ind_t*nbI]*rans_N_eit_S2M1[ind_i+ind_t*nbI] +
      r_Foth_i_S2M2[ind_i+ind_t*nbI]*rans_N_eit_S2M2[ind_i+ind_t*nbI] +
      r_Foth_i_S2M3[ind_i+ind_t*nbI]*rans_N_eit_S2M3[ind_i+ind_t*nbI] +
      r_Foth_i_S2M4[ind_i+ind_t*nbI]*rans_N_eit_S2M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S2M1[ind_i+ind_t*nbI] + rans_N_eit_S2M2[ind_i+ind_t*nbI] +
           rans_N_eit_S2M3[ind_i+ind_t*nbI] + rans_N_eit_S2M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S3M1[ind_i+ind_t*nbI]*rans_N_eit_S3M1[ind_i+ind_t*nbI] +
      r_Foth_i_S3M2[ind_i+ind_t*nbI]*rans_N_eit_S3M2[ind_i+ind_t*nbI] +
      r_Foth_i_S3M3[ind_i+ind_t*nbI]*rans_N_eit_S3M3[ind_i+ind_t*nbI] +
      r_Foth_i_S3M4[ind_i+ind_t*nbI]*rans_N_eit_S3M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S3M1[ind_i+ind_t*nbI] + rans_N_eit_S3M2[ind_i+ind_t*nbI] +
           rans_N_eit_S3M3[ind_i+ind_t*nbI] + rans_N_eit_S3M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S4M1[ind_i+ind_t*nbI]*rans_N_eit_S4M1[ind_i+ind_t*nbI] +
      r_Foth_i_S4M2[ind_i+ind_t*nbI]*rans_N_eit_S4M2[ind_i+ind_t*nbI] +
      r_Foth_i_S4M3[ind_i+ind_t*nbI]*rans_N_eit_S4M3[ind_i+ind_t*nbI] +
      r_Foth_i_S4M4[ind_i+ind_t*nbI]*rans_N_eit_S4M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S4M1[ind_i+ind_t*nbI] + rans_N_eit_S4M2[ind_i+ind_t*nbI] +
           rans_N_eit_S4M3[ind_i+ind_t*nbI] + rans_N_eit_S4M4[ind_i+ind_t*nbI]));

}


                                sumWt = 0.0; fmax = 0.0;

                                    //équation
                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                        double temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                            temp = temp +  r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];

                                        }


                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i[ind_i + nbI*ind_t];

                                        }


                                    //on en profite pour calculer Fbar

                                    fmax = fmax + (temp + r_Froth_i[ind_i + nbI*ind_t])*r_Fbar[ind_i];
                                    sumWt = sumWt + r_Fbar[ind_i];

                                    // et remplir N_eit (effectifs à la saison 1)
                                    rans_N_eit[ind_i + nbI*ind_t] = rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
                                         rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI];

                                    }




       if (ind_t==0) {
         setAttrib(ans_Z_eit, R_DimNamesSymbol, dimnames1);
         setAttrib(ans_Z_eit, install("DimCst"), dimCst1);

         SET_VECTOR_ELT(out_Z_eit, e, ans_Z_eit);

         setAttrib(ans_N_eit, R_DimNamesSymbol, dimnames2);
         setAttrib(ans_N_eit, install("DimCst"), dimCst2);

         SET_VECTOR_ELT(out_N_eit, e, ans_N_eit);
       }

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 9, dimCst_Fr_efmit);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 10, v_Fr_efmit);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 11, v_M_ei);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 12, dFACT1);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 13, dFACT2);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 14, dFACT3);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 59, v_Fbar);

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 17, dFACT4);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 18, dFACT5);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 19, dFACT6);


    }

//--------------------------------------------------------------------------------------



                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////

                                    //---------
                                    // calcul de SSB_et
                                    //---------

                                    //on détermine l'attribut Dimension de SSB_et
                                    PROTECT(dimCst4 = allocVector(INTSXP, 4));
                                    dimC4 = INTEGER(dimCst4);

                                    dimC4[0] = 0 ; dimC4[1] = 0 ; dimC4[2] = 0 ; dimC4[3] = dimC2[3];

                                    count = 0 ; prod = 1 ; count2 = 0 ; count4 = 0;

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC4[k]>0) {
                                            count++;
                                            prod = prod * dimC4[k];
                                        }
                                    }


                                    PROTECT(Dim4 = allocVector(INTSXP, count));
                                    dim4 = INTEGER(Dim4);

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC4[k]>0) {
                                            dim4[count2] = dimC4[k];
                                            count2++;
                                            }
                                    }

                            if (ind_t==0) {
                                    //on crée le tableau résultat pour l'espèce en question (on en profite pour faire de même avec Fbar --> même dimension)
                                    PROTECT(ans_SSB_et = NEW_NUMERIC(prod));
                                    PROTECT(ans_Fbar_et = NEW_NUMERIC(prod));

                                    if (count>0) { //valable seulement si SSB_et n'est pas seulement un scalaire

                                    setAttrib(ans_SSB_et, R_DimSymbol, Dim4);
                                    setAttrib(ans_Fbar_et, R_DimSymbol, Dim4);

                                    }

                                    PROTECT(dimnames4 = allocVector(VECSXP,count));
                                    if (dimC4[0]>0) {SET_VECTOR_ELT(dimnames4, count4, fleetList) ; count4++;}
                                    if (dimC4[1]>0) {SET_VECTOR_ELT(dimnames4, count4, metierList) ; count4++;}
                                    if (dimC4[2]>0) {SET_VECTOR_ELT(dimnames4, count4, intAge) ; count4++;}
                                    if (dimC4[3]>0) {SET_VECTOR_ELT(dimnames4, count4, times) ; count4++;}


                                    rans_SSB_et = REAL(ans_SSB_et);
                                    rans_Fbar_et = REAL(ans_Fbar_et);

                            } else {


                                    rans_SSB_et = REAL(VECTOR_ELT(out_SSB_et, e));
                                    rans_Fbar_et = REAL(VECTOR_ELT(out_Fbar_et, e));

                            }

                                    r_w_ei = REAL(v_w_ei);
                                    r_mat_ei = REAL(v_mat_ei);

                                    //facteurs des indices
                                    PROTECT(dFACT9 = iDim(dimC4));
                                    PROTECT(dFACT8 = iDim(dim_w_ei));
                                    PROTECT(dFACT10 = iDim(dim_mat_ei));

                                    int *fact9_D = INTEGER(dFACT9);
                                    int *fact8_D = INTEGER(dFACT8);
                                    int *fact10_D = INTEGER(dFACT10);

                                    //équation
                        if (Qvec[e]==0) {

                                        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                        for (int ind_m = 0 ; ind_m < nbM ; ind_m++){

                                            double temp = 0.0;
                                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) //on fait ici l'hypothèse que la dimension âge est toujours présente
                                                temp = temp +
                                                 rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] *
                                                 r_mat_ei[ind_f*fact10_D[0] + ind_m*fact10_D[1] + ind_i*fact10_D[2] + ind_t*fact10_D[3]] *
                                                 r_w_ei[ind_f*fact8_D[0] + ind_m*fact8_D[1] + ind_i*fact8_D[2] + ind_t*fact8_D[3]] / 1000;

                                            rans_SSB_et[ind_f*fact9_D[0] + ind_m*fact9_D[1] + 0*fact9_D[2] + ind_t*fact9_D[3]] = temp;
                                            rans_Fbar_et[ind_f*fact9_D[0] + ind_m*fact9_D[1] + 0*fact9_D[2] + ind_t*fact9_D[3]] = fmax/sumWt;

                                        }
                        } else {

                        r_matwt_M1 = REAL(v_matwt_M1) ; r_matwt_M2 = REAL(v_matwt_M2) ; r_matwt_M3 = REAL(v_matwt_M3) ; r_matwt_M4 = REAL(v_matwt_M4) ;
                        double tempSSB = 0.0;
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                            tempSSB = tempSSB + r_matwt_M1[ind_i]*rans_N_eit_S1M1[ind_i+ind_t*nbI] + r_matwt_M2[ind_i]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
                                  r_matwt_M3[ind_i]*rans_N_eit_S1M3[ind_i+ind_t*nbI] + r_matwt_M4[ind_i]*rans_N_eit_S1M4[ind_i+ind_t*nbI];

                            rans_SSB_et[ind_t] = tempSSB ;
                            rans_Fbar_et[ind_t] = fmax/sumWt;

                        }

                            if(ind_t==0) {

                                    if (count>0) setAttrib(ans_SSB_et, R_DimNamesSymbol, dimnames4);
                                    setAttrib(ans_SSB_et, install("DimCst"), dimCst4);

                                    SET_VECTOR_ELT(out_SSB_et, e, ans_SSB_et);

                                    if (count>0) setAttrib(ans_Fbar_et, R_DimNamesSymbol, dimnames4);
                                    setAttrib(ans_Fbar_et, install("DimCst"), dimCst4);

                                    SET_VECTOR_ELT(out_Fbar_et, e, ans_Fbar_et);

                                    SET_STRING_ELT(rnames_Esp, e, STRING_ELT(sppList,e));

                            }

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 48, dFACT9);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 49, dFACT10);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 47, v_mat_ei);




                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////
                                /////////////////////////////////////////////////////////////////////////////////////////////////

                                    //---------
                                    // calcul de B_et
                                    //---------
//Rprintf("K700\n");fichier << "K700" << endl;
                                    //on détermine l'attribut Dimension de B_et
                                    PROTECT(dimCst3 = allocVector(INTSXP, 4));
                                    dimC3 = INTEGER(dimCst3);

                                    dimC3[0] = 0 ; dimC3[1] = 0 ; dimC3[2] = 0 ; dimC3[3] = dimC2[3];

                                    count = 0 ; prod = 1 ; count2 = 0 ; count3 = 0;

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC3[k]>0) {
                                            count++;
                                            prod = prod * dimC3[k];
                                        }
                                    }

                                    PROTECT(Dim3 = allocVector(INTSXP, count));
                                    dim3 = INTEGER(Dim3);

                                    for (int k = 0 ; k < 4 ; k++) {

                                        if (dimC3[k]>0) {
                                            dim3[count2] = dimC3[k];
                                            count2++;
                                            }
                                    }
//Rprintf("K70\n");fichier << "K70" << endl;
                            if (ind_t==0) {
                                    //on crée le tableau résultat pour l'espèce en question
                                    PROTECT(ans_B_et = NEW_NUMERIC(prod));

                                    if (count>0) { //valable seulement si B_et n'est pas seulement un scalaire

                                    setAttrib(ans_B_et, R_DimSymbol, Dim3);

                                    }

                                    PROTECT(dimnames3 = allocVector(VECSXP,count));
                                    if (dimC3[0]>0) {SET_VECTOR_ELT(dimnames3, count3, fleetList) ; count3++;}
                                    if (dimC3[1]>0) {SET_VECTOR_ELT(dimnames3, count3, metierList) ; count3++;}
                                    if (dimC3[2]>0) {SET_VECTOR_ELT(dimnames3, count3, intAge) ; count3++;}
                                    if (dimC3[3]>0) {SET_VECTOR_ELT(dimnames3, count3, times) ; count3++;}

                                    rans_B_et = REAL(ans_B_et);

                            } else {

                                    rans_B_et = REAL(VECTOR_ELT(out_B_et, e));

                            }

                                    //facteurs des indices
                                    PROTECT(dFACT7 = iDim(dimC3));

                                    int *fact7_D = INTEGER(dFACT7);
                                    r_r = REAL(v_r);
                                    r_K = REAL(v_K);
                                    r_n = REAL(v_n);
                                    r_B = REAL(v_B);
//Rprintf("K71\n");fichier << "K71" << endl;
                                    //équation

                                    if (nbI>1) {

                                        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                        for (int ind_m = 0 ; ind_m < nbM ; ind_m++){

                                            double temp = 0.0;
                                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) //on fait ici l'hypothèse que la dimension âge est toujours présente
                                                temp = temp +
                                                 rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] *
                                                 r_w_ei[ind_f*fact8_D[0] + ind_m*fact8_D[1] + ind_i*fact8_D[2] + ind_t*fact8_D[3]] / 1000;

                                            rans_B_et[ind_f*fact7_D[0] + ind_m*fact7_D[1] + 0*fact7_D[2] + ind_t*fact7_D[3]] = temp;

                                        }

                                    } else {

                                        rans_B_et[ind_t] = r_B[0]; //biomasse initiale SPiCT

                                        SEXP ans_interm = R_NilValue ;
                                        PROTECT(ans_interm = NEW_NUMERIC(1*nbT)); //PROTECT(ans_interm = NEW_NUMERIC(16*nbT));
                                        double *rans_interm = REAL(ans_interm); for (int yy = 0 ; yy < 1*nbT ; yy++) rans_interm[yy] = NA_REAL; //for (int yy = 0 ; yy < 16*nbT ; yy++) rans_interm[yy] = NA_REAL; //initialisation
                                        double *r_Fot_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                                        double *r_F_efmit = REAL(getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))));
                                        double temp = 0.0;
                                        int *dim_F_efmit;
                                        SEXP dimCst_F_efmit, cFACT2;
                                        PROTECT(dimCst_F_efmit = getAttrib(getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))), install("DimCst")));
                                        dim_F_efmit = INTEGER(dimCst_F_efmit);
                                        PROTECT(cFACT2 = iDim(dim_F_efmit));
                                        int *fact2_C = INTEGER(cFACT2);
                                        for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {
                                            if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]]))
                                            temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]];
                                        }
                                        //il faut aussi remplir les biomasses par 16ème de temps
                                        rans_interm[0] = r_B[0];
                                        rans_interm[1] = rans_interm[0] + (r_r[0]/(r_n[0]-1))*rans_interm[0]*(1-pow(rans_interm[0]/r_K[0],r_n[0]-1)) -
                                                                                 (temp + r_Fot_i[0 + ind_t*1])*rans_interm[0];
                                        //for (int ib = 1 ; ib < 17 ; ib++) rans_interm[ib] = rans_interm[ib-1] + (r_r[0]/(r_n[0]-1))*rans_interm[ib-1]*(1-pow(rans_interm[ib-1]/r_K[0],r_n[0]-1))/16 -
                                        //                                         (temp + r_Fot_i[0 + ind_t*1])*rans_interm[ib-1]/16;
                                        SET_VECTOR_ELT(intermBIOMspict, e, ans_interm);
                                        UNPROTECT(3);

                                    }
//Rprintf("K72\n");fichier << "K72" << endl;

                            if(ind_t==0) {

                                    if (count>0) setAttrib(ans_B_et, R_DimNamesSymbol, dimnames3);
                                    setAttrib(ans_B_et, install("DimCst"), dimCst3);

                                    SET_VECTOR_ELT(out_B_et, e, ans_B_et);
                                    SET_STRING_ELT(rnames_Esp, e, STRING_ELT(sppList,e));

                                    UNPROTECT(9);
                                    if (Qvec[e]==1) UNPROTECT(32);
                            }

                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 20, v_w_ei);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 21, dFACT7);
                                SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 22, dFACT8);
//Rprintf("K73\n");fichier << "K73" << endl;
                                UNPROTECT(34);
                                UNPROTECT(4); //SPiCT
                                //Rprintf("K8\n");fichier << "K8" << endl;
                                if (Qvec[e]==1) UNPROTECT(38+20);

}
//PrintValue(out_Fbar_et);
dUpdate = false;
//Rprintf("K9\n");fichier << "K9" << endl;
if (ind_t==0) UNPROTECT(1);


} else {


for (int e = 0 ; e < nbE ; e++) {
//Rprintf("G1");fichier << "G1" << endl;

                    SEXP elmt;
                    PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));

                    int nbI = length(VECTOR_ELT(namDC, e));
                    SEXP v_N_e0t, v_N_e0t_S1M1, v_N_e0t_S2M2, v_N_e0t_S3M3, v_N_e0t_S4M4,
                         v_N_ei0_S1M1, v_N_ei0_S1M2, v_N_ei0_S1M3, v_N_ei0_S1M4,v_matwt_M1,v_matwt_M2,v_matwt_M3,v_matwt_M4;

                    PROTECT(v_N_e0t = getListElement(elmt, "N_i0t"));
//Rprintf("G2");
                    double  *rans_Z_eit = REAL(VECTOR_ELT(out_Z_eit,e));

                    double  *rans_N_eit = REAL(VECTOR_ELT(out_N_eit,e));
//Rprintf("G3");
                    double  *rans_Fbar_et = REAL(VECTOR_ELT(out_Fbar_et,e));//Rprintf("G31");
                    double  *rans_B_et = REAL(VECTOR_ELT(out_B_et,e));//Rprintf("G32");
                    double  *rans_SSB_et = REAL(VECTOR_ELT(out_SSB_et,e));//Rprintf("G33");

                    double  *r_Fr_efmit = REAL(VECTOR_ELT(out_Fr_fmi, e));//Rprintf("G34");
                    double  *r_F_efmit = REAL(VECTOR_ELT(out_F_fmi, e));
//Rprintf("G4");
                    double  *r_M_ei = REAL(getListElement(elmt, "M_i"));
                    double  *r_N_ei0 = REAL(getListElement(elmt, "N_it0"));

                    double  *r_N_e0t = REAL(v_N_e0t);
//Rprintf("G5");
                    double  *r_w_ei = REAL(getListElement(elmt, "wStock_i"));////PrintValue(getListElement(elmt, "wStock_i"));
                    double  *r_mat_ei = REAL(getListElement(elmt, "mat_i"));

                    double  *r_Froth_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 60));
                    double  *r_Foth_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                    double  *r_Fbar = REAL(getListElement(elmt, "Fbar"));

                    double  *r_r = REAL(getListElement(elmt, "r"));
                    double  *r_K = REAL(getListElement(elmt, "K"));
                    double  *r_n = REAL(getListElement(elmt, "n"));
                    //double  *r_B = REAL(getListElement(elmt, "B_i"));
                    //double  *r_Ytot = REAL(VECTOR_ELT(out_Y_eit,e)); //un seul âge si SPiCT
//Rprintf("G6");
                    int *dim_Fr_efmit = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 9)),
                        *fact1_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 12)),
                        *fact2_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 13)),
                        *fact3_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 14)),
                        *fact4_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 17)),
                        *fact5_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 18)),
                        *fact6_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 19)),
                        *fact7_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 21)),
                        *fact8_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 22)),
                        *fact9_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 48)),
                        *fact10_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 49));

//Rprintf("G7");fichier << "G7" << endl;

    if (Qvec[e]==0) {


        //Rprintf("avant T %i\n",ind_t);PrintValue(v_N_e0t);PrintValue(STRING_ELT(sppList,e));PrintValue(getListElement(recList,CHAR(STRING_ELT(sppList,e))));
        //ajout 24/04/2018 pour prise en compte forçage recrutement XSA
        if ((!isNull(getListElement(recList,CHAR(STRING_ELT(sppList,e))))) & (ind_t>0) & (nbI>1) & Reality) { //seulement applicable à t=2
            SRInd[e]=0;
            r_N_e0t[ind_t*fact6_D[3]] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[ind_t];
            if (ind_t<(nbT-1)) r_N_e0t[ind_t*fact6_D[3] + 1] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[ind_t+1];
        }
        //Rprintf("après T %i\n",ind_t);PrintValue(v_N_e0t);


                    double fmax = 0.0, sumWt = 0.0;

                    //équation n°1 : out_Z_eit

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                double temp = 0.0, tempCap = 0.0;

                                for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {

                                if (!ISNA(r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                    temp = temp +  r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                if (!ISNA(r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                    tempCap = tempCap +  r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];

                                }

                            if (Zoptim_use & (e==eTemp)) {

                               rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                    Zoptim[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]];


                            } else {

                                if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                  rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                } else {
                                  rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                    temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                    r_Froth_i[ind_i + ind_t*nbI];
                                }
                            }
                            //on en profite pour calculer Fbar

                            fmax = fmax + (temp + r_Froth_i[ind_i + ind_t*nbI])*r_Fbar[ind_i];
                            sumWt = sumWt + r_Fbar[ind_i];

                            }
//Rprintf("G17");
//Rprintf("avant T %i\n",ind_t);PrintValue(v_N_e0t);
                    //équation n°2 : out_N_eit

                                for (int ind_f = 0 ; ind_f < 1 ; ind_f++)
                                for (int ind_m = 0 ; ind_m < 1 ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                    if (ind_i == 0) {

                                        if ((SRInd[e]==1) & (ind_t>0)) {

                                            if (!ISNA(REAL(VECTOR_ELT(out_SRmod,e))[ind_t])) {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                    REAL(VECTOR_ELT(out_SRmod,e))[ind_t];

                                            } else {

                                             if (ISNA(r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]])) {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + ind_t*fact5_D[3]];

                                            } else {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]];

                                            }}




                                        } else {

                                            if (ISNA(r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]])) {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + ind_t*fact5_D[3]];

                                            } else {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_e0t[ind_f*fact6_D[0] + ind_m*fact6_D[1] + ind_i*fact6_D[2] + ind_t*fact6_D[3]];

                                            }
                                        }

                                    } else {

                                        if (ind_t == 0) {

                                            rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                              r_N_ei0[ind_f*fact5_D[0] + ind_m*fact5_D[1] + ind_i*fact5_D[2] + ind_t*fact5_D[3]];

                                        } else {

                                            if (ind_i == (nbI-1)) {  //groupe d'âge +

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                  exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]) +
                                                  rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                  exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]);

                                            } else {

                                                rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]] *
                                                  exp(-rans_Z_eit[ind_f*fact1_D[0] + ind_m*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]);

                                            }
                                        }
                                    }
                            }

//Rprintf("après T %i\n",ind_t);PrintValue(VECTOR_ELT(out_N_eit,e));


                                for (int ind_f = 0 ; ind_f < 1 ; ind_f++)
                                for (int ind_m = 0 ; ind_m < 1 ; ind_m++){

                                    double temp = 0.0;

                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) //on fait ici l'hypothèse que la dimension âge est toujours présente
                                        temp = temp +
                                         rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] *
                                         r_mat_ei[ind_f*fact10_D[0] + ind_m*fact10_D[1] + ind_i*fact10_D[2] + ind_t*fact10_D[3]] *
                                         r_w_ei[ind_f*fact8_D[0] + ind_m*fact8_D[1] + ind_i*fact8_D[2] + ind_t*fact8_D[3]] / 1000;

                                    rans_SSB_et[ind_f*fact9_D[0] + ind_m*fact9_D[1] + 0*fact9_D[2] + ind_t*fact9_D[3]] = temp;
                                    rans_Fbar_et[ind_f*fact9_D[0] + ind_m*fact9_D[1] + 0*fact9_D[2] + ind_t*fact9_D[3]] = fmax/sumWt;
                                }

     //ajout 01/06/2018 : recrutement alétoire sur la base de recParamList

        if ((!isNull(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))))) & (ind_t>0) & (nbI>1) & Reality) { //seulement applicable à t>0 et pour une dynamique XSA
            double *param = REAL(getListElement(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))),"param"));
            int del = INTEGER(getListElement(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))),"delay"))[0];
            if ((!ISNA(param[ind_t])) & (ind_t>=del)) {
                double recr = 0.0;
                if ((1/param[ind_t + 1*nbT])>rans_SSB_et[ind_t - del]) {
                    recr = param[ind_t + 0*nbT] * rans_SSB_et[ind_t - del] * param[ind_t + 2*nbT];
                } else{
                    recr = param[ind_t + 0*nbT] * param[ind_t + 2*nbT] / param[ind_t + 1*nbT];
                }
                r_N_e0t[ind_t] = recr;
                rans_N_eit[0*fact4_D[2] + ind_t*fact4_D[3]] = recr;
            }
        }

    //ajout 01/06/2018 : --------------------------------------------------


                                //biomasse

                             if (nbI>1) {

                                for (int ind_f = 0 ; ind_f < 1 ; ind_f++)
                                for (int ind_m = 0 ; ind_m < 1 ; ind_m++){

                                    double temp = 0.0;

                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                                        temp = temp +
                                         rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] *
                                         r_w_ei[ind_f*fact8_D[0] + ind_m*fact8_D[1] + ind_i*fact8_D[2] + ind_t*fact8_D[3]] / 1000;

                                    rans_B_et[ind_f*fact7_D[0] + ind_m*fact7_D[1] + 0*fact7_D[2] + ind_t*fact7_D[3]] = temp;

                                }

                             } else { //SPiCT

                                    //Rprintf("AA ind_t %i B %f r %f K %f n %f Y %f \n",ind_t,rans_B_et[ind_t-1],r_r[0],r_K[0],r_n[0],r_Ytot[0 + nbI*(ind_t-1)]);

                                    double *Bspict = REAL(VECTOR_ELT(intermBIOMspict, e)); //normalement, inclut toutes les biomasses entre N et N+1 inclus, à savoir 17 valeurs
                                    double *r_Fot_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                                    double *r_F_efmit = REAL(getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))));
                                    double temp = 0.0;
                                    SEXP dimCst_F_efmit, cFACT2;
                                    PROTECT(dimCst_F_efmit = getAttrib(getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))), install("DimCst")));
                                    int *dim_F_efmit = INTEGER(dimCst_F_efmit);
                                    PROTECT(cFACT2 = iDim(dim_F_efmit));
                                    int *fact2_C = INTEGER(cFACT2);
                                    for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                    for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {
                                        if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]]))
                                        temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]];
                                    }

                                    rans_B_et[ind_t] =  Bspict[1*ind_t]; //Bspict[16*ind_t];
                                    //il faut ensuite préparer l'année suivante en remplaçant les biomasses par 16ème de temps
                                    if (ind_t <(nbT-1)) {
                                      Bspict[ind_t+1] = Bspict[ind_t] + (r_r[0]/(r_n[0]-1))*Bspict[ind_t]*(1-pow(Bspict[ind_t]/r_K[0],r_n[0]-1)) -
                                                                                 (temp + r_Fot_i[0 + ind_t*1])*Bspict[ind_t];
                                      //for (int ib = (16*ind_t + 1) ; ib < (16*ind_t + 17) ; ib++) Bspict[ib] = Bspict[ib-1] + (r_r[0]/(r_n[0]-1))*Bspict[ib-1]*(1-pow(Bspict[ib-1]/r_K[0],r_n[0]-1))/16 -
                                      //                                           (temp + r_Fot_i[0 + ind_t*1])*Bspict[ib-1]/16;
                                    }// else { //dernière itération : on s'arrête avant l'arrivé à l'année N+1
                                     // for (int ib = (16*ind_t + 1) ; ib < (16*ind_t + 16) ; ib++) Bspict[ib] = Bspict[ib-1] + (r_r[0]/(r_n[0]-1))*Bspict[ib-1]*(1-pow(Bspict[ib-1]/r_K[0],r_n[0]-1))/16 -
                                     //                                            (temp + r_Fot_i[0 + ind_t*1])*Bspict[ib-1]/16;
                                     //}
                                    UNPROTECT(2);

                             }


    }

    if (Qvec[e]==1) {

                    PROTECT(v_N_e0t_S1M1 = getListElement(elmt, "Ni0_S1M1"));
                    PROTECT(v_N_e0t_S2M2 = getListElement(elmt, "Ni0_S2M2"));
                    PROTECT(v_N_e0t_S3M3 = getListElement(elmt, "Ni0_S3M3"));
                    PROTECT(v_N_e0t_S4M4 = getListElement(elmt, "Ni0_S4M4"));

                    PROTECT(v_N_ei0_S1M1 = getListElement(elmt, "Nt0_S1M1"));
                    PROTECT(v_N_ei0_S1M2 = getListElement(elmt, "Nt0_S1M2"));
                    PROTECT(v_N_ei0_S1M3 = getListElement(elmt, "Nt0_S1M3"));
                    PROTECT(v_N_ei0_S1M4 = getListElement(elmt, "Nt0_S1M4")); // ### +4

                    PROTECT(v_matwt_M1 = getListElement(elmt, "matwt_M1"));
                    PROTECT(v_matwt_M2 = getListElement(elmt, "matwt_M2"));
                    PROTECT(v_matwt_M3 = getListElement(elmt, "matwt_M3"));
                    PROTECT(v_matwt_M4 = getListElement(elmt, "matwt_M4"));  // ### +4

                    double  *rans_Z_eit_S1M1 = REAL(VECTOR_ELT(out_Z_eit_S1M1,e)); double  *rans_Z_eit_S1M2 = REAL(VECTOR_ELT(out_Z_eit_S1M2,e));
                    double  *rans_Z_eit_S1M3 = REAL(VECTOR_ELT(out_Z_eit_S1M3,e)); double  *rans_Z_eit_S1M4 = REAL(VECTOR_ELT(out_Z_eit_S1M4,e));
                    double  *rans_Z_eit_S2M1 = REAL(VECTOR_ELT(out_Z_eit_S2M1,e)); double  *rans_Z_eit_S2M2 = REAL(VECTOR_ELT(out_Z_eit_S2M2,e));
                    double  *rans_Z_eit_S2M3 = REAL(VECTOR_ELT(out_Z_eit_S2M3,e)); double  *rans_Z_eit_S2M4 = REAL(VECTOR_ELT(out_Z_eit_S2M4,e));
                    double  *rans_Z_eit_S3M1 = REAL(VECTOR_ELT(out_Z_eit_S3M1,e)); double  *rans_Z_eit_S3M2 = REAL(VECTOR_ELT(out_Z_eit_S3M2,e));
                    double  *rans_Z_eit_S3M3 = REAL(VECTOR_ELT(out_Z_eit_S3M3,e)); double  *rans_Z_eit_S3M4 = REAL(VECTOR_ELT(out_Z_eit_S3M4,e));
                    double  *rans_Z_eit_S4M1 = REAL(VECTOR_ELT(out_Z_eit_S4M1,e)); double  *rans_Z_eit_S4M2 = REAL(VECTOR_ELT(out_Z_eit_S4M2,e));
                    double  *rans_Z_eit_S4M3 = REAL(VECTOR_ELT(out_Z_eit_S4M3,e)); double  *rans_Z_eit_S4M4 = REAL(VECTOR_ELT(out_Z_eit_S4M4,e));

                    double  *rans_N_eit_S1M1 = REAL(VECTOR_ELT(out_N_eit_S1M1,e)); double  *rans_N_eit_S1M2 = REAL(VECTOR_ELT(out_N_eit_S1M2,e));
                    double  *rans_N_eit_S1M3 = REAL(VECTOR_ELT(out_N_eit_S1M3,e)); double  *rans_N_eit_S1M4 = REAL(VECTOR_ELT(out_N_eit_S1M4,e));
                    double  *rans_N_eit_S2M1 = REAL(VECTOR_ELT(out_N_eit_S2M1,e)); double  *rans_N_eit_S2M2 = REAL(VECTOR_ELT(out_N_eit_S2M2,e));
                    double  *rans_N_eit_S2M3 = REAL(VECTOR_ELT(out_N_eit_S2M3,e)); double  *rans_N_eit_S2M4 = REAL(VECTOR_ELT(out_N_eit_S2M4,e));
                    double  *rans_N_eit_S3M1 = REAL(VECTOR_ELT(out_N_eit_S3M1,e)); double  *rans_N_eit_S3M2 = REAL(VECTOR_ELT(out_N_eit_S3M2,e));
                    double  *rans_N_eit_S3M3 = REAL(VECTOR_ELT(out_N_eit_S3M3,e)); double  *rans_N_eit_S3M4 = REAL(VECTOR_ELT(out_N_eit_S3M4,e));
                    double  *rans_N_eit_S4M1 = REAL(VECTOR_ELT(out_N_eit_S4M1,e)); double  *rans_N_eit_S4M2 = REAL(VECTOR_ELT(out_N_eit_S4M2,e));
                    double  *rans_N_eit_S4M3 = REAL(VECTOR_ELT(out_N_eit_S4M3,e)); double  *rans_N_eit_S4M4 = REAL(VECTOR_ELT(out_N_eit_S4M4,e));

                    double  *r_Fr_efmit_S1M1 = REAL(VECTOR_ELT(out_Fr_fmi_S1M1,e)); double  *r_Fr_efmit_S1M2 = REAL(VECTOR_ELT(out_Fr_fmi_S1M2,e));
                    double  *r_Fr_efmit_S1M3 = REAL(VECTOR_ELT(out_Fr_fmi_S1M3,e)); double  *r_Fr_efmit_S1M4 = REAL(VECTOR_ELT(out_Fr_fmi_S1M4,e));
                    double  *r_Fr_efmit_S2M1 = REAL(VECTOR_ELT(out_Fr_fmi_S2M1,e)); double  *r_Fr_efmit_S2M2 = REAL(VECTOR_ELT(out_Fr_fmi_S2M2,e));
                    double  *r_Fr_efmit_S2M3 = REAL(VECTOR_ELT(out_Fr_fmi_S2M3,e)); double  *r_Fr_efmit_S2M4 = REAL(VECTOR_ELT(out_Fr_fmi_S2M4,e));
                    double  *r_Fr_efmit_S3M1 = REAL(VECTOR_ELT(out_Fr_fmi_S3M1,e)); double  *r_Fr_efmit_S3M2 = REAL(VECTOR_ELT(out_Fr_fmi_S3M2,e));
                    double  *r_Fr_efmit_S3M3 = REAL(VECTOR_ELT(out_Fr_fmi_S3M3,e)); double  *r_Fr_efmit_S3M4 = REAL(VECTOR_ELT(out_Fr_fmi_S3M4,e));
                    double  *r_Fr_efmit_S4M1 = REAL(VECTOR_ELT(out_Fr_fmi_S4M1,e)); double  *r_Fr_efmit_S4M2 = REAL(VECTOR_ELT(out_Fr_fmi_S4M2,e));
                    double  *r_Fr_efmit_S4M3 = REAL(VECTOR_ELT(out_Fr_fmi_S4M3,e)); double  *r_Fr_efmit_S4M4 = REAL(VECTOR_ELT(out_Fr_fmi_S4M4,e));

                    double  *r_F_efmit_S1M1 = REAL(VECTOR_ELT(out_F_fmi_S1M1,e)); double  *r_F_efmit_S1M2 = REAL(VECTOR_ELT(out_F_fmi_S1M2,e));
                    double  *r_F_efmit_S1M3 = REAL(VECTOR_ELT(out_F_fmi_S1M3,e)); double  *r_F_efmit_S1M4 = REAL(VECTOR_ELT(out_F_fmi_S1M4,e));
                    double  *r_F_efmit_S2M1 = REAL(VECTOR_ELT(out_F_fmi_S2M1,e)); double  *r_F_efmit_S2M2 = REAL(VECTOR_ELT(out_F_fmi_S2M2,e));
                    double  *r_F_efmit_S2M3 = REAL(VECTOR_ELT(out_F_fmi_S2M3,e)); double  *r_F_efmit_S2M4 = REAL(VECTOR_ELT(out_F_fmi_S2M4,e));
                    double  *r_F_efmit_S3M1 = REAL(VECTOR_ELT(out_F_fmi_S3M1,e)); double  *r_F_efmit_S3M2 = REAL(VECTOR_ELT(out_F_fmi_S3M2,e));
                    double  *r_F_efmit_S3M3 = REAL(VECTOR_ELT(out_F_fmi_S3M3,e)); double  *r_F_efmit_S3M4 = REAL(VECTOR_ELT(out_F_fmi_S3M4,e));
                    double  *r_F_efmit_S4M1 = REAL(VECTOR_ELT(out_F_fmi_S4M1,e)); double  *r_F_efmit_S4M2 = REAL(VECTOR_ELT(out_F_fmi_S4M2,e));
                    double  *r_F_efmit_S4M3 = REAL(VECTOR_ELT(out_F_fmi_S4M3,e)); double  *r_F_efmit_S4M4 = REAL(VECTOR_ELT(out_F_fmi_S4M4,e));

                    double  *r_N_ei0_S1M1 = REAL(v_N_ei0_S1M1); double  *r_N_ei0_S1M2 = REAL(v_N_ei0_S1M2);
                    double  *r_N_ei0_S1M3 = REAL(v_N_ei0_S1M3); double  *r_N_ei0_S1M4 = REAL(v_N_ei0_S1M4);

                    double  *r_matwt_M1 = REAL(v_matwt_M1); double  *r_matwt_M2 = REAL(v_matwt_M2);
                    double  *r_matwt_M3 = REAL(v_matwt_M3); double  *r_matwt_M4 = REAL(v_matwt_M4);

                    double  *r_N_e0t_S1M1 = REAL(v_N_e0t_S1M1); double  *r_N_e0t_S2M2 = REAL(v_N_e0t_S2M2);
                    double  *r_N_e0t_S3M3 = REAL(v_N_e0t_S3M3); double  *r_N_e0t_S4M4 = REAL(v_N_e0t_S4M4);

        //ajout 24/04/2018 pour prise en compte forçage recrutement XSA
        if ((!isNull(getListElement(recList,CHAR(STRING_ELT(sppList,e))))) & (ind_t>1) & (nbI>1) & Reality) { //seulement applicable à t=3
            r_N_e0t_S1M1[0] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[0 + 4*ind_t];
            r_N_e0t_S2M2[0] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[1 + 4*ind_t];
            r_N_e0t_S3M3[0] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[2 + 4*ind_t];
            r_N_e0t_S4M4[0] = REAL(getListElement(recList,CHAR(STRING_ELT(sppList,e))))[3 + 4*ind_t];
        }


                    double  *r_Foth_i_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 116));
                    double  *r_Foth_i_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 117));
                    double  *r_Foth_i_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 118));
                    double  *r_Foth_i_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 119));
                    double  *r_Foth_i_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 120));
                    double  *r_Foth_i_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 121));
                    double  *r_Foth_i_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 122));
                    double  *r_Foth_i_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 123));
                    double  *r_Foth_i_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 124));
                    double  *r_Foth_i_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 125));
                    double  *r_Foth_i_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 126));
                    double  *r_Foth_i_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 127));
                    double  *r_Foth_i_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 128));
                    double  *r_Foth_i_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 129));
                    double  *r_Foth_i_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 130));
                    double  *r_Foth_i_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 131));

                    double  *r_Froth_i_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 132));
                    double  *r_Froth_i_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 133));
                    double  *r_Froth_i_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 134));
                    double  *r_Froth_i_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 135));
                    double  *r_Froth_i_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 136));
                    double  *r_Froth_i_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 137));
                    double  *r_Froth_i_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 138));
                    double  *r_Froth_i_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 139));
                    double  *r_Froth_i_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 140));
                    double  *r_Froth_i_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 141));
                    double  *r_Froth_i_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 142));
                    double  *r_Froth_i_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 143));
                    double  *r_Froth_i_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 144));
                    double  *r_Froth_i_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 145));
                    double  *r_Froth_i_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 146));
                    double  *r_Froth_i_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 147));


                                    //Z
                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                        double temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M1[ind_i + nbI*ind_t];
                                        }

                                   if (ind_i==0) {rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M2[ind_i + nbI*ind_t];
                                        }
                                   }


                                   if (ind_i==0) {rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M3[ind_i + nbI*ind_t];
                                        }
                                   }

                                   if (ind_i==0) {rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S1M4[ind_i + nbI*ind_t];
                                        }
                                   }


                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M1[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M2[ind_i + nbI*ind_t];
                                        }

                                   if (ind_i==0) {rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M3[ind_i + nbI*ind_t];
                                        }
                                   }

                                   if (ind_i==0) {rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S2M4[ind_i + nbI*ind_t];
                                        }
                                   }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M1[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M2[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M3[ind_i + nbI*ind_t];
                                        }

                                   if (ind_i==0) {rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = 0.0;

                                   } else {

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S3M4[ind_i + nbI*ind_t];
                                        }
                                   }


                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M1[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M2[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M3[ind_i + nbI*ind_t];
                                        }

                                        temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {
                                          if (!ISNA(r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                              temp = temp +  r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];
                                        }
                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i_S4M4[ind_i + nbI*ind_t];
                                        }

                                    }

//fichier << "mm" << endl;
                    if (ZoptSS3) {

                        double *Ztemp = REAL(getListElement(ZtempList, CHAR(STRING_ELT(sppList,e))));

                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                           rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(0*nbI)];
                           rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(1*nbI)];
                           rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(2*nbI)];
                           rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(3*nbI)];

                           rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(4*nbI)];
                           rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(5*nbI)];
                           rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(6*nbI)];
                           rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(7*nbI)];

                           rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(8*nbI)];
                           rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(9*nbI)];
                           rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(10*nbI)];
                           rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(11*nbI)];

                           rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(12*nbI)];
                           rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(13*nbI)];
                           rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(14*nbI)];
                           rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = Ztemp[ind_i+(15*nbI)];

                        }

                    }

//fichier << "mm2" << endl;

                                    //---------
                                    // calcul de N_eit
                                    //---------

if (ind_t==1) {


                                        //S1
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                            if (ind_i == 0) { //recrutement

                                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_e0t_S1M1[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;
                                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;
                                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;

                                            } else {

                                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                 r_N_ei0_S1M1[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                 r_N_ei0_S1M2[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                 r_N_ei0_S1M3[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                 r_N_ei0_S1M4[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];

                                            }
                                        }

                                        //S2
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S2M2[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                           } else {

                                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }

                                        //S3
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S3M3[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                           } else {

                                              rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }

                                        //S4
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S4M4[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];

                                           } else {

                                              rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }

}




if (ind_t>1) {

                                        //S1
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                            if (ind_i == 0) { //recrutement

                                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  r_N_e0t_S1M1[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;
                                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;
                                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] = 0.0;

                                            } else {

                                                if (ind_i==(nbI-1)) {

                                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4) +
                                                rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4) +
                                                rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4) +
                                                rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4) +
                                                rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);

                                                } else {

                                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M1[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M2[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M3[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);
                                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + (ind_i-1)*fact4_D[2] + (ind_t-1)*fact4_D[3]]*
                                                exp(-rans_Z_eit_S4M4[0*fact1_D[0] + 0*fact1_D[1] + (ind_i-1)*fact1_D[2] + (ind_t-1)*fact1_D[3]]/4);

                                                }
                                            }
                                        }

                                        //S2
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S2M2[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                           } else {

                                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S1M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }

                                        //S3
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S3M3[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];
                                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                           } else {

                                              rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S2M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }

                                        //S4
                                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                           if (ind_i == 0) { //recrutement

                                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4) +
                                                  r_N_e0t_S4M4[0*fact5_D[0] + 0*fact5_D[1] + ind_i*fact5_D[2] + 0*fact5_D[3]];

                                           } else {

                                              rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);
                                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] =
                                                  rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]*
                                                  exp(-rans_Z_eit_S3M4[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]]/4);

                                            }

                                        }


}




// on peut désormais évaluer F, Z et N au niveau annuel et global
            for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++)
            for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++)
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                r_F_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]] =

                            (r_F_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_F_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_F_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]));


                r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]] =

                            (r_Fr_efmit_S1M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S1M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S1M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S2M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S2M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S2M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S3M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S3M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S3M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]])) +

                            (r_Fr_efmit_S4M1[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M2[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M3[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                            r_Fr_efmit_S4M4[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]*
                               rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]) /
                               (4*(rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] +
                                   rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]]));

            }




for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

     r_Froth_i[ind_i+ind_t*nbI] =
      (r_Froth_i_S1M1[ind_i+ind_t*nbI]*rans_N_eit_S1M1[ind_i+ind_t*nbI] +
      r_Froth_i_S1M2[ind_i+ind_t*nbI]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
      r_Froth_i_S1M3[ind_i+ind_t*nbI]*rans_N_eit_S1M3[ind_i+ind_t*nbI] +
      r_Froth_i_S1M4[ind_i+ind_t*nbI]*rans_N_eit_S1M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
           rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S2M1[ind_i+ind_t*nbI]*rans_N_eit_S2M1[ind_i+ind_t*nbI] +
      r_Froth_i_S2M2[ind_i+ind_t*nbI]*rans_N_eit_S2M2[ind_i+ind_t*nbI] +
      r_Froth_i_S2M3[ind_i+ind_t*nbI]*rans_N_eit_S2M3[ind_i+ind_t*nbI] +
      r_Froth_i_S2M4[ind_i+ind_t*nbI]*rans_N_eit_S2M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S2M1[ind_i+ind_t*nbI] + rans_N_eit_S2M2[ind_i+ind_t*nbI] +
           rans_N_eit_S2M3[ind_i+ind_t*nbI] + rans_N_eit_S2M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S3M1[ind_i+ind_t*nbI]*rans_N_eit_S3M1[ind_i+ind_t*nbI] +
      r_Froth_i_S3M2[ind_i+ind_t*nbI]*rans_N_eit_S3M2[ind_i+ind_t*nbI] +
      r_Froth_i_S3M3[ind_i+ind_t*nbI]*rans_N_eit_S3M3[ind_i+ind_t*nbI] +
      r_Froth_i_S3M4[ind_i+ind_t*nbI]*rans_N_eit_S3M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S3M1[ind_i+ind_t*nbI] + rans_N_eit_S3M2[ind_i+ind_t*nbI] +
           rans_N_eit_S3M3[ind_i+ind_t*nbI] + rans_N_eit_S3M4[ind_i+ind_t*nbI])) +

      (r_Froth_i_S4M1[ind_i+ind_t*nbI]*rans_N_eit_S4M1[ind_i+ind_t*nbI] +
      r_Froth_i_S4M2[ind_i+ind_t*nbI]*rans_N_eit_S4M2[ind_i+ind_t*nbI] +
      r_Froth_i_S4M3[ind_i+ind_t*nbI]*rans_N_eit_S4M3[ind_i+ind_t*nbI] +
      r_Froth_i_S4M4[ind_i+ind_t*nbI]*rans_N_eit_S4M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S4M1[ind_i+ind_t*nbI] + rans_N_eit_S4M2[ind_i+ind_t*nbI] +
           rans_N_eit_S4M3[ind_i+ind_t*nbI] + rans_N_eit_S4M4[ind_i+ind_t*nbI]));


    r_Foth_i[ind_i+ind_t*nbI] =
      (r_Foth_i_S1M1[ind_i+ind_t*nbI]*rans_N_eit_S1M1[ind_i+ind_t*nbI] +
      r_Foth_i_S1M2[ind_i+ind_t*nbI]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
      r_Foth_i_S1M3[ind_i+ind_t*nbI]*rans_N_eit_S1M3[ind_i+ind_t*nbI] +
      r_Foth_i_S1M4[ind_i+ind_t*nbI]*rans_N_eit_S1M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
           rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S2M1[ind_i+ind_t*nbI]*rans_N_eit_S2M1[ind_i+ind_t*nbI] +
      r_Foth_i_S2M2[ind_i+ind_t*nbI]*rans_N_eit_S2M2[ind_i+ind_t*nbI] +
      r_Foth_i_S2M3[ind_i+ind_t*nbI]*rans_N_eit_S2M3[ind_i+ind_t*nbI] +
      r_Foth_i_S2M4[ind_i+ind_t*nbI]*rans_N_eit_S2M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S2M1[ind_i+ind_t*nbI] + rans_N_eit_S2M2[ind_i+ind_t*nbI] +
           rans_N_eit_S2M3[ind_i+ind_t*nbI] + rans_N_eit_S2M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S3M1[ind_i+ind_t*nbI]*rans_N_eit_S3M1[ind_i+ind_t*nbI] +
      r_Foth_i_S3M2[ind_i+ind_t*nbI]*rans_N_eit_S3M2[ind_i+ind_t*nbI] +
      r_Foth_i_S3M3[ind_i+ind_t*nbI]*rans_N_eit_S3M3[ind_i+ind_t*nbI] +
      r_Foth_i_S3M4[ind_i+ind_t*nbI]*rans_N_eit_S3M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S3M1[ind_i+ind_t*nbI] + rans_N_eit_S3M2[ind_i+ind_t*nbI] +
           rans_N_eit_S3M3[ind_i+ind_t*nbI] + rans_N_eit_S3M4[ind_i+ind_t*nbI])) +

      (r_Foth_i_S4M1[ind_i+ind_t*nbI]*rans_N_eit_S4M1[ind_i+ind_t*nbI] +
      r_Foth_i_S4M2[ind_i+ind_t*nbI]*rans_N_eit_S4M2[ind_i+ind_t*nbI] +
      r_Foth_i_S4M3[ind_i+ind_t*nbI]*rans_N_eit_S4M3[ind_i+ind_t*nbI] +
      r_Foth_i_S4M4[ind_i+ind_t*nbI]*rans_N_eit_S4M4[ind_i+ind_t*nbI]) /
       (4*(rans_N_eit_S4M1[ind_i+ind_t*nbI] + rans_N_eit_S4M2[ind_i+ind_t*nbI] +
           rans_N_eit_S4M3[ind_i+ind_t*nbI] + rans_N_eit_S4M4[ind_i+ind_t*nbI]));

}


                                double fmax = 0.0, sumWt = 0.0;

                                    //équation
                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                        double temp = 0.0;

                                        for (int ind_f = 0 ; ind_f < (1 + (nbF - 1)*(dim_Fr_efmit[0]>0)) ; ind_f++) //attention aux sommations multiples!!!
                                        for (int ind_m = 0 ; ind_m < (1 + (nbM - 1)*(dim_Fr_efmit[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]]))
                                            temp = temp +  r_Fr_efmit[ind_f*fact2_D[0] + ind_m*fact2_D[1] + ind_i*fact2_D[2] + ind_t*fact2_D[3]];

                                        }


                                        if (ISNA(r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]])) {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] = NA_REAL;
                                        } else {
                                          rans_Z_eit[0*fact1_D[0] + 0*fact1_D[1] + ind_i*fact1_D[2] + ind_t*fact1_D[3]] =
                                            temp + r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]] +
                                            r_Froth_i[ind_i + nbI*ind_t];

                                        }


                                    //on en profite pour calculer Fbar

                                    fmax = fmax + (temp + r_Froth_i[ind_i + nbI*ind_t])*r_Fbar[ind_i];
                                    sumWt = sumWt + r_Fbar[ind_i];

                                    // et remplir N_eit (effectifs à la saison 1)
                                    rans_N_eit[ind_i + nbI*ind_t] = rans_N_eit_S1M1[ind_i+ind_t*nbI] + rans_N_eit_S1M2[ind_i+ind_t*nbI] +
                                         rans_N_eit_S1M3[ind_i+ind_t*nbI] + rans_N_eit_S1M4[ind_i+ind_t*nbI];

                                    }


                        double tempSSB = 0.0;
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                            tempSSB = tempSSB + r_matwt_M1[ind_i]*rans_N_eit_S1M1[ind_i+ind_t*nbI] + r_matwt_M2[ind_i]*rans_N_eit_S1M2[ind_i+ind_t*nbI] +
                                  r_matwt_M3[ind_i]*rans_N_eit_S1M3[ind_i+ind_t*nbI] + r_matwt_M4[ind_i]*rans_N_eit_S1M4[ind_i+ind_t*nbI];
                        }


                        rans_SSB_et[ind_t] = tempSSB ;


    //ajout 01/06/2018 : recrutement alétoire sur la base de recParamList

        if ((!isNull(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))))) & (ind_t>0) & Reality) { //seulement applicable à t>0 et pour une dynamique SS3
            double *param = REAL(getListElement(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))),"param"));
            double *ventil = REAL(getListElement(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))),"ventil"));
            int del = INTEGER(getListElement(getListElement(recParamList,CHAR(STRING_ELT(sppList,e))),"delay"))[0];
            if ((!ISNA(param[ind_t])) & (ind_t>=del)) {
                double recr = 0.0;
                if ((1/param[ind_t + 1*nbT])>rans_SSB_et[ind_t - del]) { //on suppose ici que la modification qu'on s'apprête à opérer sur les recrutment laisse SSB constant (ce qui n'est qu'approximativement vrai --> r_matwt_M1[age 0] ~ 4.567683e-09, donc non strictement nul
                    recr = param[ind_t + 0*nbT] * rans_SSB_et[ind_t - del] * param[ind_t + 2*nbT];
                } else{
                    recr = param[ind_t + 0*nbT] * param[ind_t + 2*nbT] / param[ind_t + 1*nbT];
                }


                        //S1
                rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] = recr*ventil[0];

                        //S2
                rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                         rans_N_eit_S1M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                         exp(-rans_Z_eit_S1M1[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] = recr*ventil[1];

                        //S3
                rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                          rans_N_eit_S2M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                          exp(-rans_Z_eit_S2M1[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                          rans_N_eit_S2M2[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                          exp(-rans_Z_eit_S2M2[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] = recr*ventil[2];

                         //S4
                rans_N_eit_S4M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                           rans_N_eit_S3M1[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                           exp(-rans_Z_eit_S3M1[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S4M2[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                           rans_N_eit_S3M2[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                           exp(-rans_Z_eit_S3M2[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S4M3[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] =
                           rans_N_eit_S3M3[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]]*
                           exp(-rans_Z_eit_S3M3[0*fact1_D[0] + 0*fact1_D[1] + 0*fact1_D[2] + ind_t*fact1_D[3]]/4);
                rans_N_eit_S4M4[0*fact4_D[0] + 0*fact4_D[1] + 0*fact4_D[2] + ind_t*fact4_D[3]] = recr*ventil[3];


                rans_N_eit[0 + nbI*ind_t] = rans_N_eit_S1M1[0+ind_t*nbI] + rans_N_eit_S1M2[0+ind_t*nbI] +
                           rans_N_eit_S1M3[0+ind_t*nbI] + rans_N_eit_S1M4[0+ind_t*nbI];


            }
        }

    //ajout 01/06/2018 : --------------------------------------------------


                      rans_Fbar_et[ind_t] = fmax/sumWt;



                                for (int ind_f = 0 ; ind_f < 1 ; ind_f++)
                                for (int ind_m = 0 ; ind_m < 1 ; ind_m++){

                                    double temp = 0.0;

                                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                                        temp = temp +
                                         rans_N_eit[ind_f*fact4_D[0] + ind_m*fact4_D[1] + ind_i*fact4_D[2] + ind_t*fact4_D[3]] *
                                         r_w_ei[ind_f*fact8_D[0] + ind_m*fact8_D[1] + ind_i*fact8_D[2] + ind_t*fact8_D[3]] / 1000;

                                    rans_B_et[ind_f*fact7_D[0] + ind_m*fact7_D[1] + 0*fact7_D[2] + ind_t*fact7_D[3]] = temp;

                                }




    }
//Rprintf("K10\n");fichier << "K10" << endl;
                    UNPROTECT(2);//Rprintf("K11\n");
                    if (Qvec[e]==1) UNPROTECT(4+4+4);
}}


//fichier.close();
}
}












//------------------------------------------
// Module 'Captures, rejets et débarquements'
//------------------------------------------

extern "C" {

void BioEcoPar::CatchDL(SEXP list, int ind_t, SEXP EVAR)
{



//        string str1b, str2b, str3b;
//        str1b = "debugHKEcatch";//str1b = "C:\\Users\\mmerzere\\Desktop\\test3\\debugHKEcatch_V";//
//        str3b = "_V";
//        str2b = ".txt";
//
//        std::stringstream ssi, ssy;
//        ssi << ind_t;
//        ssy << EcoIndCopy[0];
//        str1b = str1b + ssi.str() + str3b + ssy.str() + str2b;
//
//        ofstream fichier1(str1b.c_str() , ios::out | ios::trunc);
//
//        fichier1 << "Début" << endl;
//



SEXP Flist;
PROTECT(Flist = getListElement(list, "Fleet")); //unp

double *rans_Yothsue_fm = REAL(getListElement(Flist, "Yothsue_f_m"));
double *reff1 = REAL(getListElement(Flist, "effort1_f_m"));
double *reff2 = REAL(getListElement(Flist, "effort2_f_m"));
double *rnbv = REAL(getListElement(Flist, "nbv_f_m"));

SEXP ans_Lstat=R_NilValue; //added 07/09/18

if (cUpdate) {

    SEXP    elmt, dimCst, Dim, dimCst_F_efmit, dimCst_N_eit, dimCst_Z_eit, dimCst_wL_ei, dimCst_wD_ei, dimCst_d_efmit,
            dimCst_d_eStat, dimCst_LPUE_eStat, dimCst_eStat, v_d_eStat, v_LPUE_eStat, v_B_et,
            intAge, v_F_efmit, v_N_eit, v_Z_eit, v_wL_ei, v_wD_ei, v_d_efmit, v_doth_eit, dimCst2, Dim2,
            cFACT1, cFACT2, cFACT3, cFACT4, cFACT5, cFACT6, cFACT7,
            dimYtot, dimCstYtot, dimNamYtot,
            dimCstOQ_ft, dimCstOQ_t, dimnames_oqD_eft, dimnames_oqD_et;

    SEXP ans_C_efmit=R_NilValue, ans_Y_efmit=R_NilValue, ans_D_efmit=R_NilValue, ans_L_efmit=R_NilValue,
         dimnames=R_NilValue, rnames_Esp=R_NilValue, ans_C_eit=R_NilValue, ans_Y_eit=R_NilValue, ans_L_eit=R_NilValue, dimnames2=R_NilValue,
         ans_Ystat=R_NilValue, /*ans_Lstat=R_NilValue, */ans_Dstat=R_NilValue, dimnames_eStat=R_NilValue, rnames_eStat=R_NilValue,
         ans_DD_efmit=R_NilValue, ans_LD_efmit=R_NilValue,
         ans_statDD=R_NilValue, ans_statLD=R_NilValue, ans_statLDst=R_NilValue, ans_statLDor=R_NilValue,
         ans_oqD_eft=R_NilValue, ans_oqD_et=R_NilValue, ans_oqDstat=R_NilValue;

    int *dim_F_efmit, *dim_N_eit, *dim_Z_eit, *dim_wL_ei, *dim_wD_ei, *dim_d_efmit, *dimC, *dim, *dim2, *dimcst2,
            *dim_d_eStat, *dim_LPUE_eStat, *dim_eStat, *int_dimYtot, *int_dimCstYtot, *dimOQ_ft, *dimOQ_t;
    int nbI;

    double *rans_C_efmit=&NA_REAL, *rans_Y_efmit=&NA_REAL, *rans_D_efmit=&NA_REAL, *rans_L_efmit=&NA_REAL, *r_F_efmit=&NA_REAL, *r_N_eit=&NA_REAL,
           *r_Z_eit=&NA_REAL, *r_wL_ei=&NA_REAL, *r_wD_ei=&NA_REAL, *r_d_efmit=&NA_REAL, *r_B_et=&NA_REAL,
            *rans_C_eit=&NA_REAL, *rans_Y_eit=&NA_REAL, *rans_L_eit=&NA_REAL, *rans_Ystat=&NA_REAL, *rans_Lstat=&NA_REAL, *rans_Dstat=&NA_REAL,
            *rans_Ytot_fm=&NA_REAL, *rans_DD_efmit=&NA_REAL,
            *rans_LD_efmit=&NA_REAL, *rans_statDD=&NA_REAL, *rans_statLD=&NA_REAL, *rans_statLDst=&NA_REAL, *rans_statLDor=&NA_REAL, *doth_eit=&NA_REAL,
            *rans_oqD_eft=&NA_REAL, *rans_oqD_et=&NA_REAL, *rans_oqDstat=&NA_REAL;

if (ind_t==0) {

    PROTECT(rnames_Esp = allocVector(STRSXP, nbE));
    setAttrib(out_C_efmit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_C_eit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Y_eit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_L_eit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_Y_efmit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_D_efmit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_L_efmit, R_NamesSymbol, rnames_Esp);
    setAttrib(out_DD_efmi, R_NamesSymbol, rnames_Esp);
    setAttrib(out_LD_efmi, R_NamesSymbol, rnames_Esp);
    setAttrib(out_oqD_eft, R_NamesSymbol, rnames_Esp);
    setAttrib(out_oqD_et, R_NamesSymbol, rnames_Esp);

    PROTECT(rnames_eStat = allocVector(STRSXP, nbEstat)); //+1 t0
    setAttrib(out_Ystat, R_NamesSymbol, rnames_eStat);
    setAttrib(out_Lstat, R_NamesSymbol, rnames_eStat);
    setAttrib(out_Dstat, R_NamesSymbol, rnames_eStat);
    setAttrib(out_statDD_efm, R_NamesSymbol, rnames_eStat);
    setAttrib(out_statLD_efm, R_NamesSymbol, rnames_eStat);
    setAttrib(out_statLDst_efm, R_NamesSymbol, rnames_eStat);
    setAttrib(out_statLDor_efm, R_NamesSymbol, rnames_eStat);
    setAttrib(out_oqDstat, R_NamesSymbol, rnames_eStat);

}


PROTECT(dimCstYtot = allocVector(INTSXP, 4)); //unp
int_dimCstYtot = INTEGER(dimCstYtot); int_dimCstYtot[0] = nbF; int_dimCstYtot[1] =nbM; int_dimCstYtot[2] = 0; int_dimCstYtot[3] = nbT;
PROTECT(dimYtot = allocVector(INTSXP, 3)); //unp
int_dimYtot = INTEGER(dimYtot); int_dimYtot[0] = nbF; int_dimYtot[1] = nbM; int_dimYtot[2] = nbT;
PROTECT(dimNamYtot = allocVector(VECSXP,3)); //unp
  SET_VECTOR_ELT(dimNamYtot, 0, fleetList);
  SET_VECTOR_ELT(dimNamYtot, 1, metierList);
  SET_VECTOR_ELT(dimNamYtot, 2, times);
setAttrib(out_Ytot_fm, R_DimSymbol, dimYtot);
setAttrib(out_Ytot_fm, R_DimNamesSymbol, dimNamYtot);
setAttrib(out_Ytot_fm, install("DimCst"), dimCstYtot);

rans_Ytot_fm = REAL(out_Ytot_fm);

//on l'initialise avec Yothsue_fm


for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
  rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Yothsue_fm[ind_f + nbF*ind_m]*reff1[ind_f + nbF*ind_m]*reff2[ind_f + nbF*ind_m]*rnbv[ind_f + nbF*ind_m];

if (nbE>0) {
//Rprintf("H1\n");fichier << "H1" << endl;

    for (int e = 0 ; e < nbE ; e++) {
//Rprintf("H2\n");fichier << "H2" << endl;
                            PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));
                            PROTECT(intAge = getListElement(namDC, CHAR(STRING_ELT(sppList,e))));

                            nbI = length(getListElement(elmt, "modI"));

                            PROTECT(v_wL_ei = getListElement(elmt, "wL_i"));
                            PROTECT(v_wD_ei = getListElement(elmt, "wD_i"));
                            PROTECT(v_d_efmit = getListElement(elmt, "d_i"));
                            PROTECT(v_doth_eit = getListElement(elmt, "doth_i"));

                            PROTECT(v_F_efmit = getListElement(out_F_fmi, CHAR(STRING_ELT(sppList,e))));
                            PROTECT(v_Z_eit = getListElement(out_Z_eit , CHAR(STRING_ELT(sppList,e))));
                            PROTECT(v_N_eit = getListElement(out_N_eit , CHAR(STRING_ELT(sppList,e))));
                            PROTECT(v_B_et = getListElement(out_B_et , CHAR(STRING_ELT(sppList,e))));

                            PROTECT(dimCst_wL_ei = getAttrib(v_wL_ei, install("DimCst")));
                            PROTECT(dimCst_wD_ei = getAttrib(v_wD_ei, install("DimCst")));
                            PROTECT(dimCst_d_efmit = getAttrib(v_d_efmit, install("DimCst")));
                            PROTECT(dimCst_F_efmit = getAttrib(v_F_efmit, install("DimCst")));
                            PROTECT(dimCst_N_eit = getAttrib(v_N_eit, install("DimCst")));
                            PROTECT(dimCst_Z_eit = getAttrib(v_Z_eit, install("DimCst")));
//Rprintf("H3\n");fichier << "H3" << endl;
                            //tests sur les dimensions :
                            dim_d_efmit = INTEGER(dimCst_d_efmit);
                            if (((dim_d_efmit[0]!=0) & (dim_d_efmit[0]!=nbF)) | ((dim_d_efmit[1]!=0) & (dim_d_efmit[1]!=nbM)) |
                                ((dim_d_efmit[2]!=0) & (dim_d_efmit[2]!=nbI)) | ((dim_d_efmit[3]!=0) & (dim_d_efmit[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in d_efmit element. Check .ini biological parameters files !!\n");
                            }

                            dim_wL_ei = INTEGER(dimCst_wL_ei);
                            if ((dim_wL_ei[0]!=0) | (dim_wL_ei[1]!=0) |
                                ((dim_wL_ei[2]!=0) & (dim_wL_ei[2]!=nbI)) | (dim_wL_ei[3]!=0))
                            {
                                error("Non_homogeneous dimensions in wL_ei element. Check .ini biological parameters files !!\n");
                            }

                            dim_wD_ei = INTEGER(dimCst_wD_ei);
                            if ((dim_wD_ei[0]!=0) | (dim_wD_ei[1]!=0) |
                                ((dim_wD_ei[2]!=0) & (dim_wD_ei[2]!=nbI)) | (dim_wD_ei[3]!=0))
                            {
                                error("Non_homogeneous dimensions in wD_ei element. Check .ini biological parameters files !!\n");
                            }

                            dim_F_efmit = INTEGER(dimCst_F_efmit);
                            if (((dim_F_efmit[0]!=0) & (dim_F_efmit[0]!=nbF)) | ((dim_F_efmit[1]!=0) & (dim_F_efmit[1]!=nbM)) |
                                ((dim_F_efmit[2]!=0) & (dim_F_efmit[2]!=nbI)) | ((dim_F_efmit[3]!=0) & (dim_F_efmit[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in F_efmit element. Check .ini biological parameters files !!\n");
                            }

                            dim_N_eit = INTEGER(dimCst_N_eit);
                            if ((dim_N_eit[0]!=0) | (dim_N_eit[1]!=0) |
                                ((dim_N_eit[2]!=0) & (dim_N_eit[2]!=nbI)) | ((dim_N_eit[3]!=0) & (dim_N_eit[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in N_eit element. Check .ini biological parameters files !!\n");
                            }

                            dim_Z_eit = INTEGER(dimCst_Z_eit);
                            if ((dim_Z_eit[0]!=0) | (dim_Z_eit[1]!=0) |
                                ((dim_Z_eit[2]!=0) & (dim_Z_eit[2]!=nbI)) | ((dim_Z_eit[3]!=0) & (dim_Z_eit[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in Z_eit element. Check .ini biological parameters files !!\n");
                            }

                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////

                            //---------
                            // calcul de C_efmit
                            //---------

                            //on détermine l'attribut Dimension de C_efmit
                            PROTECT(dimCst = allocVector(INTSXP, 4));
                            dimC = INTEGER(dimCst);
                            dimC[0] = dim_F_efmit[0] ; dimC[1] = dim_F_efmit[1] ; dimC[2] = dim_F_efmit[2];
                            dimC[3] = imax2(dim_N_eit[3] , dim_F_efmit[3]);

                            int count = 0, prod = 1, count2 = 0, count3 = 0;

                            for (int k = 0 ; k < 4 ; k++) {

                                if (dimC[k]>0) {
                                    count++;
                                    prod = prod * dimC[k];
                                }

                            }

                            PROTECT(Dim = allocVector(INTSXP, count));
                            dim = INTEGER(Dim);

                            for (int k = 0 ; k < 4 ; k++) {

                                if (dimC[k]>0) {
                                    dim[count2] = dimC[k];
                                    count2++;
                                    }
                            }

                            PROTECT(dimCst2 = allocVector(INTSXP, 4));
                            dimcst2 = INTEGER(dimCst2); dimcst2[0] = 0; dimcst2[1] = 0; dimcst2[2] = nbI; dimcst2[3] = nbT;
                            PROTECT(Dim2 = allocVector(INTSXP, 2));
                            dim2 = INTEGER(Dim2); dim2[0] = nbI; dim2[1] = nbT;
//Rprintf("H4\n");fichier << "H4" << endl;

                    if (ind_t==0){
//Rprintf("H4.1\n");fichier << "H4.1" << endl;
                            //on crée le tableau résultat pour l'espèce en question
                            PROTECT(ans_C_efmit = NEW_NUMERIC(prod));
                            setAttrib(ans_C_efmit, R_DimSymbol, Dim);

                            PROTECT(ans_C_eit = NEW_NUMERIC(nbI*nbT));
                            setAttrib(ans_C_eit, R_DimSymbol, Dim2);

                            PROTECT(dimnames = allocVector(VECSXP,count));
                            if (dimC[0]>0) {SET_VECTOR_ELT(dimnames, count3, fleetList) ; count3++;}
                            if (dimC[1]>0) {SET_VECTOR_ELT(dimnames, count3, metierList) ; count3++;}
                            if (dimC[2]>0) {SET_VECTOR_ELT(dimnames, count3, intAge) ; count3++;}
                            if (dimC[3]>0) {SET_VECTOR_ELT(dimnames, count3, times) ; count3++;}

                            PROTECT(dimnames2 = allocVector(VECSXP,2));
                            SET_VECTOR_ELT(dimnames2, 0, intAge);
                            SET_VECTOR_ELT(dimnames2, 1, times);

                            rans_C_efmit = REAL(ans_C_efmit);
                            rans_C_eit = REAL(ans_C_eit);
//Rprintf("H4.2\n");fichier << "H4.2" << endl;
                    } else {

                            rans_C_efmit = REAL(VECTOR_ELT(out_C_efmit, e));
                            rans_C_eit = REAL(VECTOR_ELT(out_C_eit, e));
//Rprintf("H4.3\n");fichier << "H4.3" << endl;
                    }


                            r_F_efmit = REAL(v_F_efmit);
                            r_N_eit = REAL(v_N_eit);
                            r_Z_eit = REAL(v_Z_eit);
                            r_B_et = REAL(v_B_et);
//Rprintf("H4.4\n");fichier << "H4.4" << endl;
                            //facteurs des indices
                            PROTECT(cFACT1 = iDim(dimC));
                            PROTECT(cFACT2 = iDim(dim_F_efmit));
                            PROTECT(cFACT3 = iDim(dim_N_eit));
                            PROTECT(cFACT4 = iDim(dim_Z_eit));

                            int *fact1_C = INTEGER(cFACT1);
                            int *fact2_C = INTEGER(cFACT2);
                            int *fact3_C = INTEGER(cFACT3);
                            int *fact4_C = INTEGER(cFACT4);

                            double *r_Fot_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
//Rprintf("H4.5\n");fichier << "H4.5" << endl;
                            //équation
                            if (Qvec[e]==1) {
//Rprintf("H4.6\n");fichier << "H4.6" << endl;
                                double *r_F_fmi_S1M1 = REAL(getListElement(out_F_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M2 = REAL(getListElement(out_F_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M3 = REAL(getListElement(out_F_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M4 = REAL(getListElement(out_F_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M1 = REAL(getListElement(out_F_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M2 = REAL(getListElement(out_F_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M3 = REAL(getListElement(out_F_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M4 = REAL(getListElement(out_F_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M1 = REAL(getListElement(out_F_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M2 = REAL(getListElement(out_F_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M3 = REAL(getListElement(out_F_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M4 = REAL(getListElement(out_F_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M1 = REAL(getListElement(out_F_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M2 = REAL(getListElement(out_F_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M3 = REAL(getListElement(out_F_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M4 = REAL(getListElement(out_F_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));
//Rprintf("H4.7\n");fichier << "H4.7" << endl;//PrintValue(out_Z_eit_S1M1);
                                double *r_Z_eit_S1M1 = REAL(getListElement(out_Z_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.1\n");
                                double *r_Z_eit_S1M2 = REAL(getListElement(out_Z_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.2\n");
                                double *r_Z_eit_S1M3 = REAL(getListElement(out_Z_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.3\n");
                                double *r_Z_eit_S1M4 = REAL(getListElement(out_Z_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.4\n");
                                double *r_Z_eit_S2M1 = REAL(getListElement(out_Z_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M2 = REAL(getListElement(out_Z_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M3 = REAL(getListElement(out_Z_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M4 = REAL(getListElement(out_Z_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M1 = REAL(getListElement(out_Z_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M2 = REAL(getListElement(out_Z_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M3 = REAL(getListElement(out_Z_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M4 = REAL(getListElement(out_Z_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M1 = REAL(getListElement(out_Z_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M2 = REAL(getListElement(out_Z_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M3 = REAL(getListElement(out_Z_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M4 = REAL(getListElement(out_Z_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H4.8\n");fichier << "H4.8" << endl;
                                double *r_N_eit_S1M1 = REAL(getListElement(out_N_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M2 = REAL(getListElement(out_N_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M3 = REAL(getListElement(out_N_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M4 = REAL(getListElement(out_N_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M1 = REAL(getListElement(out_N_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M2 = REAL(getListElement(out_N_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M3 = REAL(getListElement(out_N_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M4 = REAL(getListElement(out_N_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M1 = REAL(getListElement(out_N_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M2 = REAL(getListElement(out_N_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M3 = REAL(getListElement(out_N_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M4 = REAL(getListElement(out_N_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M1 = REAL(getListElement(out_N_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M2 = REAL(getListElement(out_N_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M3 = REAL(getListElement(out_N_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M4 = REAL(getListElement(out_N_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H5aaa\n");fichier << "H5aaa" << endl;
                                double  *r_M_ei = REAL(getListElement(elmt, "M_i"));//Rprintf("H5.1\n");
                                int *fact3_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 14));

                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                    rans_C_eit[ind_i + ind_t*nbI] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));
//Rprintf("H6\n");fichier << "H6" << endl;

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                                    rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                      (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));

                                }

                                }


                            } else {
//Rprintf("H7\n");fichier << "H7" << endl;
                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                                      rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] *
                                        r_N_eit[ind_f*fact3_C[0] + ind_m*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[ind_f*fact4_C[0] + ind_m*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[ind_f*fact4_C[0] + ind_m*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]];

                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                    double temp = 0.0;

                                    for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                    for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];

                                    }

                                    rans_C_eit[ind_i + ind_t*nbI] =
                                        (temp + r_Fot_i[ind_i + ind_t*nbI]) * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]];

                                }

                            }





                    if (ind_t==0){

                            setAttrib(ans_C_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_C_efmit, install("DimCst"), dimCst);

                            setAttrib(ans_C_eit, R_DimNamesSymbol, dimnames2);
                            setAttrib(ans_C_eit, install("DimCst"), dimCst2);


                            SET_VECTOR_ELT(out_C_efmit, e, ans_C_efmit);
                            SET_VECTOR_ELT(out_C_eit, e, ans_C_eit);

                    }

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 23, v_F_efmit);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 24, v_N_eit);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 25, v_Z_eit);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 26, cFACT1);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 27, cFACT2);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 28, cFACT3);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 29, cFACT4);


                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////

                             //---------
                            // calcul de Y_efmit
                            //---------

                        //on considère les dimensions de C, Y, D et L homogènes sur tout le module --> pas besoin de les redéfinir

                    if (ind_t==0){

                            PROTECT(ans_Y_efmit = NEW_NUMERIC(prod));
                            setAttrib(ans_Y_efmit, R_DimSymbol, Dim);

                            rans_Y_efmit = REAL(ans_Y_efmit);

                            PROTECT(ans_Y_eit = NEW_NUMERIC(nbI*nbT));
                            setAttrib(ans_Y_eit, R_DimSymbol, Dim2);

                            rans_Y_eit = REAL(ans_Y_eit);

                            PROTECT(ans_L_eit = NEW_NUMERIC(nbI*nbT));
                            setAttrib(ans_L_eit, R_DimSymbol, Dim2);

                            rans_L_eit = REAL(ans_L_eit);


                    } else {

                            rans_Y_efmit = REAL(VECTOR_ELT(out_Y_efmit,e));
                            rans_Y_eit = REAL(VECTOR_ELT(out_Y_eit,e));
                            rans_L_eit = REAL(VECTOR_ELT(out_L_eit,e));

                    }


                            r_wL_ei = REAL(v_wL_ei);

                            //facteurs des indices
                            PROTECT(cFACT5 = iDim(dim_wL_ei));

                            int *fact5_C = INTEGER(cFACT5);

                            //équation

                    if (Qvec[e]==0) {

                      if (nbI>1) { //ajout SPiCT

                            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                  rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                    r_wL_ei[ind_f*fact5_C[0]  + ind_m*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] *   //attention : poids individuels en kg
                                    rans_C_efmit[ind_f*fact1_C[0]  + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] / 1000;

                                    rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                            }

                           for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                  rans_Y_eit[ind_i + ind_t*nbI] =
                                    r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] *   //attention : poids individuels en kg
                                    rans_C_eit[ind_i + ind_t*nbI] / 1000;

                                  rans_L_eit[ind_i + ind_t*nbI] = NA_REAL;
                           }

                    } else { //SPiCT

                            //double *Bspict = REAL(VECTOR_ELT(intermBIOMspict, e));
                            // on peut sommer avant d'appliquer à F puisque F est supposé (pour le moment) constant sur l'ensemble de l'année N
                            //double Btemp = 0.0;
                            //for (int ii = ind_t*16 ; ii < (ind_t*16 + 16) ; ii++) Btemp = Btemp + Bspict[ii]/16;

                            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                                      rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_t*fact1_C[3]] =
                                        r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]] * r_B_et[ind_t*fact3_C[3]];

                            double temp = 0.0;

                            for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                            for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]]))
                                        temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_t*fact2_C[3]];

                            }

                            rans_Y_eit[0 + ind_t*1] = (temp + r_Fot_i[0 + ind_t*1]) * r_B_et[ind_t*fact3_C[3]];
                            rans_L_eit[0 + ind_t*1] = NA_REAL;

                    }
                    }

                    if (ind_t==0) {

                            setAttrib(ans_Y_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_Y_efmit, install("DimCst"), dimCst);

                            SET_VECTOR_ELT(out_Y_efmit, e, ans_Y_efmit);

                            setAttrib(ans_Y_eit, R_DimNamesSymbol, dimnames2);
                            setAttrib(ans_Y_eit, install("DimCst"), dimCst2);

                            SET_VECTOR_ELT(out_Y_eit, e, ans_Y_eit);

                            setAttrib(ans_L_eit, R_DimNamesSymbol, dimnames2);
                            setAttrib(ans_L_eit, install("DimCst"), dimCst2);

                            SET_VECTOR_ELT(out_L_eit, e, ans_L_eit);


                    }

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 30, v_wL_ei);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 31, cFACT5);


                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////

                             //---------
                            // calcul de D_efmit
                            //---------

double *r_dd1_efm = REAL(getListElement(elmt, "dd1_f_m_e"));
double *r_dd2_efm = REAL(getListElement(elmt, "dd2_f_m_e"));
double *r_OD_e = REAL(getListElement(elmt, "OD_e"));



                    if (ind_t==0) {

                            PROTECT(ans_D_efmit = NEW_NUMERIC(prod));
                            setAttrib(ans_D_efmit, R_DimSymbol, Dim);

                            rans_D_efmit = REAL(ans_D_efmit);

                            PROTECT(ans_LD_efmit = NEW_NUMERIC(prod)); //unp
                            setAttrib(ans_LD_efmit, R_DimSymbol, Dim);

                            rans_LD_efmit = REAL(ans_LD_efmit);

                            PROTECT(ans_DD_efmit = NEW_NUMERIC(prod)); //unp
                            setAttrib(ans_DD_efmit, R_DimSymbol, Dim);

                            rans_DD_efmit = REAL(ans_DD_efmit);  //19/03/15 +2

                       //if (!(r_OD_e[0]>0.5 & r_OD_e[0]<=(ind_t+1)) & (activeQR!=0)) { //over quota discards sera implémenté

                            PROTECT(ans_oqD_eft = NEW_NUMERIC(nbF*nbT));//Rprintf("AA1");
                            PROTECT(ans_oqD_et = NEW_NUMERIC(nbT));

                            PROTECT(dimCstOQ_ft = allocVector(INTSXP, 2));//Rprintf("AA2");
                            dimOQ_ft = INTEGER(dimCstOQ_ft);
                            dimOQ_ft[0] = nbF; dimOQ_ft[1] = nbT;

                            PROTECT(dimCstOQ_t = allocVector(INTSXP, 1));//Rprintf("AA3");
                            dimOQ_t = INTEGER(dimCstOQ_t);
                            dimOQ_t[0] = nbT;

                            setAttrib(ans_oqD_eft, R_DimSymbol, dimCstOQ_ft);//Rprintf("AA31");
                            setAttrib(ans_oqD_et, R_DimSymbol, dimCstOQ_t);//Rprintf("AA32");

                            PROTECT(dimnames_oqD_eft = allocVector(VECSXP,2));//Rprintf("AA4");
                            SET_VECTOR_ELT(dimnames_oqD_eft, 0, fleetList);
                            SET_VECTOR_ELT(dimnames_oqD_eft, 1, times);

                            PROTECT(dimnames_oqD_et = allocVector(VECSXP,1));
                            SET_VECTOR_ELT(dimnames_oqD_et, 0, times);

                            setAttrib(ans_oqD_eft, R_DimNamesSymbol, dimnames_oqD_eft);
                            setAttrib(ans_oqD_et, R_DimNamesSymbol, dimnames_oqD_et); //Rprintf("AA5");

                            rans_oqD_eft = REAL(ans_oqD_eft);
                            for (int tt = 0; tt<nbF*nbT; tt++) rans_oqD_eft[tt] = 0.0;
                            rans_oqD_et = REAL(ans_oqD_et); //Rprintf("BB");
                            for (int tt = 0; tt<nbT; tt++) rans_oqD_et[tt] = 0.0;

                        //}

                    } else {

                            rans_D_efmit = REAL(VECTOR_ELT(out_D_efmit,e));
                            rans_DD_efmit = REAL(VECTOR_ELT(out_DD_efmi,e));
                            rans_LD_efmit = REAL(VECTOR_ELT(out_LD_efmi,e));

                        //if (!(r_OD_e[0]>0.5 & r_OD_e[0]<=(ind_t+1)) & (activeQR!=0)) {//Rprintf("CC");

                            rans_oqD_eft = REAL(VECTOR_ELT(out_oqD_eft,e));
                            rans_oqD_et = REAL(VECTOR_ELT(out_oqD_et,e));//Rprintf("DD");


                        //}

                    }

                            r_wD_ei = REAL(v_wD_ei);
                            r_d_efmit = REAL(v_d_efmit);
                            doth_eit = REAL(v_doth_eit);

                            //facteurs des indices
                            PROTECT(cFACT6 = iDim(dim_d_efmit));
                            PROTECT(cFACT7 = iDim(dim_wD_ei));

                            int *fact6_C = INTEGER(cFACT6);
                            int *fact7_C = INTEGER(cFACT7);

                if (Qvec[e]==0) {
                            //équation : 2 manières de calculer selon la disponibilité de wD_i


                    if (all_is_na(v_wD_ei)) { //1ère méthode

                            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                if (ISNA(r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]]))  //si NA, alors pas de rejets
                                  r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] = 0.0;

                                  rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                    r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] *
                                    rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                            }

                            //Loth_eit
if (nbI>1) {
                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit (pas d'exemption)

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]]/1000;


                            } else { //pas d'OD

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) * (1-doth_eit[ind_i]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]]/1000;
                            }
} else {

                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit (pas d'exemption)

                                rans_L_eit[0 + ind_t*1] =
                                        r_Fot_i[0 + ind_t*1] * r_B_et[ind_t*fact3_C[3]];


                            } else { //pas d'OD

                                rans_L_eit[0 + ind_t*1] =
                                        r_Fot_i[0 + ind_t*1] * r_B_et[ind_t*fact3_C[3]] * (1-doth_eit[0]);

                            }

}

                    } else {                 //2ème méthode

                            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                if (ISNA(r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]]))  //si NA, alors pas de rejets
                                  r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] = 0.0;

                                  rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                    r_wD_ei[ind_f*fact7_C[0]  + ind_m*fact7_C[1] + ind_i*fact7_C[2] + ind_t*fact7_C[3]] *
                                    r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] *
                                    rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] / 1000;

                            }


                            //Loth_eit : pas d'exemption pour les autres si OD

                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit, pas de rejet car pas d'exemption

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] / 1000;


                            } else { //pas d'OD

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        (r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] -
                                         doth_eit[ind_i] * r_wD_ei[0*fact7_C[0]  + 0*fact7_C[1] + ind_i*fact7_C[2] + ind_t*fact7_C[3]]) / 1000;
                            }


                    }



                 for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & (!ISNA(r_dd1_efm[ind_f + nbF*ind_m]))) {


                           double rYsum = 0.0, rDsum = 0.0;
                           for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                                rYsum = rYsum + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                                rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                           }

                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                           rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                         fmin2( r_dd1_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0) ;

                        if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & (!ISNA(r_dd2_efm[ind_f + nbF*ind_m]))){

                                double rYsum = 0.0, rDsum = 0.0;
                                if (ind_t==0) rYsum=REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m]; else rYsum=rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                              rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2( r_dd2_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) ,  1.0) ;

                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                        } else {

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                        }
                    }
                 }


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            if (!ISNA(rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                            rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                                rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]; // il reste ensuite à integrer Lefmit pour contituer Ltot_i

                    }


                   }


                    if (ind_t==0) {

                            setAttrib(ans_D_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_D_efmit, install("DimCst"), dimCst);

                            SET_VECTOR_ELT(out_D_efmit, e, ans_D_efmit);

                            setAttrib(ans_LD_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_LD_efmit, install("DimCst"), dimCst);

                            SET_VECTOR_ELT(out_LD_efmi, e, ans_LD_efmit);

                            setAttrib(ans_DD_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_DD_efmit, install("DimCst"), dimCst);

                            SET_VECTOR_ELT(out_DD_efmi, e, ans_DD_efmit);

                            SET_VECTOR_ELT(out_oqD_eft, e, ans_oqD_eft);
                            SET_VECTOR_ELT(out_oqD_et, e, ans_oqD_et);

                    }

                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 32, v_wD_ei);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 33, v_d_efmit);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 34, cFACT6);
                        SET_VECTOR_ELT(VECTOR_ELT(EVAR, e), 35, cFACT7);

                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////

                             //---------
                            // calcul de L_efmit
                            //---------

                    if (ind_t==0) {

                            PROTECT(ans_L_efmit = NEW_NUMERIC(prod));
                            setAttrib(ans_L_efmit, R_DimSymbol, Dim);

                            rans_L_efmit = REAL(ans_L_efmit);

                    } else {

                            rans_L_efmit = REAL(VECTOR_ELT(out_L_efmit,e));

                    }

                        if (Qvec[e]==0) {

                            //équation

                            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                  rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                    rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                    rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                                  if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                  rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                                    rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]; //Ltot constitué

                            }

                        }

                    if (ind_t==0) {

                            setAttrib(ans_L_efmit, R_DimNamesSymbol, dimnames);
                            setAttrib(ans_L_efmit, install("DimCst"), dimCst);

                            SET_VECTOR_ELT(out_L_efmit, e, ans_L_efmit);
                            SET_STRING_ELT(rnames_Esp, e, STRING_ELT(sppList,e));
//Rprintf("K12\n");fichier << "K12" << endl;
                            UNPROTECT(11);

                            /*if (!(r_OD_e[0]>0.5 & r_OD_e[0]<=(ind_t+1)) & (activeQR!=0)) */UNPROTECT(6); //over quota discards

                    }





                     if (Qvec[e]==1) {
//Rprintf("H4.6\n");fichier << "H4.6" << endl;

                                double *r_Z_eit_S1M1 = REAL(getListElement(out_Z_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.1\n");fichier << "H4.7.1" << endl;
                                double *r_Z_eit_S1M2 = REAL(getListElement(out_Z_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.2\n");fichier << "H4.7.2" << endl;
                                double *r_Z_eit_S1M3 = REAL(getListElement(out_Z_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.3\n");fichier << "H4.7.3" << endl;
                                double *r_Z_eit_S1M4 = REAL(getListElement(out_Z_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));//Rprintf("H4.7.4\n");fichier << "H4.7.4" << endl;
                                double *r_Z_eit_S2M1 = REAL(getListElement(out_Z_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M2 = REAL(getListElement(out_Z_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M3 = REAL(getListElement(out_Z_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M4 = REAL(getListElement(out_Z_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M1 = REAL(getListElement(out_Z_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M2 = REAL(getListElement(out_Z_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M3 = REAL(getListElement(out_Z_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M4 = REAL(getListElement(out_Z_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M1 = REAL(getListElement(out_Z_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M2 = REAL(getListElement(out_Z_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M3 = REAL(getListElement(out_Z_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M4 = REAL(getListElement(out_Z_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H4.8\n");fichier << "H4.8" << endl;
                                double *r_N_eit_S1M1 = REAL(getListElement(out_N_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M2 = REAL(getListElement(out_N_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M3 = REAL(getListElement(out_N_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M4 = REAL(getListElement(out_N_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M1 = REAL(getListElement(out_N_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M2 = REAL(getListElement(out_N_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M3 = REAL(getListElement(out_N_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M4 = REAL(getListElement(out_N_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M1 = REAL(getListElement(out_N_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M2 = REAL(getListElement(out_N_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M3 = REAL(getListElement(out_N_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M4 = REAL(getListElement(out_N_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M1 = REAL(getListElement(out_N_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M2 = REAL(getListElement(out_N_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M3 = REAL(getListElement(out_N_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M4 = REAL(getListElement(out_N_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H5bbb\n");fichier << "H5bbb" << endl;
                                //double  *r_M_ei = REAL(getListElement(elmt, "M_i"));
//Rprintf("H5bbb2\n");fichier << "H5bbb2" << endl;//PrintValue(out_FRWT_fmi_S1M1);
                                double *r_FRWT_fmi_S1M1 = REAL(getListElement(out_FRWT_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M2 = REAL(getListElement(out_FRWT_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M3 = REAL(getListElement(out_FRWT_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M4 = REAL(getListElement(out_FRWT_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M1 = REAL(getListElement(out_FRWT_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M2 = REAL(getListElement(out_FRWT_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M3 = REAL(getListElement(out_FRWT_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M4 = REAL(getListElement(out_FRWT_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M1 = REAL(getListElement(out_FRWT_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M2 = REAL(getListElement(out_FRWT_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M3 = REAL(getListElement(out_FRWT_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M4 = REAL(getListElement(out_FRWT_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M1 = REAL(getListElement(out_FRWT_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M2 = REAL(getListElement(out_FRWT_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M3 = REAL(getListElement(out_FRWT_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M4 = REAL(getListElement(out_FRWT_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));
//Rprintf("H4.7\n");fichier << "H4.7" << endl;//PrintValue(out_Z_eit_S1M1);
                                double *r_FDWT_fmi_S1M1 = REAL(getListElement(out_FDWT_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M2 = REAL(getListElement(out_FDWT_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M3 = REAL(getListElement(out_FDWT_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M4 = REAL(getListElement(out_FDWT_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M1 = REAL(getListElement(out_FDWT_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M2 = REAL(getListElement(out_FDWT_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M3 = REAL(getListElement(out_FDWT_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M4 = REAL(getListElement(out_FDWT_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M1 = REAL(getListElement(out_FDWT_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M2 = REAL(getListElement(out_FDWT_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M3 = REAL(getListElement(out_FDWT_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M4 = REAL(getListElement(out_FDWT_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M1 = REAL(getListElement(out_FDWT_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M2 = REAL(getListElement(out_FDWT_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M3 = REAL(getListElement(out_FDWT_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M4 = REAL(getListElement(out_FDWT_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));

                                double *r_FRWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 176));
                                double *r_FRWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 177));
                                double *r_FRWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 178));
                                double *r_FRWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 179));
                                double *r_FRWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 180));
                                double *r_FRWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 181));
                                double *r_FRWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 182));
                                double *r_FRWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 183));
                                double *r_FRWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 184));
                                double *r_FRWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 185));
                                double *r_FRWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 186));
                                double *r_FRWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 187));
                                double *r_FRWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 188));
                                double *r_FRWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 189));
                                double *r_FRWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 190));
                                double *r_FRWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 191));

                                double *r_FDWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 208));
                                double *r_FDWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 209));
                                double *r_FDWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 210));
                                double *r_FDWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 211));
                                double *r_FDWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 212));
                                double *r_FDWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 213));
                                double *r_FDWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 214));
                                double *r_FDWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 215));
                                double *r_FDWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 216));
                                double *r_FDWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 217));
                                double *r_FDWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 218));
                                double *r_FDWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 219));
                                double *r_FDWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 220));
                                double *r_FDWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 221));
                                double *r_FDWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 222));
                                double *r_FDWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 223));


                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                                    rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                      (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));





                                    rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                      (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                                rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] +
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];


                                rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                                }




                  for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & (!ISNA(r_dd1_efm[ind_f + nbF*ind_m]))) {


                           double rYsum = 0.0, rDsum = 0.0;
                           for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                                rYsum = rYsum + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                                rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                           }
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                           rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2 ( r_dd1_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0 );
                        if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                            rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;

                        }

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & (!ISNA(r_dd2_efm[ind_f + nbF*ind_m]))){

                                double rYsum = 0.0, rDsum = 0.0;
                                if (ind_t==0) rYsum=REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m]; else rYsum=rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                              rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                    fmin2 ( r_dd2_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0 ) ;

                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                        } else {

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                        }
                    }
                 }


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];



                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                     double temp_S1M1 = 0.0, temp_S1M2 = 0.0, temp_S1M3 = 0.0, temp_S1M4 = 0.0,
                                            temp_S2M1 = 0.0, temp_S2M2 = 0.0, temp_S2M3 = 0.0, temp_S2M4 = 0.0,
                                            temp_S3M1 = 0.0, temp_S3M2 = 0.0, temp_S3M3 = 0.0, temp_S3M4 = 0.0,
                                            temp_S4M1 = 0.0, temp_S4M2 = 0.0, temp_S4M3 = 0.0, temp_S4M4 = 0.0,
                                            temp2_S1M1 = 0.0, temp2_S1M2 = 0.0, temp2_S1M3 = 0.0, temp2_S1M4 = 0.0,
                                            temp2_S2M1 = 0.0, temp2_S2M2 = 0.0, temp2_S2M3 = 0.0, temp2_S2M4 = 0.0,
                                            temp2_S3M1 = 0.0, temp2_S3M2 = 0.0, temp2_S3M3 = 0.0, temp2_S3M4 = 0.0,
                                            temp2_S4M1 = 0.0, temp2_S4M2 = 0.0, temp2_S4M3 = 0.0, temp2_S4M4 = 0.0;

                                    for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                    for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M1 = temp_S1M1 + r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M2 = temp_S1M2 + r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M3 = temp_S1M3 + r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M4 = temp_S1M4 + r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M1 = temp_S2M1 + r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M2 = temp_S2M2 + r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M3 = temp_S2M3 + r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M4 = temp_S2M4 + r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M1 = temp_S3M1 + r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M2 = temp_S3M2 + r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M3 = temp_S3M3 + r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M4 = temp_S3M4 + r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M1 = temp_S4M1 + r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M2 = temp_S4M2 + r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M3 = temp_S4M3 + r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M4 = temp_S4M4 + r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];


                                        if (!ISNA(r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M1 = temp2_S1M1 + r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M2 = temp2_S1M2 + r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M3 = temp2_S1M3 + r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M4 = temp2_S1M4 + r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M1 = temp2_S2M1 + r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M2 = temp2_S2M2 + r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M3 = temp2_S2M3 + r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M4 = temp2_S2M4 + r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M1 = temp2_S3M1 + r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M2 = temp2_S3M2 + r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M3 = temp2_S3M3 + r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M4 = temp2_S3M4 + r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M1 = temp2_S4M1 + r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M2 = temp2_S4M2 + r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M3 = temp2_S4M3 + r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M4 = temp2_S4M4 + r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];

                                    }

                                    temp_S1M1 = temp_S1M1 + r_FRWToth_it_S1M1[ind_i+ind_t*nbI];
                                    temp_S1M2 = temp_S1M2 + r_FRWToth_it_S1M2[ind_i+ind_t*nbI];
                                    temp_S1M3 = temp_S1M3 + r_FRWToth_it_S1M3[ind_i+ind_t*nbI];
                                    temp_S1M4 = temp_S1M4 + r_FRWToth_it_S1M4[ind_i+ind_t*nbI];
                                    temp_S2M1 = temp_S2M1 + r_FRWToth_it_S2M1[ind_i+ind_t*nbI];
                                    temp_S2M2 = temp_S2M2 + r_FRWToth_it_S2M2[ind_i+ind_t*nbI];
                                    temp_S2M3 = temp_S2M3 + r_FRWToth_it_S2M3[ind_i+ind_t*nbI];
                                    temp_S2M4 = temp_S2M4 + r_FRWToth_it_S2M4[ind_i+ind_t*nbI];
                                    temp_S3M1 = temp_S3M1 + r_FRWToth_it_S3M1[ind_i+ind_t*nbI];
                                    temp_S3M2 = temp_S3M2 + r_FRWToth_it_S3M2[ind_i+ind_t*nbI];
                                    temp_S3M3 = temp_S3M3 + r_FRWToth_it_S3M3[ind_i+ind_t*nbI];
                                    temp_S3M4 = temp_S3M4 + r_FRWToth_it_S3M4[ind_i+ind_t*nbI];
                                    temp_S4M1 = temp_S4M1 + r_FRWToth_it_S4M1[ind_i+ind_t*nbI];
                                    temp_S4M2 = temp_S4M2 + r_FRWToth_it_S4M2[ind_i+ind_t*nbI];
                                    temp_S4M3 = temp_S4M3 + r_FRWToth_it_S4M3[ind_i+ind_t*nbI];
                                    temp_S4M4 = temp_S4M4 + r_FRWToth_it_S4M4[ind_i+ind_t*nbI];

                                    temp2_S1M1 = temp2_S1M1 + r_FDWToth_it_S1M1[ind_i+ind_t*nbI];
                                    temp2_S1M2 = temp2_S1M2 + r_FDWToth_it_S1M2[ind_i+ind_t*nbI];
                                    temp2_S1M3 = temp2_S1M3 + r_FDWToth_it_S1M3[ind_i+ind_t*nbI];
                                    temp2_S1M4 = temp2_S1M4 + r_FDWToth_it_S1M4[ind_i+ind_t*nbI];
                                    temp2_S2M1 = temp2_S2M1 + r_FDWToth_it_S2M1[ind_i+ind_t*nbI];
                                    temp2_S2M2 = temp2_S2M2 + r_FDWToth_it_S2M2[ind_i+ind_t*nbI];
                                    temp2_S2M3 = temp2_S2M3 + r_FDWToth_it_S2M3[ind_i+ind_t*nbI];
                                    temp2_S2M4 = temp2_S2M4 + r_FDWToth_it_S2M4[ind_i+ind_t*nbI];
                                    temp2_S3M1 = temp2_S3M1 + r_FDWToth_it_S3M1[ind_i+ind_t*nbI];
                                    temp2_S3M2 = temp2_S3M2 + r_FDWToth_it_S3M2[ind_i+ind_t*nbI];
                                    temp2_S3M3 = temp2_S3M3 + r_FDWToth_it_S3M3[ind_i+ind_t*nbI];
                                    temp2_S3M4 = temp2_S3M4 + r_FDWToth_it_S3M4[ind_i+ind_t*nbI];
                                    temp2_S4M1 = temp2_S4M1 + r_FDWToth_it_S4M1[ind_i+ind_t*nbI];
                                    temp2_S4M2 = temp2_S4M2 + r_FDWToth_it_S4M2[ind_i+ind_t*nbI];
                                    temp2_S4M3 = temp2_S4M3 + r_FDWToth_it_S4M3[ind_i+ind_t*nbI];
                                    temp2_S4M4 = temp2_S4M4 + r_FDWToth_it_S4M4[ind_i+ind_t*nbI];


                              rans_L_eit[ind_i + ind_t*nbI] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * temp_S1M1 /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * temp_S1M2  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * temp_S1M3  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * temp_S1M4  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * temp_S2M1 /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * temp_S2M2  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * temp_S2M3  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * temp_S2M4  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * temp_S3M1 /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * temp_S3M2  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * temp_S3M3  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * temp_S3M4  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * temp_S4M1 /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * temp_S4M2  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * temp_S4M3  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * temp_S4M4  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                    rans_Y_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * temp2_S1M1 /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * temp2_S1M2  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * temp2_S1M3  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * temp2_S1M4  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * temp2_S2M1 /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * temp2_S2M2  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * temp2_S2M3  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * temp2_S2M4  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * temp2_S3M1 /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * temp2_S3M2  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * temp2_S3M3  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * temp2_S3M4  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * temp2_S4M1 /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * temp2_S4M2  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * temp2_S4M3  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * temp2_S4M4  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                   for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  //une fois Ytot généré à partir de Ltot (fraction débarquée réelle), on peut ajouter à Ltot les rejets débarqués
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {
                        if (!ISNA(rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }



                   if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //et sous OD, on ajoute à Ltot les rejets autres

                            rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));

                   }

                                }

                            }

//Rprintf("K13\n");fichier << "K13" << endl;


/* insertion over quota management discards pour corriger D et L -> espèces dynamiques */

if (!((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & ((activeQR!=0) & (activeQR<=ind_t))) { //pas d'OD appliqué, et activation du module demandée


 // on s'occupe d'abord de la partie "autres"

    if (!isNull(getListElement(listQR, CHAR(STRING_ELT(sppList,e)))) & !isNull(getListElement(listQR_f, CHAR(STRING_ELT(sppList,e))))) { //TACs renseignés aux 2 niveaux

        double *QR = REAL(getListElement(listQR, CHAR(STRING_ELT(sppList,e))));
        double *QR_f = REAL(getListElement(listQR_f, CHAR(STRING_ELT(sppList,e))));

        double QRoth = QR[ind_t];
        bool recal = false;
        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) QRoth = QRoth - QR_f[ind_f + nbF*ind_t];

            double Ltot_oth = 0.0, Ytot_oth = 0.0; //, Ytot_othini = 0.0;
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                //double Yothini = rans_Y_eit[ind_i + 0*nbI];
                double Loth = rans_L_eit[ind_i + ind_t*nbI], Yoth = rans_Y_eit[ind_i + ind_t*nbI];
                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                for (int ind_m = 0 ; ind_m < nbM ; ind_m++){
                //if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                //  Yothini = Yothini - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]];
                if (!ISNA(rans_L_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  Loth = Loth - rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  Yoth = Yoth - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                }
                Ltot_oth = Ltot_oth + Loth; Ytot_oth = Ytot_oth + Yoth; //Ytot_othini = Ytot_othini + Yothini;
            }

            rans_oqD_et[ind_t] = 0.0;

            if (Ltot_oth>QRoth) { //on procède à la correction "autres"

                recal = true;
                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    double Doth_i_t = rans_Y_eit[ind_i + ind_t*nbI] - rans_L_eit[ind_i + ind_t*nbI],// Yoth_i_0 = rans_Y_eit[ind_i + 0*nbI],
                           Yoth_i_t = rans_Y_eit[ind_i + ind_t*nbI];
                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++){
                    if (!ISNA(rans_D_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        Doth_i_t = Doth_i_t - rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    //if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                    //    Yoth_i_0 = Yoth_i_0 - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]];
                    if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        Yoth_i_t = Yoth_i_t - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }
                    rans_oqD_et[ind_t] = fmin2((Ltot_oth-QRoth) * (Yoth_i_t - Doth_i_t) / Ltot_oth, Yoth_i_t - Doth_i_t); //fmin2((Ltot_oth-QRoth) * Yoth_i_0 / Ytot_othini, Yoth_i_t - Doth_i_t);
                    Doth_i_t = fmin2( Doth_i_t + (Ltot_oth-QRoth) * (Yoth_i_t - Doth_i_t) / Ltot_oth, Yoth_i_t ); //fmin2( Doth_i_t + (Ltot_oth-QRoth) * Yoth_i_0 / Ytot_othini, Yoth_i_t );

                    if (ISNAN(Doth_i_t)) Doth_i_t = 0.0;
                    if (ISNAN(rans_oqD_et[ind_t])) rans_oqD_et[ind_t] = 0.0;
                    rans_L_eit[ind_i + ind_t*nbI] = Yoth_i_t - Doth_i_t; //on incrémentera par la suite avec les L recalculés

                }
            }




            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  { //on procède à la correction "flottilles"


            double sumL = 0.0; //, sumYini = 0.0;

            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  sumL = sumL + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                //if (!ISNA(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                //  sumYini = sumYini + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]];
            }

            rans_oqD_eft[ind_f + nbF*ind_t] = 0.0;

            if (sumL>QR_f[ind_f + nbF*ind_t]) { //on procède à la correction sur la flottille detectée

                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    //if (!ISNA(fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                    //        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                    //        rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]])))
                    rans_oqD_eft[ind_f + nbF*ind_t] = rans_oqD_eft[ind_f + nbF*ind_t] +
                      fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) / sumL, //rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                            finite(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) -
                            finite(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]));

                    rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                       fmin2(
                        finite(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) +
                        (sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) / sumL, //(sumL-QR_f[ind_f + nbF*ind_t]) * rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                        finite(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]));

                    if (ISNAN(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;


                    rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                    if (!recal & !ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] - rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }

                    rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                       rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                       rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                    if (!recal & !ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }


                }
            }

            if (recal) {
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                      if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                      rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                      }
            }

        }
    }
}

/*----------------------------------------------------------------*/



  UNPROTECT(26+1);

         }

}
//on passe aux espèces statiques

if (nbEstat>0) {

//Rprintf("H8\n");fichier << "H8" << endl;
    for (int e = 0 ; e < nbEstat ; e++) {
//Rprintf("H9\n");fichier << "H9" << endl;
                            PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e))));

                            PROTECT(v_LPUE_eStat = getListElement(elmt, "LPUE_f_m_e"));
                            PROTECT(v_d_eStat = getListElement(elmt, "d_f_m_e")); //if (e==2) PrintValue(getListElement(elmt, "d_f_m_e"));

                            PROTECT(dimCst_LPUE_eStat = getAttrib(v_LPUE_eStat, install("DimCst")));
                            PROTECT(dimCst_d_eStat = getAttrib(v_d_eStat, install("DimCst")));

                            //tests sur les dimensions :
                            dim_d_eStat = INTEGER(dimCst_d_eStat);
                            if (((dim_d_eStat[0]!=0) & (dim_d_eStat[0]!=nbF)) | ((dim_d_eStat[1]!=0) & (dim_d_eStat[1]!=nbM)) |
                                (dim_d_eStat[2]!=0) | ((dim_d_eStat[3]!=0) & (dim_d_eStat[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in d_f_m_e element. Check .ini biological parameters files !!\n");
                            }

                            dim_LPUE_eStat = INTEGER(dimCst_LPUE_eStat);
                            if (((dim_LPUE_eStat[0]!=0) & (dim_LPUE_eStat[0]!=nbF)) | ((dim_LPUE_eStat[1]!=0) & (dim_LPUE_eStat[1]!=nbM)) |
                                (dim_LPUE_eStat[2]!=0) | ((dim_LPUE_eStat[3]!=0) & (dim_LPUE_eStat[3]!=nbT)))
                            {
                                error("Non_homogeneous dimensions in LPUE_f_m_e element. Check .ini biological parameters files !!\n");
                            }

//Rprintf("H10\n");fichier << "H10" << endl;
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////
                        /////////////////////////////////////////////////////////////////////////////////////////////////

                            //---------
                            // calcul de Ystat
                            //---------

                            //on détermine l'attribut Dimension de Ystat
                            PROTECT(dimCst_eStat = allocVector(INTSXP, 4));//Rprintf("H10.1\n");
                            dim_eStat = INTEGER(dimCst_eStat);//Rprintf("H10.2\n");
                            dim_eStat[0] = dim_LPUE_eStat[0] ; dim_eStat[1] = dim_LPUE_eStat[1] ; dim_eStat[2] = 0;//Rprintf("H10.3\n");
                            dim_eStat[3] = nbT;//Rprintf("H10.4\n");

                            //variables d'effort

                    double *r_nbv_f, *r_nbds_f, *r_nbds2_f;//Rprintf("H10.5\n");fichier << "H10.5" << endl;

                    r_nbv_f = REAL(getListElement(Flist, "nbv_f_m"));
                    r_nbds_f = REAL(getListElement(Flist, "effort1_f_m"));
                    r_nbds2_f = REAL(getListElement(Flist, "effort2_f_m"));
//Rprintf("H10.6\n");fichier << "H10.6" << endl;

//                    int *fFactSup1 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 50)), //ATTENTION : suppose au moins une espèce dynamiquement modélisée
//                        *fFactSup2 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 51));

                      int *fFactSup1 = INTEGER(iDim(INTEGER(getAttrib(getListElement(Flist, "nbv_f_m"), install("DimCst"))))),
                          *fFactSup2 = INTEGER(iDim(INTEGER(getAttrib(getListElement(Flist, "effort1_f_m"), install("DimCst")))));


//Rprintf("H10.7\n");fichier << "H10.7" << endl;
double *r_dd1_efm = REAL(getListElement(elmt, "dd1_f_m_e"));
double *r_dd2_efm = REAL(getListElement(elmt, "dd2_f_m_e"));
double *r_OD_e = REAL(getListElement(elmt, "OD_e"));
double *r_dst_efm = REAL(getListElement(elmt, "dst_f_m_e"));


                    if (ind_t==0){

                            //on crée le tableau résultat pour l'espèce en question
//Rprintf("H11\n");fichier << "H11" << endl;
                            PROTECT(Dim = allocVector(INTSXP, 3));
                            dim = INTEGER(Dim); dim[0]=dim_eStat[0]; dim[1]=dim_eStat[1]; dim[2]=dim_eStat[3];

                            PROTECT(ans_Ystat = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_Ystat, R_DimSymbol, Dim);
                            PROTECT(ans_Lstat = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_Lstat, R_DimSymbol, Dim);
                            PROTECT(ans_Dstat = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_Dstat, R_DimSymbol, Dim);
                            PROTECT(ans_statDD = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_statDD, R_DimSymbol, Dim);
                            PROTECT(ans_statLD = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_statLD, R_DimSymbol, Dim);
                            PROTECT(ans_statLDst = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_statLDst, R_DimSymbol, Dim);
                            PROTECT(ans_statLDor = NEW_NUMERIC(dim_eStat[0]*dim_eStat[1]*dim_eStat[3]));
                            setAttrib(ans_statLDor, R_DimSymbol, Dim);

                            PROTECT(dimnames_eStat = allocVector(VECSXP,3));
                            SET_VECTOR_ELT(dimnames_eStat, 0, fleetList);
                            SET_VECTOR_ELT(dimnames_eStat, 1, metierList);
                            SET_VECTOR_ELT(dimnames_eStat, 2, times);

                            rans_Ystat = REAL(ans_Ystat);
                            rans_Lstat = REAL(ans_Lstat);
                            rans_Dstat = REAL(ans_Dstat);
                            rans_statDD = REAL(ans_statDD);
                            rans_statLD = REAL(ans_statLD);
                            rans_statLDst = REAL(ans_statLDst);
                            rans_statLDor = REAL(ans_statLDor);


                         //if (!(r_OD_e[0]>0.5 & r_OD_e[0]<=(ind_t+1)) & (activeQR!=0)) { //over quota discards sera implémenté


                            PROTECT(ans_oqDstat = NEW_NUMERIC(nbF*nbT));

                            PROTECT(dimCstOQ_ft = allocVector(INTSXP, 2));
                            dimOQ_ft = INTEGER(dimCstOQ_ft);
                            dimOQ_ft[0] = nbF; dimOQ_ft[1] = nbT;

                            setAttrib(ans_oqDstat, R_DimSymbol, dimCstOQ_ft);

                            PROTECT(dimnames_oqD_eft = allocVector(VECSXP,2));
                            SET_VECTOR_ELT(dimnames_oqD_eft, 0, fleetList);
                            SET_VECTOR_ELT(dimnames_oqD_eft, 1, times);

                            setAttrib(ans_oqDstat, R_DimNamesSymbol, dimnames_oqD_eft);//Rprintf("EE");

                            rans_oqDstat = REAL(ans_oqDstat);// //Rprintf("FF");
                            for (int tt=0; tt<(nbF*nbT); tt++) rans_oqDstat[tt] = 0.0;

                        //}


                    } else {
//Rprintf("H12\n");fichier << "H12" << endl;
                            rans_Ystat = REAL(VECTOR_ELT(out_Ystat, e));
                            rans_Lstat = REAL(VECTOR_ELT(out_Lstat, e));
                            rans_Dstat = REAL(VECTOR_ELT(out_Dstat, e));
                            rans_statDD = REAL(VECTOR_ELT(out_statDD_efm, e));
                            rans_statLD = REAL(VECTOR_ELT(out_statLD_efm, e));
                            rans_statLDst = REAL(VECTOR_ELT(out_statLDst_efm, e));
                            rans_statLDor = REAL(VECTOR_ELT(out_statLDor_efm, e));//Rprintf("GG");

                            rans_oqDstat = REAL(VECTOR_ELT(out_oqDstat, e));//Rprintf("HH");

                    }


                   double *r_LPUE_eStat = REAL(v_LPUE_eStat);
                   double *r_d_eStat = REAL(v_d_eStat); //if (e==2) PrintValue(v_d_eStat);
//Rprintf("H13\n");fichier << "H13" << endl;
                   for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                   for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {

                            rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               r_LPUE_eStat[ind_f + nbF*ind_m + 0*ind_t] *
                               r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + 0*fFactSup1[2] + ind_t*fFactSup1[3]] *
                               r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + 0*fFactSup2[2] + ind_t*fFactSup2[3]]*
                               r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + 0*fFactSup2[2] + ind_t*fFactSup2[3]]/1000.0;

                            if (ISNA(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))
                                  rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                            rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] / (1 - finite(r_d_eStat[ind_f + nbF*ind_m + 0*ind_t]));

                            if (ISNAN(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])) rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                            rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]);

                            rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                            rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * r_d_eStat[ind_f + nbF*ind_m + 0*ind_t]);

                            if (ISNA(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])) rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                   }


                 for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & (!ISNA(r_dd1_efm[ind_f + nbF*ind_m]))) {

                           rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                              fmin2( r_dd1_efm[ind_f + nbF*ind_m] * rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] ,
                                      rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] ) ;

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd2_efm[ind_f + nbF*ind_m])){

                                double rYsum = 0.0;
                                if (ind_t==0) {
                                 rYsum = REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m];
                                } else {
                                 rYsum = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                }

                                rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                fmin2( r_dd2_efm[ind_f + nbF*ind_m] * rYsum , rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] );

                        } else {

                             rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                        }
                    }
                 }


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t];


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLDst[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * finite(r_dst_efm[ind_f + nbF*ind_m]);


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLDor[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_statLDst[ind_f + nbF*ind_m + nbF*nbMe*ind_t];


/* insertion over quota management discards pour corriger D et L -> espèces statiques */

if (!((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & ((activeQR!=0) & (activeQR<=ind_t))) { //pas d'OD appliqué, et activation du module demandée

    if (!isNull(getListElement(listQR_f, CHAR(STRING_ELT(sppListStat,e))))) { //TACs renseignés au niveau flottille

        double *QR_f = REAL(getListElement(listQR_f, CHAR(STRING_ELT(sppListStat,e))));

            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  { //on procède à la correction "flottilles"

            double sumL = 0.0;

            for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {
                if (!ISNA(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))
                  sumL = sumL + rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                //if (!ISNA(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0]))
                //  sumYini = sumYini + rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0];
            }

            rans_oqDstat[ind_f + nbF*ind_t] = 0.0;

            if (sumL>QR_f[ind_f + nbF*ind_t]) { //on procède à la correction sur la flottille detectée

                for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                    if (!ISNAN(fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) / sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                                       finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]-rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))))
                    rans_oqDstat[ind_f + nbF*ind_t] = rans_oqDstat[ind_f + nbF*ind_t] +
                                fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) / sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                                       finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]-rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]));

                    rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                       fmin2(finite(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) + (sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])/sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                             finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]));

                    if (ISNAN(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))
                        rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                    rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                    rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                }
            }
        }
    }
}

/*----------------------------------------------------------------*/



//Rprintf("H14\n");fichier << "H14" << endl;
                   if (ind_t==0){

                            setAttrib(ans_Ystat, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_Ystat, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_Ystat, e, ans_Ystat);

                            setAttrib(ans_Lstat, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_Lstat, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_Lstat, e, ans_Lstat);

                            setAttrib(ans_Dstat, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_Dstat, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_Dstat, e, ans_Dstat);

                            SET_STRING_ELT(rnames_eStat, e, STRING_ELT(sppListStat,e));

                            setAttrib(ans_statDD, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_statDD, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_statDD_efm, e, ans_statDD);

                            setAttrib(ans_statLD, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_statLD, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_statLD_efm, e, ans_statLD);

                            setAttrib(ans_statLDst, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_statLDst, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_statLDst_efm, e, ans_statLDst);

                            setAttrib(ans_statLDor, R_DimNamesSymbol, dimnames_eStat);
                            setAttrib(ans_statLDor, install("DimCst"), dimCst_eStat);

                            SET_VECTOR_ELT(out_statLDor_efm, e, ans_statLDor);

                            SET_VECTOR_ELT(out_oqDstat, e, ans_oqDstat);

                    }
//Rprintf("H14.1\n");fichier << "H14.1" << endl;
                    if (ind_t==0) {

                      UNPROTECT(9);
                      /*if (!(r_OD_e[0]>0.5 & r_OD_e[0]<=(ind_t+1)) & (activeQR!=0)) */UNPROTECT(3);

                    }

                    UNPROTECT(6);

         }

}


cUpdate = false;



if (ind_t==0) UNPROTECT(2);
UNPROTECT(3);

//PrintValue(out_Fbar_et);

} else {

double *rans_Ytot_fm = REAL(out_Ytot_fm);

for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {
  rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] =
     rans_Yothsue_fm[ind_f + nbF*ind_m]*reff1[ind_f + nbF*ind_m]*reff2[ind_f + nbF*ind_m]*rnbv[ind_f + nbF*ind_m];

  if (ISNA(rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t])) rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = 0.0;
}

if (nbE>0) {

    for (int e = 0 ; e < nbE ; e++) {

//Rprintf("H15\n");fichier << "H15" << endl;
                            int nbI = length(VECTOR_ELT(namDC,e));

                            SEXP elmt;
                            PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));

                                SEXP v_wD_ei;

                                PROTECT(v_wD_ei = getListElement(elmt, "wD_i"));
//double Btemp;
                                double  *rans_C_efmit = REAL(VECTOR_ELT(out_C_efmit,e)),
                                        *rans_Y_efmit = REAL(VECTOR_ELT(out_Y_efmit,e)),
                                        *rans_C_eit = REAL(VECTOR_ELT(out_C_eit,e)),
                                        *rans_Y_eit = REAL(VECTOR_ELT(out_Y_eit,e)),
                                        *rans_L_eit = REAL(VECTOR_ELT(out_L_eit,e)),
                                        *rans_D_efmit = REAL(VECTOR_ELT(out_D_efmit,e)),
                                        *rans_L_efmit = REAL(VECTOR_ELT(out_L_efmit,e)),
                                        *rans_DD_efmit = REAL(VECTOR_ELT(out_DD_efmi,e)),
                                        *rans_LD_efmit = REAL(VECTOR_ELT(out_LD_efmi,e)),
                                        *r_F_efmit = REAL(VECTOR_ELT(out_F_fmi,e)),
                                        *r_N_eit = REAL(VECTOR_ELT(out_N_eit, e)),
                                        *r_Z_eit = REAL(VECTOR_ELT(out_Z_eit, e)),
                                        *r_wL_ei = REAL(getListElement(elmt, "wL_i")),
                                        *r_wD_ei = REAL(getListElement(elmt, "wD_i")),
                                        *r_d_efmit = REAL(getListElement(elmt, "d_i")),
                                        *doth_eit = REAL(getListElement(elmt, "doth_i")); //Rprintf("II");//PrintValue(out_oqD_eft);
                                       double *rans_oqD_eft = REAL(VECTOR_ELT(out_oqD_eft,e));//Rprintf("JJ");
                                       double *rans_oqD_et = REAL(VECTOR_ELT(out_oqD_et,e));//Rprintf("KK");
//Rprintf("H15.1\n");fichier << "H15.1" << endl;
                                double *r_Fot_i = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 44));
                                double *r_B_et = REAL(VECTOR_ELT(out_B_et,e));
//Rprintf("H15.2\n");fichier << "H15.2" << endl;
                                int     *fact1_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 26)),
                                        *fact2_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 27)),
                                        *fact3_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 28)),
                                        *fact4_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 29)),
                                        *fact5_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 31)),
                                        *fact6_C = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 34)),
                                        *fact7_C  = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 35));


double *r_dd1_efm = REAL(getListElement(elmt, "dd1_f_m_e"));//Rprintf("H15.3\n");
double *r_dd2_efm = REAL(getListElement(elmt, "dd2_f_m_e"));//Rprintf("H15.4\n");
double *r_OD_e = REAL(getListElement(elmt, "OD_e"));//Rprintf("H15.5\n");fichier << "H15.5" << endl;

                                //équation n°1
//Rprintf("H16\n");fichier << "H16" << endl;

                            if (Qvec[e]==1) {

                                double *r_F_fmi_S1M1 = REAL(getListElement(out_F_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M2 = REAL(getListElement(out_F_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M3 = REAL(getListElement(out_F_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S1M4 = REAL(getListElement(out_F_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M1 = REAL(getListElement(out_F_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M2 = REAL(getListElement(out_F_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M3 = REAL(getListElement(out_F_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S2M4 = REAL(getListElement(out_F_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M1 = REAL(getListElement(out_F_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M2 = REAL(getListElement(out_F_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M3 = REAL(getListElement(out_F_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S3M4 = REAL(getListElement(out_F_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M1 = REAL(getListElement(out_F_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M2 = REAL(getListElement(out_F_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M3 = REAL(getListElement(out_F_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_F_fmi_S4M4 = REAL(getListElement(out_F_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));

                                double *r_Z_eit_S1M1 = REAL(getListElement(out_Z_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M2 = REAL(getListElement(out_Z_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M3 = REAL(getListElement(out_Z_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M4 = REAL(getListElement(out_Z_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M1 = REAL(getListElement(out_Z_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M2 = REAL(getListElement(out_Z_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M3 = REAL(getListElement(out_Z_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M4 = REAL(getListElement(out_Z_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M1 = REAL(getListElement(out_Z_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M2 = REAL(getListElement(out_Z_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M3 = REAL(getListElement(out_Z_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M4 = REAL(getListElement(out_Z_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M1 = REAL(getListElement(out_Z_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M2 = REAL(getListElement(out_Z_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M3 = REAL(getListElement(out_Z_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M4 = REAL(getListElement(out_Z_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));

                                double *r_N_eit_S1M1 = REAL(getListElement(out_N_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M2 = REAL(getListElement(out_N_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M3 = REAL(getListElement(out_N_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M4 = REAL(getListElement(out_N_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M1 = REAL(getListElement(out_N_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M2 = REAL(getListElement(out_N_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M3 = REAL(getListElement(out_N_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M4 = REAL(getListElement(out_N_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M1 = REAL(getListElement(out_N_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M2 = REAL(getListElement(out_N_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M3 = REAL(getListElement(out_N_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M4 = REAL(getListElement(out_N_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M1 = REAL(getListElement(out_N_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M2 = REAL(getListElement(out_N_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M3 = REAL(getListElement(out_N_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M4 = REAL(getListElement(out_N_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));

                                double  *r_M_ei = REAL(getListElement(elmt, "M_i"));
                                int *fact3_D = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, e), 14));
//Rprintf("H17\n");fichier << "H17" << endl;

                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                    rans_C_eit[ind_i + ind_t*nbI] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] - r_M_ei[0*fact3_D[0] + 0*fact3_D[1] + ind_i*fact3_D[2] + ind_t*fact3_D[3]]) /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));
//Rprintf("H18\n");fichier << "H18" << endl;

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                                    rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_F_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));

                                }

                                }


                            } else {
//Rprintf("H19\n");fichier << "H19" << endl;

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                                     rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] *
                                        r_N_eit[ind_f*fact3_C[0] + ind_m*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[ind_f*fact4_C[0] + ind_m*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[ind_f*fact4_C[0] + ind_m*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]];



                                //équation

                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                    double temp = 0.0;

                                    for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                    for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];

                                    }

                                    rans_C_eit[ind_i + ind_t*nbI] =
                                        (temp + r_Fot_i[ind_i + ind_t*nbI]) * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]];

                                }

                            }


                        if (Qvec[e]==0) {

if (nbI>1) {
                               //équation n°2

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                      rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_wL_ei[ind_f*fact5_C[0]  + ind_m*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] *
                                        rans_C_efmit[ind_f*fact1_C[0]  + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] / 1000;



                                      rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                                }


                              for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                      rans_Y_eit[ind_i + ind_t*nbI] =
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] *   //attention : poids individuels en kg
                                        rans_C_eit[ind_i + ind_t*nbI] / 1000;

                                      rans_L_eit[ind_i + ind_t*nbI] = NA_REAL;
                              }
} else {


                           //double *Bspict = REAL(VECTOR_ELT(intermBIOMspict, e));
                            // on peut sommer avant d'appliquer à F puisque F est supposé (pour le moment) constant sur l'ensemble de l'année N
                           //Btemp = 0.0;
                           //for (int ii = ind_t*16 ; ii < (ind_t*16 + 16) ; ii++) Btemp = Btemp + Bspict[ii]/16;

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                                     rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + 0*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + 0*fact2_C[2] + ind_t*fact2_C[3]] * r_B_et[ind_t*fact3_C[3]];

                                //équation

                                double temp = 0.0;

                                for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                 if (!ISNA(r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + 0*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp = temp + r_F_efmit[ind_f*fact2_C[0] + ind_m*fact2_C[1] + 0*fact2_C[2] + ind_t*fact2_C[3]];

                                }

                                rans_Y_eit[0 + ind_t*1] = (temp + r_Fot_i[0 + ind_t*1]) * r_B_et[ind_t*fact3_C[3]];//if (nbI==1) {//Rprintf("Yi");PrintValue(out_Y_eit);}

}
                               //équation n°3

                            if (all_is_na(v_wD_ei)) { // on peut aussi laisser le test SPiCT à l'intérieur car les deux conditions sont équivalentes

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                if (ISNA(r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]]))  //si NA, alors pas de rejets
                                      r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] = 0.0;

                                      rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] *
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                                }



if (nbI>1) {
                            //Loth_eit
                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit (pas d'exemption)

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] / 1000;


                            } else { //pas d'OD

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) * (1-doth_eit[ind_i]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] / 1000;
                            }
} else {
////Rprintf("LtotAvant4");PrintValue(out_L_eit);
                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit (pas d'exemption)

                                rans_L_eit[0 + ind_t*1] = r_Fot_i[0 + ind_t*1] * r_B_et[0*fact5_C[0]  + 0*fact5_C[1] + 0*fact5_C[2] + ind_t*fact5_C[3]];


                            } else { //pas d'OD
////Rprintf("LtotAvant31");PrintValue(out_L_eit);//Rprintf("Foth %f B %f doth %f 1-doth %f",r_Fot_i[0 + ind_t*1],r_B_et[0*fact5_C[0]  + 0*fact5_C[1] + 0*fact5_C[2] + ind_t*fact5_C[3]],doth_eit[0],1-doth_eit[0]);
                                rans_L_eit[0 + ind_t*1] = r_Fot_i[0 + ind_t*1] * r_B_et[ind_t*fact3_C[3]] * (1-doth_eit[0]);
////Rprintf("LtotAvant32");PrintValue(out_L_eit);
                            }
                            ////Rprintf("LtotAvant3");PrintValue(out_L_eit);

}



                            } else {

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++){

                                if (ISNA(r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]]))  //si NA, alors pas de rejets
                                      r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] = 0.0;


                                      rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        r_wD_ei[ind_f*fact7_C[0]  + ind_m*fact7_C[1] + ind_i*fact7_C[2] + ind_t*fact7_C[3]] *
                                        r_d_efmit[ind_f*fact6_C[0] + ind_m*fact6_C[1] + ind_i*fact6_C[2] + ind_t*fact6_C[3]] *
                                        rans_C_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] / 1000;
                                }


                               //Loth_eit : pas d'exemption pour les autres si OD

                            if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //OD s'applique, Loth_eit=Yoth_eit, pas de rejet car pas d'exemption

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] / 1000;


                            } else { //pas d'OD

                             for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                                rans_L_eit[ind_i + ind_t*nbI] =
                                        (r_Fot_i[ind_i + ind_t*nbI] * r_N_eit[0*fact3_C[0] + 0*fact3_C[1] + ind_i*fact3_C[2] + ind_t*fact3_C[3]] *
                                        (1 - exp( -r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]])) /
                                        r_Z_eit[0*fact4_C[0] + 0*fact4_C[1] + ind_i*fact4_C[2] + ind_t*fact4_C[3]]) *
                                        (r_wL_ei[0*fact5_C[0]  + 0*fact5_C[1] + ind_i*fact5_C[2] + ind_t*fact5_C[3]] -
                                         doth_eit[ind_i] * r_wD_ei[0*fact7_C[0]  + 0*fact7_C[1] + ind_i*fact7_C[2] + ind_t*fact7_C[3]]) / 1000;
                            }



                            }







                 for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd1_efm[ind_f + nbF*ind_m])) {


                           double rYsum = 0.0, rDsum = 0.0;
                           for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                                rYsum = rYsum + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                                rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                           }
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                           rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2( r_dd1_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0) ;

                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd2_efm[ind_f + nbF*ind_m])){

                                double rYsum = 0.0, rDsum = 0.0;
                                if (ind_t==0) rYsum=REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m]; else rYsum=rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                              rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2( r_dd2_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0) ;

                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                        } else {

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                        }
                    }
                 }

//if (nbI==1) {//Rprintf("LtotAvant2");PrintValue(out_L_eit);}

                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            if (!ISNA(rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                            rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                                rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]; // il reste ensuite à integrer Lefmit pour contituer Ltot_i

                    }


//if (nbI==1) {//Rprintf("LtotAvant");PrintValue(out_L_eit);}
                               //équation n°4

                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                      rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                        rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                                      if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                                        rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]; //Ltot constitué

                                }
//if (nbI==1) {//Rprintf("LtotApres");PrintValue(out_L_eit);}

                            } else {
//Rprintf("H4.6\n");fichier << "H4.6" << endl;



                                double *r_FRWT_fmi_S1M1 = REAL(getListElement(out_FRWT_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M2 = REAL(getListElement(out_FRWT_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M3 = REAL(getListElement(out_FRWT_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S1M4 = REAL(getListElement(out_FRWT_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M1 = REAL(getListElement(out_FRWT_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M2 = REAL(getListElement(out_FRWT_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M3 = REAL(getListElement(out_FRWT_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S2M4 = REAL(getListElement(out_FRWT_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M1 = REAL(getListElement(out_FRWT_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M2 = REAL(getListElement(out_FRWT_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M3 = REAL(getListElement(out_FRWT_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S3M4 = REAL(getListElement(out_FRWT_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M1 = REAL(getListElement(out_FRWT_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M2 = REAL(getListElement(out_FRWT_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M3 = REAL(getListElement(out_FRWT_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FRWT_fmi_S4M4 = REAL(getListElement(out_FRWT_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));



//Rprintf("H4.7\n");fichier << "H4.7" << endl;//PrintValue(out_Z_eit_S1M1);
                                double *r_FDWT_fmi_S1M1 = REAL(getListElement(out_FDWT_fmi_S1M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M2 = REAL(getListElement(out_FDWT_fmi_S1M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M3 = REAL(getListElement(out_FDWT_fmi_S1M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S1M4 = REAL(getListElement(out_FDWT_fmi_S1M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M1 = REAL(getListElement(out_FDWT_fmi_S2M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M2 = REAL(getListElement(out_FDWT_fmi_S2M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M3 = REAL(getListElement(out_FDWT_fmi_S2M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S2M4 = REAL(getListElement(out_FDWT_fmi_S2M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M1 = REAL(getListElement(out_FDWT_fmi_S3M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M2 = REAL(getListElement(out_FDWT_fmi_S3M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M3 = REAL(getListElement(out_FDWT_fmi_S3M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S3M4 = REAL(getListElement(out_FDWT_fmi_S3M4, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M1 = REAL(getListElement(out_FDWT_fmi_S4M1, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M2 = REAL(getListElement(out_FDWT_fmi_S4M2, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M3 = REAL(getListElement(out_FDWT_fmi_S4M3, CHAR(STRING_ELT(sppList,e))));
                                double *r_FDWT_fmi_S4M4 = REAL(getListElement(out_FDWT_fmi_S4M4, CHAR(STRING_ELT(sppList,e))));
//Rprintf("H5ddd\n");fichier << "H5ddd" << endl;

                                double *r_FRWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 176));
                                double *r_FRWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 177));
                                double *r_FRWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 178));
                                double *r_FRWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 179));
                                double *r_FRWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 180));
                                double *r_FRWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 181));
                                double *r_FRWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 182));
                                double *r_FRWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 183));
                                double *r_FRWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 184));
                                double *r_FRWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 185));
                                double *r_FRWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 186));
                                double *r_FRWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 187));
                                double *r_FRWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 188));
                                double *r_FRWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 189));
                                double *r_FRWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 190));
                                double *r_FRWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 191));
//Rprintf("H5.1\n");fichier << "H5.1" << endl;
                                double *r_FDWToth_it_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 208));
                                double *r_FDWToth_it_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 209));
                                double *r_FDWToth_it_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 210));
                                double *r_FDWToth_it_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 211));
                                double *r_FDWToth_it_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 212));
                                double *r_FDWToth_it_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 213));
                                double *r_FDWToth_it_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 214));
                                double *r_FDWToth_it_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 215));
                                double *r_FDWToth_it_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 216));
                                double *r_FDWToth_it_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 217));
                                double *r_FDWToth_it_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 218));
                                double *r_FDWToth_it_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 219));
                                double *r_FDWToth_it_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 220));
                                double *r_FDWToth_it_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 221));
                                double *r_FDWToth_it_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 222));
                                double *r_FDWToth_it_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(EVAR, e), 223));
//Rprintf("H5.2\n");fichier << "H5.2" << endl;
                                double *r_Z_eit_S1M1 = REAL(getListElement(out_Z_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M2 = REAL(getListElement(out_Z_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M3 = REAL(getListElement(out_Z_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S1M4 = REAL(getListElement(out_Z_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M1 = REAL(getListElement(out_Z_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M2 = REAL(getListElement(out_Z_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M3 = REAL(getListElement(out_Z_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S2M4 = REAL(getListElement(out_Z_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M1 = REAL(getListElement(out_Z_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M2 = REAL(getListElement(out_Z_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M3 = REAL(getListElement(out_Z_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S3M4 = REAL(getListElement(out_Z_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M1 = REAL(getListElement(out_Z_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M2 = REAL(getListElement(out_Z_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M3 = REAL(getListElement(out_Z_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_Z_eit_S4M4 = REAL(getListElement(out_Z_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H5.3\n");fichier << "H5.3" << endl;
                                double *r_N_eit_S1M1 = REAL(getListElement(out_N_eit_S1M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M2 = REAL(getListElement(out_N_eit_S1M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M3 = REAL(getListElement(out_N_eit_S1M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S1M4 = REAL(getListElement(out_N_eit_S1M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M1 = REAL(getListElement(out_N_eit_S2M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M2 = REAL(getListElement(out_N_eit_S2M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M3 = REAL(getListElement(out_N_eit_S2M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S2M4 = REAL(getListElement(out_N_eit_S2M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M1 = REAL(getListElement(out_N_eit_S3M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M2 = REAL(getListElement(out_N_eit_S3M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M3 = REAL(getListElement(out_N_eit_S3M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S3M4 = REAL(getListElement(out_N_eit_S3M4 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M1 = REAL(getListElement(out_N_eit_S4M1 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M2 = REAL(getListElement(out_N_eit_S4M2 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M3 = REAL(getListElement(out_N_eit_S4M3 , CHAR(STRING_ELT(sppList,e))));
                                double *r_N_eit_S4M4 = REAL(getListElement(out_N_eit_S4M4 , CHAR(STRING_ELT(sppList,e))));
//Rprintf("H5.4\n");fichier << "H5.4" << endl;


//if (ind_t==1) fichier1 << "STCCCS1M1" << endl;


                                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {


                                    rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                      (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));

//if ((rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]>0) &
//    (rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]<0.00000001)) {
//if (ind_t==1) {
//std::stringstream ff3S1M1;
//ff3S1M1 << r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
//fichier1 << ff3S1M1.str() << endl;
//}


                                    rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                      (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) *
                                       r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]] /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                                rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] +
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];


                                rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];


                                }






                 for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd1_efm[ind_f + nbF*ind_m])) {


                           double rYsum = 0.0, rDsum = 0.0;
                           for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                                rYsum = rYsum + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                                rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                           }
                        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                           rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2( r_dd1_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0) ;

                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd2_efm[ind_f + nbF*ind_m])){

                                double rYsum = 0.0, rDsum = 0.0;
                                if (ind_t==0) rYsum=REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m]; else rYsum=rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) rDsum = rDsum + rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
                              rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] *
                                     fmin2( r_dd2_efm[ind_f + nbF*ind_m] * finite(rYsum / rDsum) , 1.0) ;
                            if (ISNAN(rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;
                        }

                        } else {

                            for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];

                        }
                    }
                 }


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)

                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                                rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];





                                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                                     double temp_S1M1 = 0.0, temp_S1M2 = 0.0, temp_S1M3 = 0.0, temp_S1M4 = 0.0,
                                            temp_S2M1 = 0.0, temp_S2M2 = 0.0, temp_S2M3 = 0.0, temp_S2M4 = 0.0,
                                            temp_S3M1 = 0.0, temp_S3M2 = 0.0, temp_S3M3 = 0.0, temp_S3M4 = 0.0,
                                            temp_S4M1 = 0.0, temp_S4M2 = 0.0, temp_S4M3 = 0.0, temp_S4M4 = 0.0,
                                            temp2_S1M1 = 0.0, temp2_S1M2 = 0.0, temp2_S1M3 = 0.0, temp2_S1M4 = 0.0,
                                            temp2_S2M1 = 0.0, temp2_S2M2 = 0.0, temp2_S2M3 = 0.0, temp2_S2M4 = 0.0,
                                            temp2_S3M1 = 0.0, temp2_S3M2 = 0.0, temp2_S3M3 = 0.0, temp2_S3M4 = 0.0,
                                            temp2_S4M1 = 0.0, temp2_S4M2 = 0.0, temp2_S4M3 = 0.0, temp2_S4M4 = 0.0;

                                    for (int ind_f = 0 ; ind_f < (1 + (nbF-1)*(fact2_C[0]>0)) ; ind_f++)
                                    for (int ind_m = 0 ; ind_m < (1 + (nbM-1)*(fact2_C[1]>0)) ; ind_m++) {

                                        if (!ISNA(r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M1 = temp_S1M1 + r_FRWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M2 = temp_S1M2 + r_FRWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M3 = temp_S1M3 + r_FRWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S1M4 = temp_S1M4 + r_FRWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M1 = temp_S2M1 + r_FRWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M2 = temp_S2M2 + r_FRWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M3 = temp_S2M3 + r_FRWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S2M4 = temp_S2M4 + r_FRWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M1 = temp_S3M1 + r_FRWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M2 = temp_S3M2 + r_FRWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M3 = temp_S3M3 + r_FRWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S3M4 = temp_S3M4 + r_FRWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M1 = temp_S4M1 + r_FRWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M2 = temp_S4M2 + r_FRWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M3 = temp_S4M3 + r_FRWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp_S4M4 = temp_S4M4 + r_FRWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];


                                        if (!ISNA(r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M1 = temp2_S1M1 + r_FDWT_fmi_S1M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M2 = temp2_S1M2 + r_FDWT_fmi_S1M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M3 = temp2_S1M3 + r_FDWT_fmi_S1M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S1M4 = temp2_S1M4 + r_FDWT_fmi_S1M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M1 = temp2_S2M1 + r_FDWT_fmi_S2M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M2 = temp2_S2M2 + r_FDWT_fmi_S2M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M3 = temp2_S2M3 + r_FDWT_fmi_S2M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S2M4 = temp2_S2M4 + r_FDWT_fmi_S2M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M1 = temp2_S3M1 + r_FDWT_fmi_S3M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M2 = temp2_S3M2 + r_FDWT_fmi_S3M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M3 = temp2_S3M3 + r_FDWT_fmi_S3M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S3M4 = temp2_S3M4 + r_FDWT_fmi_S3M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M1 = temp2_S4M1 + r_FDWT_fmi_S4M1[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M2 = temp2_S4M2 + r_FDWT_fmi_S4M2[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M3 = temp2_S4M3 + r_FDWT_fmi_S4M3[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];
                                        if (!ISNA(r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]]))
                                        temp2_S4M4 = temp2_S4M4 + r_FDWT_fmi_S4M4[ind_f*fact2_C[0] + ind_m*fact2_C[1] + ind_i*fact2_C[2] + ind_t*fact2_C[3]];


                                    }

                                    temp_S1M1 = temp_S1M1 + r_FRWToth_it_S1M1[ind_i+ind_t*nbI];
                                    temp_S1M2 = temp_S1M2 + r_FRWToth_it_S1M2[ind_i+ind_t*nbI];
                                    temp_S1M3 = temp_S1M3 + r_FRWToth_it_S1M3[ind_i+ind_t*nbI];
                                    temp_S1M4 = temp_S1M4 + r_FRWToth_it_S1M4[ind_i+ind_t*nbI];
                                    temp_S2M1 = temp_S2M1 + r_FRWToth_it_S2M1[ind_i+ind_t*nbI];
                                    temp_S2M2 = temp_S2M2 + r_FRWToth_it_S2M2[ind_i+ind_t*nbI];
                                    temp_S2M3 = temp_S2M3 + r_FRWToth_it_S2M3[ind_i+ind_t*nbI];
                                    temp_S2M4 = temp_S2M4 + r_FRWToth_it_S2M4[ind_i+ind_t*nbI];
                                    temp_S3M1 = temp_S3M1 + r_FRWToth_it_S3M1[ind_i+ind_t*nbI];
                                    temp_S3M2 = temp_S3M2 + r_FRWToth_it_S3M2[ind_i+ind_t*nbI];
                                    temp_S3M3 = temp_S3M3 + r_FRWToth_it_S3M3[ind_i+ind_t*nbI];
                                    temp_S3M4 = temp_S3M4 + r_FRWToth_it_S3M4[ind_i+ind_t*nbI];
                                    temp_S4M1 = temp_S4M1 + r_FRWToth_it_S4M1[ind_i+ind_t*nbI];
                                    temp_S4M2 = temp_S4M2 + r_FRWToth_it_S4M2[ind_i+ind_t*nbI];
                                    temp_S4M3 = temp_S4M3 + r_FRWToth_it_S4M3[ind_i+ind_t*nbI];
                                    temp_S4M4 = temp_S4M4 + r_FRWToth_it_S4M4[ind_i+ind_t*nbI];

                                    temp2_S1M1 = temp2_S1M1 + r_FDWToth_it_S1M1[ind_i+ind_t*nbI];
                                    temp2_S1M2 = temp2_S1M2 + r_FDWToth_it_S1M2[ind_i+ind_t*nbI];
                                    temp2_S1M3 = temp2_S1M3 + r_FDWToth_it_S1M3[ind_i+ind_t*nbI];
                                    temp2_S1M4 = temp2_S1M4 + r_FDWToth_it_S1M4[ind_i+ind_t*nbI];
                                    temp2_S2M1 = temp2_S2M1 + r_FDWToth_it_S2M1[ind_i+ind_t*nbI];
                                    temp2_S2M2 = temp2_S2M2 + r_FDWToth_it_S2M2[ind_i+ind_t*nbI];
                                    temp2_S2M3 = temp2_S2M3 + r_FDWToth_it_S2M3[ind_i+ind_t*nbI];
                                    temp2_S2M4 = temp2_S2M4 + r_FDWToth_it_S2M4[ind_i+ind_t*nbI];
                                    temp2_S3M1 = temp2_S3M1 + r_FDWToth_it_S3M1[ind_i+ind_t*nbI];
                                    temp2_S3M2 = temp2_S3M2 + r_FDWToth_it_S3M2[ind_i+ind_t*nbI];
                                    temp2_S3M3 = temp2_S3M3 + r_FDWToth_it_S3M3[ind_i+ind_t*nbI];
                                    temp2_S3M4 = temp2_S3M4 + r_FDWToth_it_S3M4[ind_i+ind_t*nbI];
                                    temp2_S4M1 = temp2_S4M1 + r_FDWToth_it_S4M1[ind_i+ind_t*nbI];
                                    temp2_S4M2 = temp2_S4M2 + r_FDWToth_it_S4M2[ind_i+ind_t*nbI];
                                    temp2_S4M3 = temp2_S4M3 + r_FDWToth_it_S4M3[ind_i+ind_t*nbI];
                                    temp2_S4M4 = temp2_S4M4 + r_FDWToth_it_S4M4[ind_i+ind_t*nbI];


                              rans_L_eit[ind_i + ind_t*nbI] =

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * temp_S1M1 /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * temp_S1M2  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * temp_S1M3  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * temp_S1M4  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * temp_S2M1 /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * temp_S2M2  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * temp_S2M3  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * temp_S2M4  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * temp_S3M1 /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * temp_S3M2  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * temp_S3M3  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * temp_S3M4  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * temp_S4M1 /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * temp_S4M2  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * temp_S4M3  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * temp_S4M4  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                            rans_Y_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * temp2_S1M1 /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * temp2_S1M2  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * temp2_S1M3  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * temp2_S1M4  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * temp2_S2M1 /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * temp2_S2M2  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * temp2_S2M3  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * temp2_S2M4  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * temp2_S3M1 /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * temp2_S3M2  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * temp2_S3M3  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * temp2_S3M4  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * temp2_S4M1 /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * temp2_S4M2  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * temp2_S4M3  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * temp2_S4M4  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  //une fois Ytot généré à partir de Ltot (fraction débarquée réelle), on peut ajouter à Ltot les rejets débarqués
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {
                        if (!ISNA(rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +
                             rans_LD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }



                   if ((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) { //et sous OD, on ajoute à Ltot les rejets autres

                            rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] +

                                      r_N_eit_S1M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S1M1[ind_i + ind_t*nbI] + (r_Z_eit_S1M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M2[ind_i + ind_t*nbI] + (r_Z_eit_S1M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M3[ind_i + ind_t*nbI] + (r_Z_eit_S1M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S1M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S1M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S1M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S1M4[ind_i + ind_t*nbI] + (r_Z_eit_S1M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S2M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S2M1[ind_i + ind_t*nbI] + (r_Z_eit_S2M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M2[ind_i + ind_t*nbI] + (r_Z_eit_S2M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M3[ind_i + ind_t*nbI] + (r_Z_eit_S2M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S2M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S2M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S2M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S2M4[ind_i + ind_t*nbI] + (r_Z_eit_S2M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S3M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S3M1[ind_i + ind_t*nbI] + (r_Z_eit_S3M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M2[ind_i + ind_t*nbI] + (r_Z_eit_S3M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M3[ind_i + ind_t*nbI] + (r_Z_eit_S3M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S3M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S3M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S3M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S3M4[ind_i + ind_t*nbI] + (r_Z_eit_S3M4[ind_i + ind_t*nbI]==0)) +

                                      r_N_eit_S4M1[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M1[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M1[ind_i+ind_t*nbI] /
                                       (r_Z_eit_S4M1[ind_i + ind_t*nbI] + (r_Z_eit_S4M1[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M2[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M2[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M2[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M2[ind_i + ind_t*nbI] + (r_Z_eit_S4M2[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M3[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M3[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M3[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M3[ind_i + ind_t*nbI] + (r_Z_eit_S4M3[ind_i + ind_t*nbI]==0)) +
                                      r_N_eit_S4M4[ind_i + ind_t*nbI] * (1-exp(-r_Z_eit_S4M4[ind_i + ind_t*nbI]/4)) * r_FDWToth_it_S4M4[ind_i+ind_t*nbI]  /
                                       (r_Z_eit_S4M4[ind_i + ind_t*nbI] + (r_Z_eit_S4M4[ind_i + ind_t*nbI]==0));

                   }


                                }

                            }





/* insertion over quota management discards pour corriger D et L -> espèces dynamiques */

if (!((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & ((activeQR!=0) & (activeQR<=ind_t))) { //pas d'OD appliqué, et activation du module demandée


 // on s'occupe d'abord de la partie "autres"

    if (!isNull(getListElement(listQR, CHAR(STRING_ELT(sppList,e)))) & !isNull(getListElement(listQR_f, CHAR(STRING_ELT(sppList,e))))) { //TACs renseignés aux 2 niveaux

        double *QR = REAL(getListElement(listQR, CHAR(STRING_ELT(sppList,e))));
        double *QR_f = REAL(getListElement(listQR_f, CHAR(STRING_ELT(sppList,e))));

        double QRoth = QR[ind_t];
        bool recal = false;
        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) QRoth = QRoth - QR_f[ind_f + nbF*ind_t];

            double Ltot_oth = 0.0, Ytot_oth = 0.0; //, Ytot_othini = 0.0;
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                //double Yothini = rans_Y_eit[ind_i + 0*nbI];
                double Loth = rans_L_eit[ind_i + ind_t*nbI], Yoth = rans_Y_eit[ind_i + ind_t*nbI];
                for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                for (int ind_m = 0 ; ind_m < nbM ; ind_m++){
                //if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                //  Yothini = Yothini - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]];
                if (!ISNA(rans_L_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  Loth = Loth - rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  Yoth = Yoth - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                }
                Ltot_oth = Ltot_oth + Loth; Ytot_oth = Ytot_oth + Yoth; //Ytot_othini = Ytot_othini + Yothini;
            }
            //if (e==1 & ind_t==13) //Rprintf("ind_t %i QRoth %f Ltot_oth %f Ytot_oth %f Ytot_othini %f \n",ind_t,QRoth,Ltot_oth,Ytot_oth,Ytot_othini);

            rans_oqD_et[ind_t] = 0.0;

            if (Ltot_oth>QRoth) { //on procède à la correction "autres"

                recal = true;
                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    double Doth_i_t = rans_Y_eit[ind_i + ind_t*nbI] - rans_L_eit[ind_i + ind_t*nbI],// Yoth_i_0 = rans_Y_eit[ind_i + 0*nbI],
                           Yoth_i_t = rans_Y_eit[ind_i + ind_t*nbI];//, Loth_i_t = rans_L_eit[ind_i + ind_t*nbI];
                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++){
                    if (!ISNA(rans_D_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        Doth_i_t = Doth_i_t - rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    //if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                    //    Yoth_i_0 = Yoth_i_0 - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + 0*fact1_C[3]];
                    if (!ISNA(rans_Y_efmit [ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        Yoth_i_t = Yoth_i_t - rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }
                    rans_oqD_et[ind_t] = fmin2((Ltot_oth-QRoth) * (Yoth_i_t - Doth_i_t) / Ltot_oth, Yoth_i_t - Doth_i_t); //fmin2((Ltot_oth-QRoth) * Yoth_i_0 / Ytot_othini, Yoth_i_t - Doth_i_t);
                    Doth_i_t = fmin2( Doth_i_t + (Ltot_oth-QRoth) * (Yoth_i_t - Doth_i_t) / Ltot_oth, Yoth_i_t ); //fmin2( Doth_i_t + (Ltot_oth-QRoth) * Yoth_i_0 / Ytot_othini, Yoth_i_t );

                    if (ISNAN(Doth_i_t)) Doth_i_t = 0.0;
                    if (ISNAN(rans_oqD_et[ind_t])) rans_oqD_et[ind_t] = 0.0;
                    rans_L_eit[ind_i + ind_t*nbI] = Yoth_i_t - Doth_i_t; //on incrémentera par la suite avec les L recalculés

                //if (e==1 & ind_t==13) //Rprintf("Yoth_i_t %f Doth_i_t %f rans_L_eit[ind_i + ind_t*nbI] %f \n",Yoth_i_t,Doth_i_t,rans_L_eit[ind_i + ind_t*nbI]);
                }
            }




            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  { //on procède à la correction "flottilles"


            double sumL = 0.0;//, sumYini = 0.0;

            for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
                if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                  sumL = sumL + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                //if (!ISNA(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]]))
                //  sumYini = sumYini + rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]];
            }

            rans_oqD_eft[ind_f + nbF*ind_t] = 0.0;

            if (sumL>QR_f[ind_f + nbF*ind_t]) { //on procède à la correction sur la flottille detectée

                for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                    //if (!ISNA(fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                    //        rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                    //        rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]])))
                    rans_oqD_eft[ind_f + nbF*ind_t] = rans_oqD_eft[ind_f + nbF*ind_t] +
                      fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) / sumL, //rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                            finite(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) -
                            finite(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]));

                    rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                       fmin2(
                        finite(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) +
                        (sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]]) / sumL, //(sumL-QR_f[ind_f + nbF*ind_t]) * rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + 0*fact1_C[3]] / sumYini,
                        finite(rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]));

                    if (ISNAN(rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]))
                        rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] = 0.0;

                    rans_DD_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                                rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
//if (e==1 & ind_t==13) //Rprintf("1 rans_L_eit %f rans_L_efmit %f rans_D_efmit %f \n",rans_L_eit[ind_i + ind_t*nbI],rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]],rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]);
                    if (!recal & !ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] - rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }
//if (e==1 & ind_t==13) //Rprintf("2 rans_L_eit %f rans_L_efmit %f rans_D_efmit %f \n",rans_L_eit[ind_i + ind_t*nbI],rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]],rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]);
//fichier1 << "STeee" << endl;

                    rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] =
                       rans_Y_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]] -
                       rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
//if (e==1 & ind_t==13) //Rprintf("3 rans_L_eit %f rans_L_efmit %f rans_D_efmit %f \n",rans_L_eit[ind_i + ind_t*nbI],rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]],rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]);

                    if (!recal & !ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                        rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }
//if (e==1 & ind_t==13) //Rprintf("4 rans_L_eit %f rans_L_efmit %f rans_D_efmit %f \n",rans_L_eit[ind_i + ind_t*nbI],rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1] + ind_i*fact1_C[2] + ind_t*fact1_C[3]],rans_D_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]]);


                }
            }

            if (recal) {
                    //if (e==1 & ind_t==13) //Rprintf("recal\n");

                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
                    for (int ind_i = 0 ; ind_i < nbI ; ind_i++)
                    if (!ISNA(rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]])) {
                      rans_L_eit[ind_i + ind_t*nbI] = rans_L_eit[ind_i + ind_t*nbI] + rans_L_efmit[ind_f*fact1_C[0] + ind_m*fact1_C[1]  + ind_i*fact1_C[2] + ind_t*fact1_C[3]];
                    }
            }

        }
    }
}

/*----------------------------------------------------------------*/


                            UNPROTECT(2);
//Rprintf("H20\n");fichier << "H20" << endl;
    }
}

//on passe aux espèces statiques //??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

if (nbEstat>0) {

//Rprintf("H21\n");fichier << "H21" << endl;
    for (int e = 0 ; e < nbEstat ; e++) {

                    SEXP elmt;
                    PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e))));
//Rprintf("H22\n");fichier << "H22" << endl;
                    double *r_LPUE_eStat = REAL(getListElement(elmt, "LPUE_f_m_e"));
                    double *r_d_eStat = REAL(getListElement(elmt, "d_f_m_e"));
                    double *r_dd1_efm = REAL(getListElement(elmt, "dd1_f_m_e"));
                    double *r_dd2_efm = REAL(getListElement(elmt, "dd2_f_m_e"));
                    double *r_OD_e = REAL(getListElement(elmt, "OD_e"));
                    double *r_dst_efm = REAL(getListElement(elmt, "dst_f_m_e"));

                    //variables d'effort

                    double *r_nbv_f = REAL(getListElement(Flist, "nbv_f_m"));
                    double *r_nbds_f = REAL(getListElement(Flist, "effort1_f_m"));
                    double *r_nbds2_f = REAL(getListElement(Flist, "effort2_f_m"));

//                    int *fFactSup1 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 50)),   //ATTENTION : suppose au moins une espèce dynamiquement modélisée
//                        *fFactSup2 = INTEGER(VECTOR_ELT(VECTOR_ELT(EVAR, 0), 51));

                      int *fFactSup1 = INTEGER(iDim(INTEGER(getAttrib(getListElement(Flist, "nbv_f_m"), install("DimCst"))))),
                          *fFactSup2 = INTEGER(iDim(INTEGER(getAttrib(getListElement(Flist, "effort1_f_m"), install("DimCst")))));


                    double *rans_Ystat = REAL(VECTOR_ELT(out_Ystat, e));
                    double *rans_Lstat = REAL(VECTOR_ELT(out_Lstat, e));
                    double *rans_Dstat = REAL(VECTOR_ELT(out_Dstat, e));//Rprintf("LL");

                    double *rans_oqDstat = REAL(VECTOR_ELT(out_oqDstat, e));//Rprintf("MM");

                    double *rans_statDD = REAL(VECTOR_ELT(out_statDD_efm, e));
                    double *rans_statLD = REAL(VECTOR_ELT(out_statLD_efm, e));
                    double *rans_statLDst = REAL(VECTOR_ELT(out_statLDst_efm, e));
                    double *rans_statLDor = REAL(VECTOR_ELT(out_statLDor_efm, e));

                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {

                            rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               r_LPUE_eStat[ind_f + nbF*ind_m + 0*ind_t] *
                               r_nbv_f[ind_f*fFactSup1[0] + ind_m*fFactSup1[1] + 0*fFactSup1[2] + ind_t*fFactSup1[3]] *
                               r_nbds_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + 0*fFactSup2[2] + ind_t*fFactSup2[3]]*
                               r_nbds2_f[ind_f*fFactSup2[0] + ind_m*fFactSup2[1] + 0*fFactSup2[2] + ind_t*fFactSup2[3]]/1000.0;

                            if (ISNA(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])) rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                            rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] / (1 - r_d_eStat[ind_f + nbF*ind_m + 0*ind_t]);

                            if (ISNAN(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])) rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                            rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) ;

                            rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*ind_t] +
                                        rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                            rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                               rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * r_d_eStat[ind_f + nbF*ind_m + 0*ind_t];

                            if (ISNA(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])) rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                   }
                   //PrintValue(out_Lstat);


                 for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                 for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                   if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd1_efm[ind_f + nbF*ind_m])) {

                           rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                           fmin2( r_dd1_efm[ind_f + nbF*ind_m] * rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] ,
                                  rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] );

                  } else {

                        if (((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & !ISNA(r_dd2_efm[ind_f + nbF*ind_m])){

                                double rYsum = 0.0;
                                if (ind_t==0) {
                                 rYsum = REAL(getListElement(Flist, "Lref_f_m"))[ind_f + nbF*ind_m];
                                } else {
                                 rYsum = rans_Ytot_fm[ind_f + nbF*ind_m + nbF*nbM*(ind_t-1)];
                                }

                                rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = fmin2(
                                    r_dd2_efm[ind_f + nbF*ind_m] * rYsum ,
                                    rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] );

                        } else {

                             rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                        }
                    }
                 }


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t];


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLDst[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * r_dst_efm[ind_f + nbF*ind_m];


                    for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
                    for (int ind_m = 0 ; ind_m < nbM ; ind_m++)

                             rans_statLDor[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                                rans_statLD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_statLDst[ind_f + nbF*ind_m + nbF*nbMe*ind_t];



/* insertion over quota management discards pour corriger D et L -> espèces statiques */

if (!((r_OD_e[0]>0.5) & (r_OD_e[0]<=(ind_t+1))) & ((activeQR!=0) & (activeQR<=ind_t))) { //pas d'OD appliqué, et activation du module demandée

    if (!isNull(getListElement(listQR_f, CHAR(STRING_ELT(sppListStat,e))))) { //TACs renseignés au niveau flottille

        double *QR_f = REAL(getListElement(listQR_f, CHAR(STRING_ELT(sppListStat,e))));

            for (int ind_f = 0 ; ind_f < nbF ; ind_f++)  { //on procède à la correction "flottilles"

            double sumL = 0.0;//, sumYini = 0.0;

            for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {
                if (!ISNA(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))
                  sumL = sumL + rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                //if (!ISNA(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0]))
                //  sumYini = sumYini + rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0];
            }

            rans_oqDstat[ind_f + nbF*ind_t] = 0.0;

            if (sumL>QR_f[ind_f + nbF*ind_t]) { //on procède à la correction sur la flottille detectée

                for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

                    if (!ISNAN(fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) / sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                                       finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]-rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))))
                    rans_oqDstat[ind_f + nbF*ind_t] = rans_oqDstat[ind_f + nbF*ind_t] +
                                fmin2((sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) / sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                                       finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]-rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]));

                    rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] =
                       fmin2(finite(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]) + (sumL-QR_f[ind_f + nbF*ind_t]) * finite(rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t])/sumL, //rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*0] / sumYini,
                             finite(rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]));

                    if (ISNAN(rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t]))
                        rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.0;

                    rans_statDD[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                    rans_Lstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = rans_Ystat[ind_f + nbF*ind_m + nbF*nbMe*ind_t] - rans_Dstat[ind_f + nbF*ind_m + nbF*nbMe*ind_t];

                }
            }
        }
    }
}

/*----------------------------------------------------------------*/




                   UNPROTECT(1);

         }

}




}
////PrintValue(out_Ystat);

UNPROTECT(1);

//fichier1.close();
}}







//
////------------------------------------------
//// Module 'Marché'
////------------------------------------------
//
extern "C" {

void BioEcoPar::Marche(SEXP list, int ind_t)
{

//ofstream fichier("C:\\Users\\mmerzere\\Desktop\\test2\\testMark.txt", ios::out | ios::trunc);

    SEXP    elmt, intC, v_P_fmce, v_icat, v_L_efmit, dimCst_P_fmce, dimCst_L_efmit, dimCst_L_efmct, Dim_L_efmct, //Dim_P_fmce,
            ans_L_efmct = R_NilValue, ans_P_fmce = R_NilValue, dimnames_Lc = R_NilValue, dimnames_P = R_NilValue,
            rnames_Esp, cFACTc, cFACTi, cFACTp, cFACTpini, cFACTpStat, cFACTpStatini,
            ans_DD_efmc = R_NilValue, ans_LD_efmc = R_NilValue, v_DD_efmit, v_LD_efmit;
    SEXP    v_P_eStat, dimCst_P_eStat, dimCst_P_eStatR, ans_P_eStat = R_NilValue, dimnames_Pstat = R_NilValue;

    int *dim_P_fmce, *dim_P_fmcet, *dim_L_efmit, *dim_icat, *dim_L_efmct, *dim_P_eStat, *dim_P_eStat_t, *dim_P_eStat_tR, *dimLc;//, *dimP;

    int nbI, nbC;

    double *rans_L_efmct, *r_L_efmit, *r_P_fmce, *r_icat, *r_Pstat, *r_P_fmceIni, *r_PstatIni,
            *rans_DD_efmc, *rans_LD_efmc, *r_DD_efmit, *r_LD_efmit;

////Rprintf("CCC1");

//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 5));////Rprintf("Mort20.2\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 6));////Rprintf("Mort20.3\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 7));////Rprintf("Mort20.4\n");
//PrintValue(VECTOR_ELT(VECTOR_ELT(eVar, 0), 61));////Rprintf("Mort20.5\n");



    if (ind_t==0) {

        PROTECT(rnames_Esp = getAttrib(out_L_efmit,R_NamesSymbol));
        setAttrib(out_L_efmct, R_NamesSymbol, rnames_Esp);
        setAttrib(out_DD_efmc, R_NamesSymbol, rnames_Esp);
        setAttrib(out_LD_efmc, R_NamesSymbol, rnames_Esp);
        setAttrib(out_P_t, R_NamesSymbol, rnames_Esp);
        if (nbEstat>0) setAttrib(out_Pstat, R_NamesSymbol, sppListStat);

    }

//Rprintf("M1\n");fichier << "M1" << endl;

if (nbE>0) {

    for (int e = 0 ; e < nbE ; e++) {
//Rprintf("M2\n");fichier << "M2" << endl;
        PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));

        nbI = length(getListElement(elmt, "modI"));
        intC = getListElement(elmt, "modC");
        nbC = length(intC);

        PROTECT(v_P_fmce = getListElement(elmt, "P_fmce"));
        PROTECT(v_icat = getListElement(elmt, "icat"));
        PROTECT(v_L_efmit = getListElement(out_L_efmit, CHAR(STRING_ELT(sppList,e))));
        PROTECT(v_DD_efmit = getListElement(out_DD_efmi, CHAR(STRING_ELT(sppList,e))));
        PROTECT(v_LD_efmit = getListElement(out_LD_efmi, CHAR(STRING_ELT(sppList,e))));

        PROTECT(dimCst_P_fmce = getAttrib(v_P_fmce, install("DimCst")));
        PROTECT(dimCst_L_efmit = getAttrib(v_L_efmit, install("DimCst")));
//Rprintf("M3\n");fichier << "M3" << endl;

        //tests sur les dimensions :
        dim_P_fmce = INTEGER(dimCst_P_fmce);////Rprintf("AAA1");
        if (((dim_P_fmce[0]!=0) & (dim_P_fmce[0]!=nbF)) | ((dim_P_fmce[1]!=0) & (dim_P_fmce[1]!=nbMe)) |
            ((dim_P_fmce[2]!=0) & (dim_P_fmce[2]!=nbC)) | ((dim_P_fmce[3]!=0) & (dim_P_fmce[3]!=nbT)))
        {
            error("Non_homogeneous dimensions in P_fmce element. Check .ini biological parameters files !!\n");
        }

        dim_L_efmit = INTEGER(dimCst_L_efmit);////Rprintf("AAA2");
        if (((dim_L_efmit[0]!=0) & (dim_L_efmit[0]!=nbF)) | ((dim_L_efmit[1]!=0) & (dim_L_efmit[1]!=nbM)) |
            ((dim_L_efmit[2]!=0) & (dim_L_efmit[2]!=nbI)) | ((dim_L_efmit[3]!=0) & (dim_L_efmit[3]!=nbT)))
        {
            error("Non_homogeneous dimensions in L_efmit element. Check .ini biological parameters files !!\n");
        }

        dim_icat = INTEGER(getAttrib(v_icat, R_DimSymbol));////Rprintf("AAA3");
        if ((dim_icat[0]!=nbI) & (dim_icat[1]!=nbC))
        {
            error("Non_homogeneous dimensions in icat element. Check .ini biological parameters files !!\n");
        }
//Rprintf("M4\n");fichier << "M4" << endl;

        //---------
        // calcul de L_efmct
        //---------

        PROTECT(dimCst_L_efmct = allocVector(INTSXP, 4));
        dim_L_efmct = INTEGER(dimCst_L_efmct);
        dim_L_efmct[0] = dim_L_efmit[0] ; dim_L_efmct[1] = dim_L_efmit[1] ; dim_L_efmct[2] = nbC; dim_L_efmct[3] = dim_L_efmit[3];

        int count = 0, prod = 1, count2 = 0, count3 = 0;
        for (int k = 0 ; k < 4 ; k++) {

            if (dim_L_efmct[k]>0) {
                count++;
                prod = prod * dim_L_efmct[k];
            }

        }

        PROTECT(Dim_L_efmct = allocVector(INTSXP, count));
        dimLc = INTEGER(Dim_L_efmct);

//Rprintf("M5\n");fichier << "M5" << endl;
        for (int k = 0 ; k < 4 ; k++) {

            if (dim_L_efmct[k]>0) {
                dimLc[count2] = dim_L_efmct[k];
                count2++;
            }

        }

//--------------------------

        PROTECT(dimCst_P_fmce = allocVector(INTSXP, 4));
        dim_P_fmcet = INTEGER(dimCst_P_fmce);
        dim_P_fmcet[0] = nbF ; dim_P_fmcet[1] = nbMe ; dim_P_fmcet[2] = nbC; dim_P_fmcet[3] = nbT;



if (ind_t==0){
//Rprintf("M6\n");fichier << "M6" << endl;
        //on crée le tableau résultat pour l'espèce en question
        PROTECT(ans_L_efmct = NEW_NUMERIC(prod));
        setAttrib(ans_L_efmct, R_DimSymbol, Dim_L_efmct);

        PROTECT(ans_DD_efmc = NEW_NUMERIC(prod));
        setAttrib(ans_DD_efmc, R_DimSymbol, Dim_L_efmct);

        PROTECT(ans_LD_efmc = NEW_NUMERIC(prod));
        setAttrib(ans_LD_efmc, R_DimSymbol, Dim_L_efmct);

        PROTECT(dimnames_Lc = allocVector(VECSXP,count));
        if (dim_L_efmct[0]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, fleetList) ; count3++;}
        if (dim_L_efmct[1]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, metierList) ; count3++;}
        if (dim_L_efmct[2]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, intC) ; count3++;}
        if (dim_L_efmct[3]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, times) ; count3++;}

        rans_L_efmct = REAL(ans_L_efmct);
        rans_DD_efmc = REAL(ans_DD_efmc);
        rans_LD_efmc = REAL(ans_LD_efmc);

        PROTECT(ans_P_fmce = NEW_NUMERIC(nbF*nbMe*nbC*nbT));
        setAttrib(ans_P_fmce, R_DimSymbol, dimCst_P_fmce);

        PROTECT(dimnames_P = allocVector(VECSXP,4));
        SET_VECTOR_ELT(dimnames_P, 0, fleetList);
        SET_VECTOR_ELT(dimnames_P, 1, metierListEco);
        SET_VECTOR_ELT(dimnames_P, 2, intC);
        SET_VECTOR_ELT(dimnames_P, 3, times);

        r_P_fmce = REAL(ans_P_fmce);

//Rprintf("M7\n");fichier << "M7" << endl;
} else {

        rans_L_efmct = REAL(VECTOR_ELT(out_L_efmct, e));
        rans_DD_efmc = REAL(VECTOR_ELT(out_DD_efmc, e));
        rans_LD_efmc = REAL(VECTOR_ELT(out_LD_efmc, e));
        r_P_fmce = REAL(VECTOR_ELT(out_P_t, e));

//Rprintf("M8\n");fichier << "M8" << endl;
}

        r_L_efmit = REAL(v_L_efmit);
        r_DD_efmit = REAL(v_DD_efmit);
        r_LD_efmit = REAL(v_LD_efmit);
        r_icat = REAL(v_icat);

//Rprintf("M9\n");fichier << "M9" << endl;
        //facteurs des indices
        PROTECT(cFACTc = iDim(dim_L_efmct));
        PROTECT(cFACTi = iDim(dim_L_efmit));
        PROTECT(cFACTp = iDim(dim_P_fmcet));
        PROTECT(cFACTpini = iDim(dim_P_fmce));

        int *fact_Cc = INTEGER(cFACTc);
        int *fact_Ci = INTEGER(cFACTi);
        int *fact_P = INTEGER(cFACTp);
        int *fact_Pini = INTEGER(cFACTpini);

        r_P_fmceIni = REAL(v_P_fmce);

        //équation n°1 : conversion âge/catgégorie

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
        for (int ind_c = 0 ; ind_c < nbC ; ind_c++) {

            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {

                if (ind_i ==0) {

            rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                r_L_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

           rans_LD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                r_LD_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

           rans_DD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                r_DD_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

                } else {

            rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] +
                r_L_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

            rans_LD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                rans_LD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] +
                r_LD_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

            rans_DD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
                rans_DD_efmc[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] +
                r_DD_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];

                }
            }
        // valable car nbM = nbMe (M=Me)
            r_P_fmce[ind_f*fact_P[0] + ind_m*fact_P[1] + ind_c*fact_P[2] + ind_t*fact_P[3]] =
                r_P_fmceIni[ind_f*fact_Pini[0] + ind_m*fact_Pini[1] + ind_c*fact_Pini[2] + ind_t*fact_Pini[3]];

        }


//Rprintf("M10\n");fichier << "M10" << endl;

if (ind_t==0) {

        setAttrib(ans_L_efmct, R_DimNamesSymbol, dimnames_Lc);
        setAttrib(ans_L_efmct, install("DimCst"), dimCst_L_efmct);

        SET_VECTOR_ELT(out_L_efmct, e, ans_L_efmct);

        setAttrib(ans_DD_efmc, R_DimNamesSymbol, dimnames_Lc);
        setAttrib(ans_DD_efmc, install("DimCst"), dimCst_L_efmct);

        SET_VECTOR_ELT(out_DD_efmc, e, ans_DD_efmc);

        setAttrib(ans_LD_efmc, R_DimNamesSymbol, dimnames_Lc);
        setAttrib(ans_LD_efmc, install("DimCst"), dimCst_L_efmct);

        SET_VECTOR_ELT(out_LD_efmc, e, ans_LD_efmc);

      //  SET_VECTOR_ELT(out_L_efmct2, e, ans_L_efmct);

        setAttrib(ans_P_fmce, R_DimNamesSymbol, dimnames_P);
        setAttrib(ans_P_fmce, install("DimCst"), dimCst_P_fmce);

        SET_VECTOR_ELT(out_P_t, e, ans_P_fmce);

}

//Rprintf("M11\n");fichier << "M11" << endl;
if (ind_t==0) UNPROTECT(6);
UNPROTECT(15);

}
}


if (nbEstat>0) {
//Rprintf("M12\n");fichier << "M12" << endl;
    for (int e = 0 ; e < nbEstat ; e++) {
//Rprintf("M2\n");fichier << "M2" << endl;
        PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e))));

        PROTECT(v_P_eStat = getListElement(elmt, "P_fme"));
        PROTECT(dimCst_P_eStat = getAttrib(v_P_eStat, install("DimCst")));

        //tests sur les dimensions :
        dim_P_eStat = INTEGER(dimCst_P_eStat);////Rprintf("AAA1");
        if (((dim_P_eStat[0]!=0) & (dim_P_eStat[0]!=nbF)) | ((dim_P_eStat[1]!=0) & (dim_P_eStat[1]!=nbMe)) |
            (dim_P_eStat[2]!=0) | ((dim_P_eStat[3]!=0) & (dim_P_eStat[3]!=nbT)))
        {
            error("Non_homogeneous dimensions in P_fme element. Check .ini biological parameters files !!\n");
        }

        //---------
        // calcul de L_efmct
        //---------

        PROTECT(dimCst_P_eStat = allocVector(INTSXP, 4));
        dim_P_eStat_t = INTEGER(dimCst_P_eStat);
        dim_P_eStat_t[0] = nbF ; dim_P_eStat_t[1] = nbMe ; dim_P_eStat_t[2] = 0; dim_P_eStat_t[3] = nbT;
        PROTECT(dimCst_P_eStatR = allocVector(INTSXP, 3));
        dim_P_eStat_tR = INTEGER(dimCst_P_eStatR);
        dim_P_eStat_tR[0] = nbF ; dim_P_eStat_tR[1] = nbMe ; dim_P_eStat_tR[2] = nbT;


if (ind_t==0){
//Rprintf("M6\n");fichier << "M6" << endl;

        PROTECT(ans_P_eStat = NEW_NUMERIC(nbF*nbMe*nbT));
        setAttrib(ans_P_eStat, R_DimSymbol, dimCst_P_eStatR);

        PROTECT(dimnames_Pstat = allocVector(VECSXP,3));
        SET_VECTOR_ELT(dimnames_Pstat, 0, fleetList);
        SET_VECTOR_ELT(dimnames_Pstat, 1, metierListEco);
        SET_VECTOR_ELT(dimnames_Pstat, 2, times);

        r_Pstat = REAL(ans_P_eStat);

//Rprintf("M7\n");fichier << "M7" << endl;
} else {

        r_Pstat = REAL(VECTOR_ELT(out_Pstat, e));

//Rprintf("M8\n");fichier << "M8" << endl;
}

//Rprintf("M9\n");fichier << "M9" << endl;
        //facteurs des indices
        PROTECT(cFACTpStat = iDim(dim_P_eStat_t));
        PROTECT(cFACTpStatini = iDim(dim_P_eStat));

        int *fact_Pstat = INTEGER(cFACTpStat);
        int *fact_Pstatini = INTEGER(cFACTpStatini);

        r_PstatIni = REAL(v_P_eStat);

        //équation n°1 : conversion âge/catgégorie

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
        for (int ind_m = 0 ; ind_m < nbM ; ind_m++) {

        // valable car nbM = nbMe (M=Me)
            r_Pstat[ind_f*fact_Pstat[0] + ind_m*fact_Pstat[1] + 0*fact_Pstat[2] + ind_t*fact_Pstat[3]] =
                r_PstatIni[ind_f*fact_Pstatini[0] + ind_m*fact_Pstatini[1] + 0*fact_Pstatini[2] + ind_t*fact_Pstatini[3]];

        }

//Rprintf("M10\n");fichier << "M10" << endl;

if (ind_t==0) {

        setAttrib(ans_P_eStat, R_DimNamesSymbol, dimnames_Pstat);
        setAttrib(ans_P_eStat, install("DimCst"), dimCst_P_eStat);

        SET_VECTOR_ELT(out_Pstat, e, ans_P_eStat);

}

//Rprintf("M11\n");fichier << "M11" << endl;
if (ind_t==0) UNPROTECT(2);
UNPROTECT(7);

}

}

if (ind_t==0) UNPROTECT(1);

//fichier.close();

}}


//extern "C" {
//
//void BioEcoPar::Marche(SEXP list, int ind_t)
//{
//
//
//    SEXP    elmt, intC, v_P_fmce, v_icat, v_L_efmit, dimCst_P_fmce, dimCst_L_efmit, dimCst_L_efmct, Dim_L_efmct,
//            ans_L_efmct = R_NilValue, dimnames_Lc = R_NilValue, rnames_Esp, cFACTc, cFACTi; //dimnames_Lc2 = R_NilValue,
//    SEXP v_P_eStat, dimCst_P_eStat;
//
//    //SEXP ans_L_efmct2 = R_NilValue,  dimCst_L_efmct2, Dim_L_efmct2;
//
//    int *dim_P_fmce, *dim_L_efmit, *dim_icat, *dim_L_efmct, *dimLc, *dim_P_eStat;
//    //int *dim_L_efmct2, *dim_mme, *dimLc2, *r_mme;
//
//    int nbI, nbC;
//
//    double *rans_L_efmct, *r_L_efmit, *r_P_fmce, *r_icat;
//    //double *rans_L_efmct2;
////Rprintf("CCC1");
//
//if (ind_t==0) {
//
//
//    PROTECT(rnames_Esp = getAttrib(out_L_efmit,R_NamesSymbol));////PrintValue(rnames_Esp);
//    setAttrib(out_L_efmct, R_NamesSymbol, rnames_Esp);
//
//    setAttrib(out_P_t, R_NamesSymbol, rnames_Esp);
//    if (nbEstat>0) setAttrib(out_Pstat, R_NamesSymbol, sppListStat);
//
//    setAttrib(out_L_efmct2, R_NamesSymbol, rnames_Esp);
//
//}
//
////Rprintf("M1\n");
//
//    for (int e = 0 ; e < nbE ; e++) {
////Rprintf("M2\n");
//        PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));
//
//        nbI = length(getListElement(elmt, "modI"));
//        intC = getListElement(elmt, "modC");
//        nbC = length(intC);
//
//        PROTECT(v_P_fmce = getListElement(elmt, "P_fmce"));////Rprintf("CCC1");
//        PROTECT(v_icat = getListElement(elmt, "icat"));   //qqsoit i, sum_c icat = 1
//        PROTECT(v_L_efmit = getListElement(out_L_efmit, CHAR(STRING_ELT(sppList,e))));////Rprintf("BBB1");
////        PROTECT(v_mme = getListElement(elmt, "mm"));
//
//        PROTECT(dimCst_P_fmce = getAttrib(v_P_fmce, install("DimCst")));
//        PROTECT(dimCst_L_efmit = getAttrib(v_L_efmit, install("DimCst")));
////        PROTECT(dimCst_mme = getAttrib(v_mme, install("DimCst")));
////Rprintf("M3\n");
//        //tests sur les dimensions :
//        dim_P_fmce = INTEGER(dimCst_P_fmce);////Rprintf("AAA1");
//        if ((dim_P_fmce[0]!=0 & dim_P_fmce[0]!=nbF) | (dim_P_fmce[1]!=0 & dim_P_fmce[1]!=nbMe) |
//            (dim_P_fmce[2]!=0 & dim_P_fmce[2]!=nbC) | (dim_P_fmce[3]!=0 & dim_P_fmce[3]!=nbT))
//        {
//            error("Non_homogeneous dimensions in P_fmce element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_L_efmit = INTEGER(dimCst_L_efmit);////Rprintf("AAA2");
//        if ((dim_L_efmit[0]!=0 & dim_L_efmit[0]!=nbF) | (dim_L_efmit[1]!=0 & dim_L_efmit[1]!=nbM) |
//            (dim_L_efmit[2]!=0 & dim_L_efmit[2]!=nbI) | (dim_L_efmit[3]!=0 & dim_L_efmit[3]!=nbT))
//        {
//            error("Non_homogeneous dimensions in L_efmit element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_icat = INTEGER(getAttrib(v_icat, R_DimSymbol));////Rprintf("AAA3");
//        if ((dim_icat[0]!=nbI) & (dim_icat[1]!=nbC))
//        {
//            error("Non_homogeneous dimensions in icat element. Check .ini biological parameters files !!\n");
//        }
////Rprintf("M4\n");
////        dim_mme = INTEGER(getAttrib(v_mme, R_DimSymbol));
////        if ((dim_mme[0]!=nbF) & (dim_mme[1]!=nbM))
////        {
////            error("Non_homogeneous dimensions in mm element. Check .ini biological parameters files !!\n");
////        }
//
//    /////////////////////////////////////////////////////////////////////////////////////////////////
//    /////////////////////////////////////////////////////////////////////////////////////////////////
//    /////////////////////////////////////////////////////////////////////////////////////////////////
//
//        //---------
//        // calcul de L_efmct
//        //---------
//
//        PROTECT(dimCst_L_efmct = allocVector(INTSXP, 4));
////        PROTECT(dimCst_L_efmct2 = allocVector(INTSXP, 4));
//        dim_L_efmct = INTEGER(dimCst_L_efmct);////Rprintf("AAA4");
////        dim_L_efmct2 = INTEGER(dimCst_L_efmct2);
//        dim_L_efmct[0] = dim_L_efmit[0] ; dim_L_efmct[1] = dim_L_efmit[1] ; dim_L_efmct[2] = nbC; dim_L_efmct[3] = dim_L_efmit[3];
////        dim_L_efmct2[0] = dim_L_efmit[0] ; dim_L_efmct2[1] = nbMe*(dim_L_efmit[1]>0) ; dim_L_efmct2[2] = nbC; dim_L_efmct2[3] = dim_L_efmit[3];
//
//        int count = 0, prod = 1, count2 = 0, count3 = 0; //prod2 = 1, count22 = 0,
//        for (int k = 0 ; k < 4 ; k++) {
//
//            if (dim_L_efmct[k]>0) {
//                count++;
//                prod = prod * dim_L_efmct[k];
////                prod2 = prod2 * dim_L_efmct2[k];
//            }
//
//        }
//
//        PROTECT(Dim_L_efmct = allocVector(INTSXP, count));
//        dimLc = INTEGER(Dim_L_efmct);////Rprintf("AAA5");
////        PROTECT(Dim_L_efmct2 = allocVector(INTSXP, count));
////        dimLc2 = INTEGER(Dim_L_efmct2);
//
////Rprintf("M5\n");
//        for (int k = 0 ; k < 4 ; k++) {
//
//            if (dim_L_efmct[k]>0) {
//                dimLc[count2] = dim_L_efmct[k];
//                count2++;
//            }
//
////            if (dim_L_efmct2[k]>0) {
////                dimLc2[count22] = dim_L_efmct2[k];
////                count22++;
////            }
//
//        }
//
//
//if (ind_t==0){
////Rprintf("M6\n");
//        //on crée le tableau résultat pour l'espèce en question
//        PROTECT(ans_L_efmct = NEW_NUMERIC(prod));
//        setAttrib(ans_L_efmct, R_DimSymbol, Dim_L_efmct);
////        PROTECT(ans_L_efmct2 = NEW_NUMERIC(prod2));
////        setAttrib(ans_L_efmct2, R_DimSymbol, Dim_L_efmct2);
//
//        PROTECT(dimnames_Lc = allocVector(VECSXP,count));
//        if (dim_L_efmct[0]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, fleetList) ; count3++;}
//        if (dim_L_efmct[1]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, metierList) ; count3++;}
//        if (dim_L_efmct[2]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, intC) ; count3++;}
//        if (dim_L_efmct[3]>0) {SET_VECTOR_ELT(dimnames_Lc, count3, times) ; count3++;}
//
////        count3 = 0;
////        PROTECT(dimnames_Lc2 = allocVector(VECSXP,count));
////        if (dim_L_efmct2[0]>0) {SET_VECTOR_ELT(dimnames_Lc2, count3, fleetList) ; count3++;}
////        if (dim_L_efmct2[1]>0) {SET_VECTOR_ELT(dimnames_Lc2, count3, metierListEco) ; count3++;}
////        if (dim_L_efmct2[2]>0) {SET_VECTOR_ELT(dimnames_Lc2, count3, intC) ; count3++;}
////        if (dim_L_efmct2[3]>0) {SET_VECTOR_ELT(dimnames_Lc2, count3, times) ; count3++;}
//
//        rans_L_efmct = REAL(ans_L_efmct);
////        rans_L_efmct2 = REAL(ans_L_efmct2);
////Rprintf("M7\n");
//} else {
//
//        rans_L_efmct = REAL(VECTOR_ELT(out_L_efmct, e));
////        rans_L_efmct2 = REAL(VECTOR_ELT(out_L_efmct2, e));
////Rprintf("M8\n");
//}
//
//        r_L_efmit = REAL(v_L_efmit);
//        r_P_fmce = REAL(v_P_fmce);
//        r_icat = REAL(v_icat);
////        r_mme = INTEGER(AS_INTEGER(v_mme));
////        double *r_mme2 = REAL(v_mme);
////Rprintf("M9\n");
//        //facteurs des indices
//        PROTECT(cFACTc = iDim(dim_L_efmct));
////        PROTECT(cFACTc2 = iDim(dim_L_efmct2));
//        PROTECT(cFACTi = iDim(dim_L_efmit));
////        PROTECT(cFACTmm = iDim(dim_mme));
//
//        int *fact_Cc = INTEGER(cFACTc);
//        int *fact_Ci = INTEGER(cFACTi);////Rprintf("AAA6");
////        int *fact_Cc2 = INTEGER(cFACTc2);
//
//        //équation n°1 : conversion âge/catgégorie
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_c = 0 ; ind_c < nbC ; ind_c++) {
//
//            for (int ind_i = 0 ; ind_i < nbI ; ind_i++) {
//
//                if (ind_i ==0) {
//
//            rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
//                r_L_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];
//
//                } else {
//
//            rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] =
//                rans_L_efmct[ind_f*fact_Cc[0] + ind_m*fact_Cc[1] + ind_c*fact_Cc[2] + ind_t*fact_Cc[3]] +
//                r_L_efmit[ind_f*fact_Ci[0] + ind_m*fact_Ci[1] + ind_i*fact_Ci[2] + ind_t*fact_Ci[3]] * r_icat[ind_i + nbI*ind_c];
//
//                }
//            }
//        }
//
//
////Rprintf("M10\n");
//
//if (ind_t==0) {
//
//        setAttrib(ans_L_efmct, R_DimNamesSymbol, dimnames_Lc);
//        setAttrib(ans_L_efmct, install("DimCst"), dimCst_L_efmct);
//
////        setAttrib(ans_L_efmct2, R_DimNamesSymbol, dimnames_Lc2);
////        setAttrib(ans_L_efmct2, install("DimCst"), dimCst_L_efmct2);
//
//        SET_VECTOR_ELT(out_L_efmct, e, ans_L_efmct);
//        SET_VECTOR_ELT(out_L_efmct2, e, ans_L_efmct);
//
//}
//
//        SET_VECTOR_ELT(out_P_t, e, v_P_fmce); //à modifier dès qu'il faudra une modélisation plus précise !!!!!!!!!!!
//
////Rprintf("M11\n");
//if (ind_t==0) UNPROTECT(2);
//UNPROTECT(10);
//
//}
//
//
//if (nbEstat>0) {
////Rprintf("M12\n");
//    for (int e = 0 ; e < nbEstat ; e++) {
//
//            PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e))));
//
//            PROTECT(v_P_eStat = getListElement(elmt, "P_fme"));////Rprintf("CCC1");
//            PROTECT(dimCst_P_eStat = getAttrib(v_P_eStat, install("DimCst")));
////Rprintf("M13\n");
//            //tests sur les dimensions :
//            dim_P_eStat = INTEGER(dimCst_P_eStat);////Rprintf("AAA1");
//            if ((dim_P_eStat[0]!=0 & dim_P_eStat[0]!=nbF) | (dim_P_eStat[1]!=0 & dim_P_eStat[1]!=nbMe) |
//                (dim_P_eStat[2]!=0) | (dim_P_eStat[3]!=0 & dim_P_eStat[3]!=nbT))
//            {
//                error("Non_homogeneous dimensions in P_fme element. Check .ini biological parameters files !!\n");
//            }
//
//            SET_VECTOR_ELT(out_Pstat, e, v_P_eStat);  //à modifier dès qu'il faudra une modélisation plus précise !!!!!!!!!!!
////Rprintf("K14\n");
//    UNPROTECT(3);
////Rprintf("M14\n");
//    }
//
//}
//
//if (ind_t==0) UNPROTECT(1);
//
//}}



//extern "C" {
//
//void BioEcoPar::Marche(SEXP list, int t)
//{
//
//if (t==0){
//
//    SEXP    ans_1, elmt,
//            dimCst, Dim, dimnames, dimCst_L_efmit, dimCst_cat_i, dimCst_alpha_i, dimCst_beta_i, dimCst_gamma_i, dimCst_P_it, intAge,
//            v_L_efmit, v_cat_i, v_alpha_i, v_beta_i, v_gamma_i, v_P_it, tab_sum_i, tab_sum_not_i, dimCoeff;
//
//    SEXP rnames;
//
//    int *dim_L_efmit, *dim_cat_i, *dim_alpha_i, *dim_beta_i, *dim_gamma_i, *dim_P_it, *dimC, *dimCo;
//    int nbI;
//
//    double *rans_1, *r_L_efmit, *r_alpha_i, *r_beta_i, *r_gamma_i, *r_P_it, *sum_i, *sum_not_i, *rtab_sum_i, *rtab_sum_not_i;
//
//    PROTECT(out_P_t = allocVector(VECSXP, nbE));
//    PROTECT(rnames = allocVector(STRSXP, nbE));
//    setAttrib(out_P_t , R_NamesSymbol, rnames);
//
//    for (int e = 0 ; e < nbE ; e++) {
//
//        //---------
//        // calcul de P_eit
//        //---------
//
//        elmt = getListElement(bioList, CHAR(STRING_ELT(sppList,e)));
//        intAge = getListElement(namDC, CHAR(STRING_ELT(sppList,e)));
//
//        nbI = length(getListElement(elmt, "age"));
//
//        v_cat_i = getListElement(elmt, "cat_i");
//        v_alpha_i = getListElement(elmt, "alpha_c");    //attention : nom de variable à remettre à jour
//        v_beta_i = getListElement(elmt, "beta_c");
//        v_gamma_i = getListElement(elmt, "gamma_c");
//        v_P_it = getListElement(elmt, "P_ct");
//        v_L_efmit = getListElement( out_L_efmit , CHAR(STRING_ELT(sppList,e))) ;
//
//        dimCst_cat_i = getAttrib(v_cat_i, install("DimCst"));
//        dimCst_alpha_i = getAttrib(v_alpha_i, install("DimCst"));
//        dimCst_beta_i = getAttrib(v_beta_i, install("DimCst"));
//        dimCst_gamma_i = getAttrib(v_gamma_i, install("DimCst"));
//        dimCst_P_it = getAttrib(v_P_it, install("DimCst"));
//        dimCst_L_efmit = getAttrib(v_L_efmit, install("DimCst"));
//
//        //tests sur les dimensions
//        dim_cat_i = INTEGER(dimCst_cat_i);
//        if ((dim_cat_i[0]!=0) | (dim_cat_i[1]!=0) |
//            (dim_cat_i[2]!=0 & dim_cat_i[2]!=nbI) | (dim_cat_i[3]!=0))
//        {
//            error("Non_homogeneous dimensions in cat_i element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_alpha_i = INTEGER(dimCst_alpha_i);
//        if ((dim_alpha_i[0]!=0 & dim_alpha_i[0]!=nbF) | (dim_alpha_i[1]!=0 & dim_alpha_i[1]!=nbM) |
//            (dim_alpha_i[2]!=0 & dim_alpha_i[2]!=nbI) | (dim_alpha_i[3]!=0 & dim_alpha_i[3]!=nbT))
//        {
//            error("Non_homogeneous dimensions in alpha_mi element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_beta_i = INTEGER(dimCst_beta_i); //les facteurs alpha, beta et gamma doivent avoir même dimension
//        if ((dim_beta_i[0]!=dim_alpha_i[0]) | (dim_beta_i[1]!=dim_alpha_i[1]) |
//            (dim_beta_i[2]!=dim_alpha_i[2]) | (dim_beta_i[3]!=dim_alpha_i[3]))
//        {
//            error("Non_homogeneous dimensions in beta_mi element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_gamma_i = INTEGER(dimCst_gamma_i);
//        if ((dim_gamma_i[0]!=dim_alpha_i[0]) | (dim_gamma_i[1]!=dim_alpha_i[1]) |
//            (dim_gamma_i[2]!=dim_alpha_i[2]) | (dim_gamma_i[3]!=dim_alpha_i[3]))
//        {
//            error("Non_homogeneous dimensions in gamma_mi element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_P_it = INTEGER(dimCst_P_it);
//        if ((dim_P_it[0]!=0 & dim_P_it[0]!=nbF) | (dim_P_it[1]!=0 & dim_P_it[1]!=nbM) |
//            (dim_P_it[2]!=0 & dim_P_it[2]!=nbI) | (dim_P_it[3]!=0 & dim_P_it[3]!=nbT))
//        {
//            error("Non_homogeneous dimensions in P_mit element. Check .ini biological parameters files !!\n");
//        }
//
//        dim_L_efmit = INTEGER(dimCst_L_efmit);
//        if ((dim_L_efmit[0]!=0 & dim_L_efmit[0]!=nbF) | (dim_L_efmit[1]!=0 & dim_L_efmit[1]!=nbM) |
//            (dim_L_efmit[2]!=nbI) | (dim_L_efmit[3]!=0 & dim_L_efmit[3]!=nbT))
//        {
//            error("Non_homogeneous dimensions in L_efmit element. Check .ini biological parameters files !!\n");
//        }
//
//        //on détermine l'attribut Dimension du tableau résultant -> dimCst (on en profite pour compter les dimensions réelles + nombre de cellules)
//        PROTECT(dimCst = allocVector(INTSXP, 4));
//        dimC = INTEGER(dimCst);
//        dimC[0] = nbF; dimC[1] = nbM; dimC[2] = nbI; dimC[3] =nbT;
//        int count = 0, prod = 1, count2 = 0, count3 = 0;
//
//        for (int k = 0 ; k < 4 ; k++) {
//
//            if (dimC[k]>0) {
//                count++;
//                prod = prod * dimC[k];
//            }
//
//        }
//
//        PROTECT(Dim = allocVector(INTSXP, count));
//        int *dim = INTEGER(Dim);
//
//        for (int k = 0 ; k < 4 ; k++) {
//            if (dimC[k]>0) {
//                dim[count2] = dimC[k];
//                count2++;
//                }
//        }
//
//
//        //on crée le tableau résultat pour l'espèce en question -> ans_1
//        ans_1 = PROTECT(NEW_NUMERIC(prod));
//        setAttrib(ans_1, R_DimSymbol, Dim);
//
//        PROTECT(dimnames = allocVector(VECSXP,count));
//        if (dimC[0]>0) {SET_VECTOR_ELT(dimnames, count3, getListElement(paramList, "Fleet")) ; count3++;}
//        if (dimC[1]>0) {SET_VECTOR_ELT(dimnames, count3, getListElement(paramList, "Metier")) ; count3++;}
//        if (dimC[2]>0) {SET_VECTOR_ELT(dimnames, count3, intAge) ; count3++;}
//        if (dimC[3]>0) {SET_VECTOR_ELT(dimnames, count3, getListElement(paramList, "times")) ; count3++;}
//
//        rans_1 = REAL(ans_1);
//        r_L_efmit = REAL(v_L_efmit);
//        r_alpha_i = REAL(v_alpha_i);
//        r_beta_i = REAL(v_beta_i);
//        r_gamma_i = REAL(v_gamma_i);
//        r_P_it = REAL(v_P_it);
//
//        //facteurs des indices
//        fact1_P = iDim(dimC);
//        fact2_P = iDim(dim_alpha_i);
//    //   fact3_P = iDim(dim_beta_i);
//    //   fact4_P = iDim(dim_gamma_i);
//        fact5_P = iDim(dim_P_it);
//        fact6_P = iDim(dim_L_efmit);
//
//
//        //il faut avant tout créer les tableaux sum_L_fmeit et sumNot_L_fmeit
//            //1ère étape : somme sur les âges de chaque classe
//        tab_sum_i = PROTECT(NEW_NUMERIC(prod));
//        tab_sum_not_i = PROTECT(NEW_NUMERIC(prod));
//        rtab_sum_i = REAL(tab_sum_i);
//        rtab_sum_not_i = REAL(tab_sum_not_i);
//
//                //initialisation
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//            rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] = 0.0;
//            rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] = 0.0;
//
//        }
//
//                //somme sur i
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//        //classe associée à l'âge
//
//        for (int I = 0 ; I < nbI ; I++) {
//
//            if (CHAR(STRING_ELT(v_cat_i, I))==CHAR(STRING_ELT(v_cat_i, ind_i))){   //ATTENTION : ceci implique que cat_i reste un vecteur par âge --> pas d'autres déclinaisons
//
//                rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] =
//                 rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] +
//                 r_L_efmit[ind_f*fact6_P[0] + ind_m*fact6_P[1] + I*fact6_P[2] + 0*fact6_P[3]];
//
//            } else {
//
//                rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] =
//                 rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] +
//                 r_L_efmit[ind_f*fact6_P[0] + ind_m*fact6_P[1] + I*fact6_P[2] + 0*fact6_P[3]];
//
//            }
//
//        }
//        }
//            //2ème étape : on agrège en fonction des dimensions des coefficients
//
//        PROTECT(dimCoeff = allocVector(INTSXP, 4));
//        dimCo = INTEGER(dimCoeff);
//        dimCo[0] = dim_alpha_i[0]; dimCo[1] = dim_alpha_i[1]; dimCo[2] = nbI; dimCo[3] = nbT;
//        setAttrib(tab_sum_i, install("DimCst"), dimCst);
//        setAttrib(tab_sum_not_i, install("DimCst"), dimCst);
//
//        sum_i = REAL(aggregObj(tab_sum_i,dimCoeff));
//        sum_not_i = REAL(aggregObj(tab_sum_not_i,dimCoeff));
//
//        //équation
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//            if (!ISNA(r_P_it[ind_f*fact5_P[0] + ind_m*fact5_P[1] + ind_i*fact5_P[2] + 0*fact5_P[3]])) {
//
//                rans_1[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] =
//                    r_P_it[ind_f*fact5_P[0] + ind_m*fact5_P[1] + ind_i*fact5_P[2] + 0*fact5_P[3]];
//
//            } else {
//
//                rans_1[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + 0*fact1_P[3]] =
//                 exp(r_alpha_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + 0*fact2_P[3]] +
//                  r_beta_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + 0*fact2_P[3]] *
//                  log(sum_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + 0*fact2_P[3]]) +
//                  r_gamma_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + 0*fact2_P[3]] *
//                  log(sum_not_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + 0*fact2_P[3]]));
//            }
//        }
//
//        setAttrib(ans_1, R_DimNamesSymbol, dimnames);
//        setAttrib(ans_1, install("DimCst"), dimCst);
//
//        SET_VECTOR_ELT(out_P_t, e, ans_1);
//        SET_STRING_ELT(rnames, e, STRING_ELT(sppList,e));
//
//        UNPROTECT(7);
//    }
//
//    UNPROTECT(2);
//
//
//
//} else {
//
//
//
//
//    SEXP    ans_1, elmt,
//            dimCst, dimCst_L_efmit, dimCst_cat_i, dimCst_alpha_i, dimCst_beta_i, dimCst_gamma_i, dimCst_P_it, intAge,
//            v_L_efmit, v_cat_i, v_alpha_i, v_beta_i, v_gamma_i, v_P_it, tab_sum_i, tab_sum_not_i, dimCoeff;
//
//    int *dim_alpha_i, *dimC, *dimCo;
//    int nbI;
//
//    double *rans_1, *r_L_efmit, *r_alpha_i, *r_beta_i, *r_gamma_i, *r_P_it, *sum_i, *sum_not_i, *rtab_sum_i, *rtab_sum_not_i;
//
//    for (int e = 0 ; e < nbE ; e++) {
//
//        //---------
//        // calcul de P_eit
//        //---------
//
//        elmt = getListElement(bioList, CHAR(STRING_ELT(sppList,e)));
//        intAge = getListElement(namDC, CHAR(STRING_ELT(sppList,e)));
//
//        nbI = length(getListElement(elmt, "age"));
//
//        v_cat_i = getListElement(elmt, "cat_i");
//        v_alpha_i = getListElement(elmt, "alpha_c");    //attention : nom de variable à remettre à jour
//        v_beta_i = getListElement(elmt, "beta_c");
//        v_gamma_i = getListElement(elmt, "gamma_c");
//        v_P_it = getListElement(elmt, "P_ct");
//        v_L_efmit = getListElement( out_L_efmit, CHAR(STRING_ELT(sppList,e))) ;
//
//        dimCst_cat_i = getAttrib(v_cat_i, install("DimCst"));
//        dimCst_alpha_i = getAttrib(v_alpha_i, install("DimCst"));
//        dimCst_beta_i = getAttrib(v_beta_i, install("DimCst"));
//        dimCst_gamma_i = getAttrib(v_gamma_i, install("DimCst"));
//        dimCst_P_it = getAttrib(v_P_it, install("DimCst"));
//        dimCst_L_efmit = getAttrib(v_L_efmit, install("DimCst"));
//
//        dim_alpha_i = INTEGER(dimCst_alpha_i);
//
//        //on crée le tableau résultat pour l'espèce en question -> ans_1
//        ans_1 = getListElement(out_P_t, CHAR(STRING_ELT(sppList,e)));
//
//        rans_1 = REAL(ans_1);
//        r_L_efmit = REAL(v_L_efmit);
//        r_alpha_i = REAL(v_alpha_i);
//        r_beta_i = REAL(v_beta_i);
//        r_gamma_i = REAL(v_gamma_i);
//        r_P_it = REAL(v_P_it);
//
//        PROTECT(dimCst = allocVector(INTSXP, 4));
//        dimC = INTEGER(dimCst);
//        dimC[0] = nbF; dimC[1] = nbM; dimC[2] = nbI; dimC[3] =nbT;
//        int count = 0, prod = 1;
//
//        for (int k = 0 ; k < 4 ; k++) {
//
//            if (dimC[k]>0) {
//                count++;
//                prod = prod * dimC[k];
//            }
//
//        }
//
//      //il faut avant tout créer les tableaux sum_L_fmeit et sumNot_L_fmeit
//            //1ère étape : somme sur les ages de chaque classe
//        tab_sum_i = PROTECT(NEW_NUMERIC(prod));
//        tab_sum_not_i = PROTECT(NEW_NUMERIC(prod));
//        rtab_sum_i = REAL(tab_sum_i);
//        rtab_sum_not_i = REAL(tab_sum_not_i);
//
//                //initialisation
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//            rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] = 0.0;
//            rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] = 0.0;
//
//        }
//
//                //somme sur i
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//        //classe associée à l'âge
//
//        for (int I = 0 ; I < nbI ; I++) {
//
//            if (CHAR(STRING_ELT(v_cat_i, I))==CHAR(STRING_ELT(v_cat_i, ind_i))){   //ATTENTION : ceci implique que cat_i reste un vecteur par âge --> pas d'autres déclinaisons
//
//                rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] =
//                 rtab_sum_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] +
//                 r_L_efmit[ind_f*fact6_P[0] + ind_m*fact6_P[1] + I*fact6_P[2] + t*fact6_P[3]];
//
//            } else {
//
//                rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] =
//                 rtab_sum_not_i[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] +
//                 r_L_efmit[ind_f*fact6_P[0] + ind_m*fact6_P[1] + I*fact6_P[2] + t*fact6_P[3]];
//
//            }
//
//        }
//        }
//            //2ème étape : on agrège en fonction des dimensions des coefficients
//
//        PROTECT(dimCoeff = allocVector(INTSXP, 4));
//        dimCo = INTEGER(dimCoeff);
//        dimCo[0] = dim_alpha_i[0]; dimCo[1] = dim_alpha_i[1]; dimCo[2] = nbI; dimCo[3] = nbT;
//        setAttrib(tab_sum_i, install("DimCst"), dimCst);
//        setAttrib(tab_sum_not_i, install("DimCst"), dimCst);
//
//        sum_i = REAL(aggregObj(tab_sum_i,dimCoeff));
//        sum_not_i = REAL(aggregObj(tab_sum_not_i,dimCoeff));
//
//        //équation
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m < nbM ; ind_m++)
//        for (int ind_i = 0 ; ind_i < nbI ; ind_i++){
//
//            if (!ISNA(r_P_it[ind_f*fact5_P[0] + ind_m*fact5_P[1] + ind_i*fact5_P[2] + t*fact5_P[3]])) {
//
//                rans_1[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] =
//                    r_P_it[ind_f*fact5_P[0] + ind_m*fact5_P[1] + ind_i*fact5_P[2] + t*fact5_P[3]];
//
//            } else {
//
//                rans_1[ind_f*fact1_P[0] + ind_m*fact1_P[1] + ind_i*fact1_P[2] + t*fact1_P[3]] =
//                 exp(r_alpha_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + t*fact2_P[3]] +
//                  r_beta_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + t*fact2_P[3]] *
//                  log(sum_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + t*fact2_P[3]]) +
//                  r_gamma_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + t*fact2_P[3]] *
//                  log(sum_not_i[ind_f*fact2_P[0] + ind_m*fact2_P[1] + ind_i*fact2_P[2] + t*fact2_P[3]]));
//            }
//        }
//
//        UNPROTECT(4);
//    }
//}
//
//}
//}
//
//
//
//






//---------------------------------
//
// Module de recrutement aléatoire
//
//---------------------------------



extern "C" {

void BioEcoPar::RecAlea(SEXP list, SEXP listSto, int ind_t, int type, int *recTyp) //list : liste des paramètres d'entrée ; listSto : liste des variables d'opérations stochastiques ; type : 1 -> samples sur l'historique (temps variable), 2 -> samples sur l'historique (temps constant), 3 -> loi de distribution
{

if (type<3) {

       SEXP elmtIn, elmtMeanSto, elmtResSto, MeanSto, ResSto, Rec, dimRec;
    //on tire au sort pour chacune des espèces modélisées un résidu et on l'ajoute à la moyenne géométrique pré-calculée
       int index = 0;

    for (int e = 0 ; e < nbE ; e++) {

                    if (recTyp[e]==1) {

                        PROTECT(elmtIn = getListElement(list, CHAR(STRING_ELT(sppList,e))));
                        if (type==1) {

                            PROTECT(elmtMeanSto = getListElement(listSto, "GeoMeanRec"));
                            PROTECT(elmtResSto = getListElement(listSto, "RecResiduals"));

                        } else {

                            PROTECT(elmtMeanSto = getListElement(listSto, "GeoMeanRecLink"));
                            PROTECT(elmtResSto = getListElement(listSto, "RecResidualsLink"));

                        }

                        PROTECT(MeanSto = getListElement(elmtMeanSto, CHAR(STRING_ELT(sppList,e))));
                        PROTECT(ResSto = getListElement(elmtResSto, CHAR(STRING_ELT(sppList,e))));

                        int ll = length(ResSto);

                    if (ll > 0) {

                        if (type==1) { //multiple tirage d'indice (1 par espèce)

                            index = ll;
                            while (index >= ll) index = (int)(rand() / (((double)RAND_MAX + 1)/ ll));

                        } else {        //unique tirage d'indice pour les espèces considérées (historiques de même taille)

                            if (e==0) {

                                index = ll;
                                while (index >= ll) index = (int)(rand() / (((double)RAND_MAX + 1)/ ll));

                            }

                        }

                        PROTECT(Rec = getListElement(elmtIn, "N_i0t"));
                        PROTECT(dimRec = getAttrib(Rec, install("DimCst")));


                        int *dimrec;
                        double *rec = REAL(Rec), *geomean = REAL(MeanSto), *residuals = REAL(ResSto);


                        dimrec = INTEGER(dimRec);

                        if (dimrec[3]==0) rec[0] = geomean[0] + residuals[index]; else rec[ind_t] = geomean[0] + residuals[index];

                        UNPROTECT(2);

                    }

                    UNPROTECT(5);

                    }

    }



} else {



    SEXP elmtIn, elmtDist, elmtDistParOne, elmtDistParTwo, elmtDistParThree,
         elmtDistSp, elmtDistParOneSp, elmtDistParTwoSp, elmtDistParThreeSp, Rec, dimRec;
    //on génère une variable aléatoire suivant une loi log-normale de paramètres spécifiés

    for (int e = 0 ; e < nbE ; e++) {

                if (recTyp[e]==1) {

                PROTECT(elmtIn = getListElement(list, CHAR(STRING_ELT(sppList,e))));
                PROTECT(elmtDist = getListElement(listSto, "RecDist"));
                PROTECT(elmtDistParOne = getListElement(listSto, "RecDistPar1"));
                PROTECT(elmtDistParTwo = getListElement(listSto, "RecDistPar2"));
                PROTECT(elmtDistParThree = getListElement(listSto, "RecDistPar3"));

                PROTECT(elmtDistSp = getListElement(elmtDist, CHAR(STRING_ELT(sppList,e))));
                PROTECT(elmtDistParOneSp = getListElement(elmtDistParOne, CHAR(STRING_ELT(sppList,e))));
                PROTECT(elmtDistParTwoSp = getListElement(elmtDistParTwo, CHAR(STRING_ELT(sppList,e))));
                PROTECT(elmtDistParThreeSp = getListElement(elmtDistParThree, CHAR(STRING_ELT(sppList,e))));

                double v_a = NA_REAL;

                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "beta") == 0) v_a = rbeta(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
        //        if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "nbeta") == 0) v_a = rnbeta(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0],REAL(elmtDistParThreeSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "binom") == 0) v_a = rbinom(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "cauchy") == 0) v_a = rcauchy(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "chisq") == 0) v_a = rchisq(REAL(elmtDistParOneSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "nchisq") == 0) v_a = rnchisq(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "exp") == 0) v_a = rexp(REAL(elmtDistParOneSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "f") == 0) v_a = rf(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
        //        if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "nf") == 0) v_a = rnf(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0],REAL(elmtDistParThreeSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "gamma") == 0) v_a = rgamma(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "geom") == 0) v_a = rgeom(REAL(elmtDistParOneSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "hyper") == 0) v_a = rhyper(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0],REAL(elmtDistParThreeSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "logis") == 0) v_a = rlogis(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "lnorm") == 0) v_a = rlnorm(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "nbinom") == 0) v_a = rnbinom(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "norm") == 0) v_a = rnorm(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "pois") == 0) v_a = rpois(REAL(elmtDistParOneSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "t") == 0) v_a = rt(REAL(elmtDistParOneSp)[0]);
         //       if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "nt") == 0) v_a = rnt(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
         //       if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "tukey") == 0) v_a = rtukey(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0],REAL(elmtDistParThreeSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "unif") == 0) v_a = runif(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "weibull") == 0) v_a = rweibull(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "wilcox") == 0) v_a = rwilcox(REAL(elmtDistParOneSp)[0],REAL(elmtDistParTwoSp)[0]);
                if (strcmp(CHAR(STRING_ELT(elmtDistSp, 0)), "signrank") == 0) v_a = rsignrank(REAL(elmtDistParOneSp)[0]);

                //if ... pour les autres lois --> à compléter

                PROTECT(Rec = getListElement(elmtIn, "N_i0t"));
                PROTECT(dimRec = getAttrib(Rec, install("DimCst")));

                int *dimrec;
                double *rec = REAL(Rec);

                dimrec = INTEGER(dimRec);

                if (!ISNA(v_a)) {
                    if (dimrec[3]==0) rec[0] = v_a; else rec[ind_t] = v_a;
                }

                UNPROTECT(11);

            }

    }
}

}}





//---------------------------------
//
// Module de modélisation de relations S/R
//
//---------------------------------



extern "C" {

void BioEcoPar::SRmod(SEXP list, SEXP listSR, int ind_t, SEXP TypeSR, int *srind)
        //list : liste des paramètres d'entrée;
        //listSR : liste des paramètres a,b&c du modèle SR + e.t bruit normal ou lognormal + type de bruit (1=normal, 2=lognormal) (un vecteur de longueur 5 par espèce modélisée contenant des "doubles")
        //type : type de relation Stock-Recrutement : (liste de longueur "nb d'espèces modélisées" contenant des entiers)
        //                                              1 -> recrutement constant moyen (rec~a)
        //                                              2 -> Hockey stick (rec ~ (si (ssb<=b) a*ssb sinon a*b))
        //                                              3 -> Beverton & Holt (rec ~ a*ssb/(b+ssb))
        //                                              4 -> Ricker (rec ~ a*ssb*exp(-b*ssb))
        //                                              5 -> Shepherd (rec ~ a*ssb/(1+ (ssb/b)^c))
        //                                              6 -> Hockey Stick Quadratic (rec ~ (si (ssb<=b*(1-c)) a*ssb ; si (b*(1-c)<ssb<b*(1+c)) a*(ssb-((ssb-b*(1-c))^2)/(4*b*c)) ; sinon a*b))
        //                                              7 -> Hockey Stick Smooth (rec ~ a*(ssb+sqrt(b^2+g)-sqrt((ssb-b)^2+g)), avec g=0.001 )
{

SEXP ans, rnames=R_NilValue;
double *rans, *paramet, *ssb;
int typeSR, fstAge;

if (ind_t==0) {  //on formatte l'objet en sortie

    PROTECT(rnames = allocVector(STRSXP, nbE));
    setAttrib(out_SRmod, R_NamesSymbol, rnames);

}


for (int e = 0 ; e < nbE ; e++) {

    if (srind[e]==1) {  //activation du module

    if (ind_t==0) { //deuxième étape d'initialisation (niveau espèce)

        PROTECT(ans = NEW_NUMERIC(nbT));
        setAttrib(ans, R_NamesSymbol, times);
        SET_VECTOR_ELT(out_SRmod, e, ans);
        SET_STRING_ELT(rnames, e, STRING_ELT(sppList,e));
    }

    rans = REAL(VECTOR_ELT(out_SRmod, e));
    paramet = REAL(VECTOR_ELT(listSR, e));
    typeSR = INTEGER(VECTOR_ELT(TypeSR, e))[0];
    if (ind_t>0) ssb = REAL(VECTOR_ELT(out_SSB_et, e)); else ssb = &NA_REAL;

    //il nous faut aussi le décalage temporel dû au premier âge modélisé -> un SSB(t) générera un R(t+age0) #correction de R(t+age0+1)
    fstAge = CHAR(STRING_ELT(VECTOR_ELT(namDC, e),0))[0] - '0'; //++fstAge;

    //on en profite pour initialiser l'objet pour les premières années pour lesquelles on devra aller chercher l'info dans Ni0
    if (((typeSR!=1) & (ind_t<fstAge)) | (ind_t==0)) {  //deuxième condition : si t initial et recrutement déduit de la ssb de la même année, on part des paramètres initiaux et non de la relation SR

        rans[ind_t] = NA_REAL;

    } else {

    switch (typeSR) {

        case 1 :

        rans[ind_t] = paramet[0*nbT + ind_t]; break;  //modif MM 27/08/2013 pour donner la possibilité de définir plusieurs paramétrages pour la relation SR au cours de la simu
                                                        //indices : 0 --> 0*nbT + ind_t
        case 2 :

        if (ssb[ind_t-fstAge] <= paramet[1*nbT + ind_t])
            rans[ind_t] = paramet[0*nbT + ind_t] * ssb[ind_t-fstAge];
        else
            rans[ind_t] = paramet[0*nbT + ind_t] * paramet[1*nbT + ind_t]; break;

        case 3 :

        rans[ind_t] = paramet[0*nbT + ind_t] * ssb[ind_t-fstAge] / (paramet[1*nbT + ind_t] + ssb[ind_t-fstAge]); break;

        case 4 :

        rans[ind_t] = paramet[0*nbT + ind_t] * ssb[ind_t-fstAge] * exp(-1.0 * paramet[1*nbT + ind_t] * ssb[ind_t-fstAge]); break;

        case 5 :

        rans[ind_t] = paramet[0*nbT + ind_t] * ssb[ind_t-fstAge] / (1 + pow(ssb[ind_t-fstAge] / paramet[1*nbT + ind_t] , paramet[2*nbT + ind_t])); break;

        case 6 :

        if (ssb[ind_t-fstAge] <= (paramet[1*nbT + ind_t]*(1-paramet[2*nbT + ind_t])))

            rans[ind_t] = paramet[0*nbT + ind_t] * ssb[ind_t-fstAge];

        else {

            if (ssb[ind_t-fstAge] >= (paramet[1*nbT + ind_t]*(1+paramet[2*nbT + ind_t])))

                rans[ind_t] = paramet[0*nbT + ind_t] * paramet[1*nbT + ind_t];

            else

                rans[ind_t] = paramet[0*nbT + ind_t]*(ssb[ind_t-fstAge] - (pow(ssb[ind_t-fstAge] - paramet[1*nbT + ind_t]*(1-paramet[2*nbT + ind_t]),2.0)/(4*paramet[1*nbT + ind_t]*paramet[2*nbT + ind_t])));

            } break;

        case 7 :

        rans[ind_t] = paramet[0*nbT + ind_t] * ( ssb[ind_t-fstAge] + sqrt( pow(paramet[1*nbT + ind_t],2) + 0.001) - sqrt( pow(ssb[ind_t-fstAge] - paramet[1*nbT + ind_t],2) + 0.001)); break;

        default :

        rans[ind_t] = NA_REAL;

    }
    //il ne reste plus qu'à ajouter le bruit blanc issue de N(0,sigma) avec sigma = paramet[3]
    double v_alea = 0.0;
GetRNGstate();
        if (!ISNA(paramet[3*nbT + ind_t])) v_alea = rnorm(0.0,paramet[3*nbT + ind_t]); //////Rprintf("%f ",v_alea);//Rprintf("%f ",rnorm(0.0,0.157));
PutRNGstate();
    if (paramet[4*nbT + ind_t]==1)  //bruit de loi normale

        rans[ind_t] = rans[ind_t] + v_alea;

    else                //bruit de loi lognormale

        rans[ind_t] = rans[ind_t] * exp(v_alea);

    }

      if (ind_t==0) UNPROTECT(1);

    }}

    if (ind_t==0) UNPROTECT(1);

}}

//---------------------------------
//
// Module de simulation aléatoire des prix
//
//---------------------------------





//---------------------------------
//
// Module de gestion des scénarios
//
//---------------------------------



extern "C" {

void BioEcoPar::Scenario(SEXP list, SEXP listScen, int ind_t) //list : liste des paramètres d'entrée ; listScen : liste des multiplicateurs pour un scénario donné
{

//1er niveau de la liste de multiplicateurs : Fleet ou Species --> on cible la partie de "list" correspondante

SEXP mult_lvl_1, target_lvl_1, mult_lvl_2, target_lvl_2=R_NilValue, namVar, namElt, dimMult, dimTarget, fTarg, fMult;

int nbElt = length(listScen);

for (int elt = 0 ; elt < nbElt ; elt++) {

    PROTECT(namElt = STRING_ELT(getAttrib(listScen, R_NamesSymbol), elt));

    PROTECT(mult_lvl_1 = getListElement(listScen, CHAR(namElt))); //Rprintf("%i \n",elt); PrintValue(namElt);

    if (mult_lvl_1 != NULL) {

        PROTECT(target_lvl_1 = getListElement(list, CHAR(namElt)));
        int nbVar = length(mult_lvl_1);

        for (int i = 0 ; i < nbVar ; i++) {

            PROTECT(namVar = STRING_ELT(getAttrib(mult_lvl_1, R_NamesSymbol), i)); //Rprintf("%i \n",i); PrintValue(namVar);
            PROTECT(mult_lvl_2 = getListElement(mult_lvl_1, CHAR(namVar)));

            //ici, selon que la variable considérée est un input ou une variable interne (ex : Foth_i), on agit différemment
int indic = 0;

if (strcmp(CHAR(namVar), "Ffmi_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 100)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 101)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 102)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 103)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 104)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 105)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 106)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 107)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 108)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 109)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 110)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 111)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 112)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 113)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 114)); indic=1;}
if (strcmp(CHAR(namVar), "Ffmi_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 115)); indic=1;}

if (strcmp(CHAR(namVar), "Foth_i_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 116)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 117)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 118)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 119)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 120)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 121)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 122)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 123)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 124)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 125)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 126)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 127)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 128)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 129)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 130)); indic=1;}
if (strcmp(CHAR(namVar), "Foth_i_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 131)); indic=1;}

if (strcmp(CHAR(namVar), "FLWfmi_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 160)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 161)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 162)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 163)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 164)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 165)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 166)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 167)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 168)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 169)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 170)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 171)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 172)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 173)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 174)); indic=1;}
if (strcmp(CHAR(namVar), "FLWfmi_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 175)); indic=1;}

if (strcmp(CHAR(namVar), "FRWToth_i_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 176)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 177)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 178)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 179)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 180)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 181)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 182)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 183)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 184)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 185)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 186)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 187)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 188)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 189)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 190)); indic=1;}
if (strcmp(CHAR(namVar), "FRWToth_i_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 191)); indic=1;}

if (strcmp(CHAR(namVar), "FDWfmi_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 192)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 193)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 194)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 195)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 196)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 197)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 198)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 199)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 200)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 201)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 202)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 203)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 204)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 205)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 206)); indic=1;}
if (strcmp(CHAR(namVar), "FDWfmi_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 207)); indic=1;}

if (strcmp(CHAR(namVar), "FDWToth_i_S1M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 208)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S1M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 209)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S1M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 210)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S1M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 211)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S2M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 212)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S2M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 213)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S2M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 214)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S2M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 215)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S3M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 216)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S3M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 217)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S3M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 218)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S3M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 219)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S4M1") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 220)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S4M2") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 221)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S4M3") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 222)); indic=1;}
if (strcmp(CHAR(namVar), "FDWToth_i_S4M4") == 0) {PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 223)); indic=1;}

            if (strcmp(CHAR(namVar), "Foth_i") == 0) {

                ////Rprintf("%i",IS_NUMERIC(VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 44)));
                PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 44));

            } else {

                if (strcmp(CHAR(namVar), "F_fmi") == 0) {

                        PROTECT(target_lvl_2 = VECTOR_ELT(getListElement(eVar, CHAR(namElt)), 0));

                } else {

                    if (strcmp(CHAR(namVar), "GVLoths_fm") == 0) {

                        PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 1));

                    } else {

                        if (strcmp(CHAR(namVar), "GVLothsref_fm") == 0) {

                            PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 2));

                        } else {

                            if (strcmp(CHAR(namVar), "GVLothsue_fm") == 0) {

                                PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 23));

                            } else {

                                if (strcmp(CHAR(namVar), "GVLothsrefue_fm") == 0) {

                                    PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 24));

                                } else {

                                    if (strcmp(CHAR(namVar), "GVLothsue_f") == 0) {

                                        PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 26));

                                    } else {

                                        if (strcmp(CHAR(namVar), "GVLoths_f") == 0) {

                                            PROTECT(target_lvl_2 = VECTOR_ELT(fVar, 29));

                                        } else {

                                            if (indic==0) PROTECT(target_lvl_2 = getListElement(target_lvl_1, CHAR(namVar)));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

                int *dimM, *dimT;
                int typeSc = 0;

                PROTECT(dimMult = getAttrib(mult_lvl_2, install("DimCst"))); //Rprintf("gg\n");
                if (getAttrib(mult_lvl_2, install("type")) != NULL) typeSc = INTEGER(getAttrib(mult_lvl_2, install("type")))[0];
                //si 'target_lvl_2' est un élément de eVar, s'assurer au préalable de l'existence de l'attribut DimCst
                PROTECT(dimTarget = getAttrib(target_lvl_2, install("DimCst")));

                dimM = INTEGER(dimMult); dimT = INTEGER(dimTarget);//Rprintf("hh");

            //tests sur les dimensions
                if ((dimM[0]>dimT[0]) | (dimM[1]>dimT[1]) | (dimM[2]>dimT[2])) error("Wrong dimensions specification in 'Scenario' !!\n");

                PROTECT(fTarg = iDim(dimT));
                PROTECT(fMult = iDim(dimM));

                int *ftarg = INTEGER(fTarg); //Rprintf("ii");
                int *fmult = INTEGER(fMult); //Rprintf("jj");

                double *target = REAL(target_lvl_2), *mult = REAL(mult_lvl_2);

            //et on applique la mise à jour selon typeSc

            if ((typeSc==0) | (typeSc==1)) {

                for (int ind_f = 0 ; ind_f < imax2(1,dimT[0]) ; ind_f++)
                for (int ind_m = 0 ; ind_m < imax2(1,dimT[1]) ; ind_m++)
                for (int ind_i = 0 ; ind_i < imax2(1,dimT[2]) ; ind_i++) {
                    if (!ISNA(mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]])) {

                        target[ind_f*ftarg[0] + ind_m*ftarg[1] + ind_i*ftarg[2] + ind_t*ftarg[3]] =
                        target[ind_f*ftarg[0] + ind_m*ftarg[1] + ind_i*ftarg[2] + ind_t*ftarg[3]] *
                        mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]];

                    }
                }
            }

           if (typeSc==2) {

                for (int ind_f = 0 ; ind_f < imax2(1,dimT[0]) ; ind_f++)
                for (int ind_m = 0 ; ind_m < imax2(1,dimT[1]) ; ind_m++)
                for (int ind_i = 0 ; ind_i < imax2(1,dimT[2]) ; ind_i++) {
                    if (!ISNA(mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]])) {

                        target[ind_f*ftarg[0] + ind_m*ftarg[1] + ind_i*ftarg[2] + ind_t*ftarg[3]] =
                        target[ind_f*ftarg[0] + ind_m*ftarg[1] + ind_i*ftarg[2] + ind_t*ftarg[3]] +
                        mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]];

                    }
                }
            }

           if (typeSc==3) {

                for (int ind_f = 0 ; ind_f < imax2(1,dimT[0]) ; ind_f++)
                for (int ind_m = 0 ; ind_m < imax2(1,dimT[1]) ; ind_m++)
                for (int ind_i = 0 ; ind_i < imax2(1,dimT[2]) ; ind_i++) {
                    if (!ISNA(mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]])) {

                        target[ind_f*ftarg[0] + ind_m*ftarg[1] + ind_i*ftarg[2] + ind_t*ftarg[3]] =
                        mult[ind_f*fmult[0] + ind_m*fmult[1] + ind_i*fmult[2] + ind_t*fmult[3]];

                    }
                }
            }

           UNPROTECT(7);

        }

        UNPROTECT(1);
    }

    UNPROTECT(2);
}

}}



//---------------------------------
//
//   Module de gestion
//
//---------------------------------



extern "C" {

double BioEcoPar::fxTAC_glob(double mult) //par temps IND_T pour une espèce donnée
{
    SEXP listTemp;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));
////Rprintf("3");
    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m"));////Rprintf("4");
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f"));////Rprintf("5");
    double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));////Rprintf("6");
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));////Rprintf("7");
    double *g_eff2FM2 = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f_m"));
    double *g_eff2F2 = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f"));
    double *mpond_fm = REAL(m_fm);////Rprintf("9");
    double *mpond_oth = REAL(m_oth);////Rprintf("10");

    double result;

//Rprintf("mult %f \n",mult);
//Rprintf("var %i \n",var);
//Rprintf("gestyp %i \n",gestyp);

     for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        double countEff = 0.0;

        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {

            if (var==1) {
                if (gestyp==1) g_nbdsFM[ind_f+nbF*ind_m] = fmax2(g_nbdsFM[ind_f+nbF*ind_m] + mult*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) g_nbdsFM[ind_f+nbF*ind_m] = fmax2(g_nbdsFM[ind_f+nbF*ind_m]*(1 + mult*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (var==2) {
                if (gestyp==1) g_nbvFM[ind_f+nbF*ind_m] = fmax2(g_nbvFM[ind_f+nbF*ind_m] + mult*mpond_fm[ind_f+nbF*ind_m],0.0);
                if (gestyp==2) g_nbvFM[ind_f+nbF*ind_m] = fmax2(g_nbvFM[ind_f+nbF*ind_m]*(1 + mult*mpond_fm[ind_f+nbF*ind_m]),0.0);
            }

            if (!ISNA(g_nbdsFM[ind_f+nbF*ind_m]) & !ISNA(g_nbvFM[ind_f+nbF*ind_m]) & !ISNA(g_eff2FM2[ind_f+nbF*ind_m])) countEff = countEff + g_nbdsFM[ind_f+nbF*ind_m]*g_nbvFM[ind_f+nbF*ind_m]*g_eff2FM2[ind_f+nbF*ind_m];
        }

        if (var==1) g_nbdsF[ind_f] = fmax2(countEff/(g_nbvF[ind_f]*g_eff2F2[ind_f]),0.0);
        if (var==2) g_nbvF[ind_f] = fmax2(countEff/(g_nbdsF[ind_f]*g_eff2F2[ind_f]),0.0);
     }


    //    for (int e = 0 ; e < nbE ; e++){  // e --> eTemp

                if (Qvec[eTemp]==0) {

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

                if (gestyp==1)
                for (int ag = 0; ag < ni; ag++)
                  g_Fothi[ag + IND_T*ni] = fmax2(g_Fothi[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                if (gestyp==2)
                for (int ag = 0; ag < ni; ag++)
                  g_Fothi[ag + IND_T*ni] = fmax2(g_Fothi[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);


                } else {  //espèce SS3


                        double *Fothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 116));
                        double *Fothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 117));
                        double *Fothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 118));
                        double *Fothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 119));
                        double *Fothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 120));
                        double *Fothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 121));
                        double *Fothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 122));
                        double *Fothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 123));
                        double *Fothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 124));
                        double *Fothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 125));
                        double *Fothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 126));
                        double *Fothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 127));
                        double *Fothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 128));
                        double *Fothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 129));
                        double *Fothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 130));
                        double *Fothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 131));

                        double *FRWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 176));
                        double *FRWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 177));
                        double *FRWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 178));
                        double *FRWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 179));
                        double *FRWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 180));
                        double *FRWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 181));
                        double *FRWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 182));
                        double *FRWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 183));
                        double *FRWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 184));
                        double *FRWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 185));
                        double *FRWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 186));
                        double *FRWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 187));
                        double *FRWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 188));
                        double *FRWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 189));
                        double *FRWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 190));
                        double *FRWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 191));

                        double *FDWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 208));
                        double *FDWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 209));
                        double *FDWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 210));
                        double *FDWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 211));
                        double *FDWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 212));
                        double *FDWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 213));
                        double *FDWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 214));
                        double *FDWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 215));
                        double *FDWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 216));
                        double *FDWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 217));
                        double *FDWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 218));
                        double *FDWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 219));
                        double *FDWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 220));
                        double *FDWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 221));
                        double *FDWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 222));
                        double *FDWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 223));

                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

                if (gestyp==1)
                    for (int ag = 0; ag < ni; ag++) {

                            Fothi_S1M1[ag + IND_T*ni] = fmax2(Fothi_S1M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S1M2[ag + IND_T*ni] = fmax2(Fothi_S1M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S1M3[ag + IND_T*ni] = fmax2(Fothi_S1M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S1M4[ag + IND_T*ni] = fmax2(Fothi_S1M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S2M1[ag + IND_T*ni] = fmax2(Fothi_S2M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S2M2[ag + IND_T*ni] = fmax2(Fothi_S2M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S2M3[ag + IND_T*ni] = fmax2(Fothi_S2M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S2M4[ag + IND_T*ni] = fmax2(Fothi_S2M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S3M1[ag + IND_T*ni] = fmax2(Fothi_S3M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S3M2[ag + IND_T*ni] = fmax2(Fothi_S3M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S3M3[ag + IND_T*ni] = fmax2(Fothi_S3M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S3M4[ag + IND_T*ni] = fmax2(Fothi_S3M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S4M1[ag + IND_T*ni] = fmax2(Fothi_S4M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S4M2[ag + IND_T*ni] = fmax2(Fothi_S4M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S4M3[ag + IND_T*ni] = fmax2(Fothi_S4M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            Fothi_S4M4[ag + IND_T*ni] = fmax2(Fothi_S4M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);

                            FRWTothi_S1M1[ag + IND_T*ni] = fmax2(FRWTothi_S1M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S1M2[ag + IND_T*ni] = fmax2(FRWTothi_S1M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S1M3[ag + IND_T*ni] = fmax2(FRWTothi_S1M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S1M4[ag + IND_T*ni] = fmax2(FRWTothi_S1M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S2M1[ag + IND_T*ni] = fmax2(FRWTothi_S2M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S2M2[ag + IND_T*ni] = fmax2(FRWTothi_S2M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S2M3[ag + IND_T*ni] = fmax2(FRWTothi_S2M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S2M4[ag + IND_T*ni] = fmax2(FRWTothi_S2M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S3M1[ag + IND_T*ni] = fmax2(FRWTothi_S3M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S3M2[ag + IND_T*ni] = fmax2(FRWTothi_S3M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S3M3[ag + IND_T*ni] = fmax2(FRWTothi_S3M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S3M4[ag + IND_T*ni] = fmax2(FRWTothi_S3M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S4M1[ag + IND_T*ni] = fmax2(FRWTothi_S4M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S4M2[ag + IND_T*ni] = fmax2(FRWTothi_S4M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S4M3[ag + IND_T*ni] = fmax2(FRWTothi_S4M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FRWTothi_S4M4[ag + IND_T*ni] = fmax2(FRWTothi_S4M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);

                            FDWTothi_S1M1[ag + IND_T*ni] = fmax2(FDWTothi_S1M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S1M2[ag + IND_T*ni] = fmax2(FDWTothi_S1M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S1M3[ag + IND_T*ni] = fmax2(FDWTothi_S1M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S1M4[ag + IND_T*ni] = fmax2(FDWTothi_S1M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S2M1[ag + IND_T*ni] = fmax2(FDWTothi_S2M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S2M2[ag + IND_T*ni] = fmax2(FDWTothi_S2M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S2M3[ag + IND_T*ni] = fmax2(FDWTothi_S2M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S2M4[ag + IND_T*ni] = fmax2(FDWTothi_S2M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S3M1[ag + IND_T*ni] = fmax2(FDWTothi_S3M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S3M2[ag + IND_T*ni] = fmax2(FDWTothi_S3M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S3M3[ag + IND_T*ni] = fmax2(FDWTothi_S3M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S3M4[ag + IND_T*ni] = fmax2(FDWTothi_S3M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S4M1[ag + IND_T*ni] = fmax2(FDWTothi_S4M1[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S4M2[ag + IND_T*ni] = fmax2(FDWTothi_S4M2[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S4M3[ag + IND_T*ni] = fmax2(FDWTothi_S4M3[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);
                            FDWTothi_S4M4[ag + IND_T*ni] = fmax2(FDWTothi_S4M4[ag + IND_T*ni] + mult*mpond_oth[eTemp],0.0);

                    }

                if (gestyp==2)
                    for (int ag = 0; ag < ni; ag++) {

                            Fothi_S1M1[ag + IND_T*ni] = fmax2(Fothi_S1M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S1M2[ag + IND_T*ni] = fmax2(Fothi_S1M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S1M3[ag + IND_T*ni] = fmax2(Fothi_S1M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S1M4[ag + IND_T*ni] = fmax2(Fothi_S1M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S2M1[ag + IND_T*ni] = fmax2(Fothi_S2M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S2M2[ag + IND_T*ni] = fmax2(Fothi_S2M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S2M3[ag + IND_T*ni] = fmax2(Fothi_S2M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S2M4[ag + IND_T*ni] = fmax2(Fothi_S2M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S3M1[ag + IND_T*ni] = fmax2(Fothi_S3M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S3M2[ag + IND_T*ni] = fmax2(Fothi_S3M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S3M3[ag + IND_T*ni] = fmax2(Fothi_S3M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S3M4[ag + IND_T*ni] = fmax2(Fothi_S3M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S4M1[ag + IND_T*ni] = fmax2(Fothi_S4M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S4M2[ag + IND_T*ni] = fmax2(Fothi_S4M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S4M3[ag + IND_T*ni] = fmax2(Fothi_S4M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            Fothi_S4M4[ag + IND_T*ni] = fmax2(Fothi_S4M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);

                            FRWTothi_S1M1[ag + IND_T*ni] = fmax2(FRWTothi_S1M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S1M2[ag + IND_T*ni] = fmax2(FRWTothi_S1M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S1M3[ag + IND_T*ni] = fmax2(FRWTothi_S1M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S1M4[ag + IND_T*ni] = fmax2(FRWTothi_S1M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S2M1[ag + IND_T*ni] = fmax2(FRWTothi_S2M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S2M2[ag + IND_T*ni] = fmax2(FRWTothi_S2M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S2M3[ag + IND_T*ni] = fmax2(FRWTothi_S2M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S2M4[ag + IND_T*ni] = fmax2(FRWTothi_S2M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S3M1[ag + IND_T*ni] = fmax2(FRWTothi_S3M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S3M2[ag + IND_T*ni] = fmax2(FRWTothi_S3M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S3M3[ag + IND_T*ni] = fmax2(FRWTothi_S3M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S3M4[ag + IND_T*ni] = fmax2(FRWTothi_S3M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S4M1[ag + IND_T*ni] = fmax2(FRWTothi_S4M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S4M2[ag + IND_T*ni] = fmax2(FRWTothi_S4M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S4M3[ag + IND_T*ni] = fmax2(FRWTothi_S4M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FRWTothi_S4M4[ag + IND_T*ni] = fmax2(FRWTothi_S4M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);

                            FDWTothi_S1M1[ag + IND_T*ni] = fmax2(FDWTothi_S1M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S1M2[ag + IND_T*ni] = fmax2(FDWTothi_S1M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S1M3[ag + IND_T*ni] = fmax2(FDWTothi_S1M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S1M4[ag + IND_T*ni] = fmax2(FDWTothi_S1M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S2M1[ag + IND_T*ni] = fmax2(FDWTothi_S2M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S2M2[ag + IND_T*ni] = fmax2(FDWTothi_S2M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S2M3[ag + IND_T*ni] = fmax2(FDWTothi_S2M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S2M4[ag + IND_T*ni] = fmax2(FDWTothi_S2M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S3M1[ag + IND_T*ni] = fmax2(FDWTothi_S3M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S3M2[ag + IND_T*ni] = fmax2(FDWTothi_S3M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S3M3[ag + IND_T*ni] = fmax2(FDWTothi_S3M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S3M4[ag + IND_T*ni] = fmax2(FDWTothi_S3M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S4M1[ag + IND_T*ni] = fmax2(FDWTothi_S4M1[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S4M2[ag + IND_T*ni] = fmax2(FDWTothi_S4M2[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S4M3[ag + IND_T*ni] = fmax2(FDWTothi_S4M3[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                            FDWTothi_S4M4[ag + IND_T*ni] = fmax2(FDWTothi_S4M4[ag + IND_T*ni]*(1+mult*mpond_oth[eTemp]),0.0);
                    }

                }


        // }




if ((trgt==1) | (trgt==3) | (trgt==999)) {//on vise un TAC ou une biomasse

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);
////PrintValue(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
////PrintValue(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
//Rprintf("16");
    double *tot ;
    if (trgt==999) {
     Mortalite(listTemp, IND_T+1, eVarCopy);
     DynamicPop(listTemp, IND_T+1, eVarCopy,true);  //à revoir !!!!!!!!!!!!!!!!
     tot = REAL(VECTOR_ELT(out_B_et, eTemp));
     result = TAC_glob[IND_T+1]-tot[IND_T+1]; //Rprintf("%f %f %f %f\n",mult,TAC_glob[IND_T+1],tot[IND_T+1],result);
    } else {
     SEXP nDim = allocVector(INTSXP,4);
     int *nd = INTEGER(nDim); for (int i = 0; i<3; i++) nd[i] = 0; nd[3] = nbT;
     tot = REAL(aggregObj(VECTOR_ELT(out_L_eit, eTemp),nDim));
     result = TAC_glob[IND_T]-tot[IND_T]; //Rprintf("%f %f %f %f\n",mult,TAC_glob[IND_T],tot[IND_T],result);
    }
//Rprintf("fxtac : TAC_glob %f TOT %f\n",TAC_glob[IND_T],tot[IND_T]);

} else { //on vise un Fbar

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);

    double *tot = REAL(VECTOR_ELT(out_Fbar_et, eTemp));
    result = Fbar_trgt[IND_T]-tot[IND_T]; //à interchanger avec la ligne du dessous pour une limitation plus restrictive selon SSB
    if ((Blim_trigger!=0) & !ISNA(Blim_CPP)) {
        result = Fbar_trgt[IND_T]*fmin2(REAL(VECTOR_ELT(out_SSB_et, eTemp))[IND_T]/Blim_CPP , 1.0) - tot[IND_T];
    } else {
        result = Fbar_trgt[IND_T] - tot[IND_T];
    }
    //Rprintf("%f %f %f %f\n",mult,Fbar_trgt[IND_T],tot[IND_T],result);
    //Rprintf("fxtac : FBARtarget %f TOT %f\n",Fbar_trgt[IND_T],tot[IND_T]);

}

    UNPROTECT(2);

    return result;

}
}



//------------------------------------------
// Module de gestion : ajustement des variables d'effort (nbds (paramètre "var" = 1) ou nbv (paramètre "var" = 2))
// avec objectif d'atteinte du TAC (paramètre "trgt = 1") OU du Fbar (paramètre "trgt = 2")
// Un 3ème paramètre "delay" spécifie le délai de première applicaton de l'ajustement (valeur par défaut et minimale = 1).
// Enfin, un 4ème paramètre "upd" (update) permet de spécifier si le multiplicateur s'applique à la donnée initiale à chaque pas de temps ("upd" = 1),
// ou si elle s'applique à la donnée à l'instant précédent ("upd" = 2).
//------------------------------------------



extern "C" {

void BioEcoPar::Gestion(SEXP list, int ind_t) //paramètres en entrée pas forcément utiles dans la mesure où ils doivent rester constant tout au long de la simulation
{                                               //ajout de trgt = 22 pour considérer un ajustement inférieur à Fmsy, ie Fmsy*SSB/MSYBtrigger
                                                //ajout de trgt = 4 la biomasse limite supérieure (~Bmax) ?? : inactif pour le moment
//on teste la validité des paramètres d'entrée

    if ((var!=1) & (var!=2)) error("Wrong 'var' parameter in 'Gestion' module!!\n");
    if ((trgt!=1) & (trgt!=2) & (trgt!=3) & (trgt!=22) & (trgt!=999)) error("Wrong 'trgt' parameter in 'Gestion' module!!\n");
    if ((delay<1) | (delay>nbT)) error("Wrong 'delay' parameter in 'Gestion' module!!\n");
    if ((upd!=1) & (upd!=2)) error("Wrong 'upd' parameter in 'Gestion' module!!\n");

    if ((ind_t<delay) | ((trgt==999) & (ind_t==nbT-1))) {

    } else {

    IND_T = ind_t;//Rprintf("t %i",IND_T);
    double *mu_;//Rprintf("1");
    if (var==1) mu_ = REAL(mu_nbds); else mu_ = REAL(mu_nbv);

    int NBMAX=1;
	int nb=NBMAX;
	float tol;
	int NbInter = 10;

    BEfn1 p = &BioEcoPar::fxTAC_glob;

    double *xb1,*xb2;
    xb1 = new double[NBMAX+1];
    xb2 = new double[NBMAX+1];
//Rprintf("2");
    zbrak(p,X1,X2,NbInter,xb1,xb2,&nb);
    for (int i=1;i<=nb;i++) {
        tol=(1.0e-6)*(xb1[i]+xb2[i])/2.0;
        double result=zbrent(p,xb1[i],xb2[i],tol);
        //Rprintf("result : %f",result);//Rprintf("t %i",IND_T);
        mu_[IND_T] = result;
    }
    delete xb1;
    delete xb2;

   }

}}







// Numerical Recipes //----------------------------------------------------------------------------------------

// --------  détermination racine (unidimensionnel)

void BioEcoPar::zbrak(BEfn1 fx, double x1, double x2, int n, double xb1[],
	double xb2[], int *nb)
{
	int nbb,i;
	double x,fp,fc,dx;

	nbb=0;
	dx=(x2-x1)/n;
	fp=(this->*fx)(x=x1);
	for (i=1;i<=n;i++) {
		fc=(this->*fx)(x += dx);
		if (fc*fp <= 0.0) {
			xb1[++nbb]=x-dx;
			xb2[nbb]=x;
			if(*nb == nbb) return;

		}
		fp=fc;
	}
	*nb = nbb;
}
/* (C) Copr. 1986-92 Numerical Recipes Software *pA24. */


#define ITMAX 100
#define EPS 3.0e-6
#define SIGN(a,b) ((b) >= 0.0 ? fabs(a) : -fabs(a))

double  BioEcoPar::zbrent(BEfn1 fx, double x1, double x2, double tol)
{
	int iter;
	double a=x1,b=x2,c=x2,d=0.0,e=0.0,min1,min2;
	double fa=(this->*fx)(a),fb=(this->*fx)(b),fc,p,q,r,s,tol1,xm;

	fc=fb;
	for (iter=1;iter<=ITMAX;iter++) {
		if (((fb > 0.0) && (fc > 0.0)) || ((fb < 0.0) && (fc < 0.0))) {
			c=a;
			fc=fa;
			e=d=b-a;
		}
		if (fabs(fc) < fabs(fb)) {
			a=b;
			b=c;
			c=a;
			fa=fb;
			fb=fc;
			fc=fa;
		}
		tol1=2.0*EPS*fabs(b)+0.5*tol;
		xm=0.5*(c-b);
		if ((fabs(xm) <= tol1) || (fb == 0.0)) return b;
		if ((fabs(e) >= tol1) && (fabs(fa) > fabs(fb))) {
			s=fb/fa;
			if (a == c) {
				p=2.0*xm*s;
				q=1.0-s;
			} else {
				q=fa/fc;
				r=fb/fc;
				p=s*(2.0*xm*q*(q-r)-(b-a)*(r-1.0));
				q=(q-1.0)*(r-1.0)*(s-1.0);
			}
			if (p > 0.0) q = -q;
			p=fabs(p);
			min1=3.0*xm*q-fabs(tol1*q);
			min2=fabs(e*q);
			if (2.0*p < (min1 < min2 ? min1 : min2)) {
				e=d;
				d=p/q;
			} else {
				d=xm;
				e=d;
			}
		} else {
			d=xm;
			e=d;
		}
		a=b;
		fa=fb;
		if (fabs(d) > tol1)
			b += d;
		else
			b += SIGN(tol1,xm);
		fb=(this->*fx)(b);
	}
//Rprintf("Maximum number of iterations exceeded in zbrent \n");
	return b;//0.0;  //modif 17/05/2013
}

#undef ITMAX
#undef EPS
#undef SIGN

// --------  simplex multi-dimensionnel

//int MinimizeF(void);
//float func(float x[]);
//float *NRvector(long nl, long nh);
//float **NRmatrix(long nrl, long nrh, long ncl, long nch);
//void free_vector(float *v, long nl, long nh);
//void free_matrix(float **m, long nrl, long nrh, long ncl, long nch);
//void amoeba(float **p, float y[], int ndim, float ftol, float (*funk)(float []), int *nfunk);

#define NR_END 1
#define FREE_ARG char*


double *BioEcoPar::NRvector(long nl, long nh)
/* allocate a double vector with subscript range v[nl..nh] */
{
	double *v;

	v=(double *)malloc((size_t) ((nh-nl+1+NR_END)*sizeof(double)));
	if (!v) Rprintf("allocation failure in dvector()");
	return v-nl+NR_END;
}

double **BioEcoPar::NRmatrix(long nrl, long nrh, long ncl, long nch)
/* allocate a double matrix with subscript range m[nrl..nrh][ncl..nch] */
{
	long i, nrow=nrh-nrl+1,ncol=nch-ncl+1;
	double **m;

	/* allocate pointers to rows */
	m=(double **) malloc((size_t)((nrow+NR_END)*sizeof(double*)));
	if (!m) //Rprintf("allocation failure 1 in matrix()");
	m += NR_END;
	m -= nrl;

	/* allocate rows and set pointers to them */
	m[nrl]=(double *) malloc((size_t)((nrow*ncol+NR_END)*sizeof(double)));
	if (!m[nrl]) //Rprintf("allocation failure 2 in matrix()");
	m[nrl] += NR_END;
	m[nrl] -= ncl;

	for(i=nrl+1;i<=nrh;i++) m[i]=m[i-1]+ncol;

	/* return pointer to array of pointers to rows */
	return m;
}


void BioEcoPar::free_vector(double *v, long nl, long nh)
/* free a double vector allocated with dvector() */
{
	free((FREE_ARG) (v+nl-NR_END));
}

void BioEcoPar::free_matrix(double **m, long nrl, long nrh, long ncl, long nch)
/* free a double matrix allocated by dmatrix() */
{
	free((FREE_ARG) (m[nrl]+ncl-NR_END));
	free((FREE_ARG) (m+nrl-NR_END));
}


#define TINY 0.001
#define NMAX 10000
#define GET_PSUM \
                    for (j=1;j<=ndim;j++) {\
                    for (sum=0.0,i=1;i<=mpts;i++) sum += p[i][j];\
                    psum[j]=sum;}
#define SWAP(a,b) {swap=(a);(a)=(b);(b)=swap;}



void BioEcoPar::amoeba(BEfn1_F funk, double **p, double y[], int ndim, double ftol, int *nfunk) {

    //float amotry(float **p, float y[], float psum[], int ndim, float (*funk)(float []), int ihi, float fac);
    int i,ihi,ilo,inhi,j,mpts=ndim+1;
    double rtol,sum,swap,ysave,ytry,*psum;

    psum=NRvector(1,ndim);
    *nfunk=0;
    GET_PSUM
    for (;;) {
        ilo=1;
        ihi = y[1]>y[2] ? (inhi=2,1) : (inhi=1,2);
        for (i=1;i<=mpts;i++) {
            if (y[i] <= y[ilo]) ilo=i;
            if (y[i] > y[ihi]) {
                inhi=ihi;
                ihi=i;
            } else if ((y[i] > y[inhi]) && (i != ihi)) inhi=i;
        }
        rtol=2.0*fabs(y[ihi]-y[ilo])/(fabs(y[ihi])+fabs(y[ilo])+TINY);//Rprintf("ihi = %i ilo = %i rtol = %f\n",ihi,ilo,rtol);
        //Rprintf("rtol %f \n",rtol);
        if (rtol < ftol) {
            SWAP(y[1],y[ilo])
            for (i=1;i<=ndim;i++) SWAP(p[1][i],p[ilo][i])
            break;
        }
        if (*nfunk >= NMAX) //Rprintf("NMAX exceeded : rtol = %f\n",rtol); //break;}//'//Rprintf' remplace 'nrerror'
        *nfunk += 2;

        //BEfn1_F FUNK = &BioEcoPar::fxTAC_glob;

        ytry=amotry(funk,p,y,psum,ndim,ihi,-1.0);
        if (ytry <= y[ilo]) {
            ytry=amotry(funk,p,y,psum,ndim,ihi,2.0);
        } else if (ytry >= y[inhi]) {
                ysave=y[ihi];
                ytry=amotry(funk,p,y,psum,ndim,ihi,0.5);
                if (ytry >= ysave) {
                    for (i=1;i<=mpts;i++) {
                        if (i != ilo) {
                            for (j=1;j<=ndim;j++)
                                p[i][j]=psum[j]=0.5*(p[i][j]+p[ilo][j]);
                            y[i]=(this->*funk)(psum);
                        }
                    }
                    *nfunk += ndim;
                    GET_PSUM
                }
               } else --(*nfunk);
    }
    free_vector(psum,1,ndim);
}


double BioEcoPar::amotry(BEfn1_F funk, double **p, double y[], double psum[], int ndim, int ihi, double fac) {
    int j;
    double fac1,fac2,ytry,*ptry;
    ptry=NRvector(1,ndim);
    fac1=(1.0-fac)/ndim;
    fac2=fac1-fac;
    for (j=1;j<=ndim;j++) ptry[j]=psum[j]*fac1-p[ihi][j]*fac2;
    ytry=(this->*funk)(ptry);
    if (ytry < y[ihi]) {
        y[ihi]=ytry;
        for (j=1;j<=ndim;j++) {
            psum[j] += ptry[j]-p[ihi][j];
            p[ihi][j]=ptry[j];
        }
    }
    free_vector(ptry,1,ndim);
    return ytry;
}


#define MP 4
#define NP 3
#define FTOL 0.0000001

extern "C" {

double BioEcoPar::func(double *x)
{
	return ((x[1]-23.14)*(x[1]-23.14) + (x[2]-0.256)*(x[2]-0.256) + (x[3]+17.45)*(x[3]+17.45));
}

}




//------------------------------

extern "C" {

int BioEcoPar::QuotaExchV2(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
{
//Rprintf("BBBBB");
//PrintValue(TACbyF);

    if (ind_t<delay) {

    } else {

    IND_T = ind_t;

     //Rprintf("BBBB01 351 %f indt %i IND_T %i",TAC_byFleet[351 + nbF*IND_T],ind_t,IND_T);
     //Rprintf("BBBB01 352 %f indt %i IND_T %i",TAC_byFleet[352 + nbF*IND_T],ind_t,IND_T);
     //Rprintf("BBBB01 353 %f indt %i IND_T %i",TAC_byFleet[353 + nbF*IND_T],ind_t,IND_T);
     //Rprintf("BBBB01 354 %f indt %i IND_T %i",TAC_byFleet[354 + nbF*IND_T],ind_t,IND_T);


    PxQ = pxQuIni;
    spQ = spp;

    int nfunc;
	int ITquotaExch = 20;
	int ITTOT = 7;

    //Rprintf("TIME %i \n",IND_T);

    double **q = NRmatrix(1,2,1,1);
    double *multF = NRvector(1,nbF+1);
    double *z = NRvector(1,2);
    double *x = NRvector(1,1);
    double *g_effSup = REAL(effSupMat);//02/08/16

    bool GoOn = true;

	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT_customCstV2; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)
	BEfn1_F foo3 = &BioEcoPar::fxTAC_F_customCst2;

    double DIFF = 0.0;
    int IT = 0;

    while (GoOn) {

        for (int IT2 = 0 ; IT2 < ITTOT ; IT2++){

        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
    //Rprintf("IT %i \n",IT);

        for (int ind_f = 0 ; ind_f <= nbF ; ind_f++){

        //Rprintf("T %i F %i \n",ind_t,ind_f);

        IND_F = ind_f;

        if (ind_f==nbF) { //optimisation de Foth --> x multiplicateur

            q[1][1]=x[1]=0.85;
            z[1]=(this->*foo3)(x);
            q[2][1]=x[1]=1;
            z[2]=(this->*foo3)(x);

        amoeba(foo3, q,z,1,ftol,&nfunc);

        multF[ind_f+1] = q[2][1];

        } else {

        x[1]=1.0;
        z[1]=(this->*foo2)(x);//Rprintf("z1 %f \n",z[1]);
        x[1]=350.0;
        z[2]=(this->*foo2)(x);//Rprintf("z2 %f \n",z[2]);

        if (z[1]>z[2]) multF[ind_f+1] = 350.0; else multF[ind_f+1] = 0.0;

        //if (IT==0)  //Rprintf("Mult %f \n",multF[ind_f+1]);

        }
        }

                //2ème étape : redéfinition de Ztemp

        SEXP listTemp;

        PROTECT(listTemp = duplicate(list));
        PROTECT(eVarCopy = duplicate(eVar));

        //double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
        //double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

        double *g_effort1FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m"));
        double *g_effort1F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f"));
        double *g_nbTripFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f_m"));
        double *g_nbTripF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f"));
        double *g_effort2FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f_m")); //02/08/2016
        double *g_effort2F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f"));    //02/08/2016
        double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));         //02/08/2016
        double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));            //02/08/2016

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){


        //if (var==1) g_effort1FM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),fmin2(effort1Ini[ind_f]*expEff,350.0)-g_effort1FM[ind_f+nbF*1]); //02/08/2016
        if (var==1) g_effort1FM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),
                                                        (350.0*g_effort2F[ind_f]*g_nbvF[ind_f]-g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/
                                                              (g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0]));                                    //02/08/2016
        if (!ISNA(g_effSup[ind_f+nbF*IND_T]) &
             (g_effSup[ind_f+nbF*IND_T] < (g_effort1FM[ind_f+nbF*0]*g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0] +
                                             g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/(g_effort2F[ind_f]*g_nbvF[ind_f]))) {

         if (var==1) g_effort1FM[ind_f+nbF*0] =  (g_effSup[ind_f+nbF*IND_T]*g_effort2F[ind_f]*g_nbvF[ind_f] - g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/
                            (g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0]);
        }


        if (var==1) g_effort1F[ind_f] = (g_effort1FM[ind_f+nbF*0]*g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0] +
                                          g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/(g_effort2F[ind_f]*g_nbvF[ind_f]);
        if (var==1) {g_nbTripFM[ind_f+nbF*0] = g_effort1FM[ind_f+nbF*0] ; g_nbTripF[ind_f] = g_effort1F[ind_f];}


        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

        }

        int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,spQ))), "modI"));

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        for (int i = 0 ; i < NBI ; i++) {

            //Rprintf("diffZZ %f ", REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);
            Ztemp[i+1] = Ztemp[i+1] + lambda*(REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);

        }

        //... et on recommence jusqu'à convergence de Z vers la valeur coïncidant avec les mortalités marginales

        UNPROTECT(2);

        }

        //3ème étape : redéfinition de PxQ

    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    //double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    //double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    double *g_effort1FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m"));
    double *g_effort1F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f"));
    double *g_nbTripFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f_m"));
    double *g_nbTripF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f"));
        double *g_effort2FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f_m")); //02/08/2016
        double *g_effort2F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f"));    //02/08/2016
        double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));         //02/08/2016
        double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));            //02/08/2016



    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

//        //if (var==1) g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),fmin2(effortIni[ind_f]*expEff,350.0)-g_nbdsFM[ind_f+nbF*1]);
//        //if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];
//        if (var==1) g_effort1FM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),fmin2(effort1Ini[ind_f]*expEff,350.0)-g_effort1FM[ind_f+nbF*1]);
//        if (var==1) g_effort1F[ind_f] = g_effort1FM[ind_f+nbF*0] + g_effort1FM[ind_f+nbF*1];
//        if (var==1) {g_nbTripFM[ind_f+nbF*0] = g_effort1FM[ind_f+nbF*0] ; g_nbTripF[ind_f] = g_effort1F[ind_f];}

        if (var==1) g_effort1FM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),
                                                        (350.0*g_effort2F[ind_f]*g_nbvF[ind_f]-g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/
                                                              (g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0]));                                    //02/08/2016
        if (!ISNA(g_effSup[ind_f+nbF*IND_T]) &
             (g_effSup[ind_f+nbF*IND_T] < (g_effort1FM[ind_f+nbF*0]*g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0] +
                                             g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/(g_effort2F[ind_f]*g_nbvF[ind_f]))) {

         if (var==1) g_effort1FM[ind_f+nbF*0] =  (g_effSup[ind_f+nbF*IND_T]*g_effort2F[ind_f]*g_nbvF[ind_f] - g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/
                            (g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0]);
        }


        if (var==1) g_effort1F[ind_f] = (g_effort1FM[ind_f+nbF*0]*g_effort2FM[ind_f+nbF*0]*g_nbvFM[ind_f+nbF*0] +
                                          g_effort1FM[ind_f+nbF*1]*g_effort2FM[ind_f+nbF*1]*g_nbvFM[ind_f+nbF*1])/(g_effort2F[ind_f]*g_nbvF[ind_f]);
        if (var==1) {g_nbTripFM[ind_f+nbF*0] = g_effort1FM[ind_f+nbF*0] ; g_nbTripF[ind_f] = g_effort1F[ind_f];}


           if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }


    }

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        PROTECT(nDimF = allocVector(INTSXP,4));
        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

            //calcul de diffLQ
        double diffLQ = 0.0;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + nbF*IND_T]); //TAC_byFleet[ind_f + (nbF+1)*IND_T]);

        }

        if ((DIFF*diffLQ)<0) lambda = lambda/3; //ie si DIFF et diffLQ de signe différent

        if ((IT>50) | ((diffLQ<=0) & (((diffLQ*lambda)*(diffLQ*lambda)<0.25) | (IT>ITquotaExch)))) GoOn = false; //on ne s'arrête que si diffLQ<=0 (Quota respecté) (sauf si IT>50)

        IT++;

        DIFF = diffLQ;

//        //Rprintf("\n");
        //Rprintf("diffLQ %f \n",diffLQ);
//
        //Rprintf("PxQ_1 %f ",PxQ);

        if (diffLQ<0) {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmin2(lambda*diffLQ,-0.1),pxQuMax));
        } else {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmax2(lambda*diffLQ,0.1),pxQuMax));
        }

        //Rprintf("PxQ_2 %f \n",PxQ);
        //Rprintf("lambda %f \n",lambda);
        //... et on recommence

        UNPROTECT(3);

    }


    double *pxQuot = REAL(VECTOR_ELT(out_PQuot_et,spQ));
    pxQuot[ind_t] = PxQ;

	//double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
    //double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));

    double *effort1FM_G = REAL(getListElement(FList, "effort1_f_m"));
    double *effort1F_G = REAL(getListElement(FList, "effort1_f"));
    double *nbTripFM_G = REAL(getListElement(FList, "nbTrip_f_m"));
    double *nbTripF_G = REAL(getListElement(FList, "nbTrip_f"));
        double *effort2FM_G = REAL(getListElement(FList, "effort2_f_m")); //02/08/2016
        double *effort2F_G = REAL(getListElement(FList, "effort2_f"));    //02/08/2016
        double *nbvFM_G = REAL(getListElement(FList, "nbv_f_m"));         //02/08/2016
        double *nbvF_G = REAL(getListElement(FList, "nbv_f"));            //02/08/2016


    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

//        //if (var==1) nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),fmin2(effortIni[ind_f]*expEff,350.0)-nbdsFM_G[ind_f+nbF*1]);
//        //if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];
//        if (var==1) effort1FM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),fmin2(effort1Ini[ind_f]*expEff,350.0)-effort1FM_G[ind_f+nbF*1]);
//        if (var==1) effort1F_G[ind_f] = effort1FM_G[ind_f+nbF*0] + effort1FM_G[ind_f+nbF*1];
//        if (var==1) {nbTripFM_G[ind_f+nbF*0] = effort1FM_G[ind_f+nbF*0] ; nbTripF_G[ind_f] = effort1F_G[ind_f];}

        if (var==1) effort1FM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),
                                                        (350.0*effort2F_G[ind_f]*nbvF_G[ind_f]-effort1FM_G[ind_f+nbF*1]*effort2FM_G[ind_f+nbF*1]*nbvFM_G[ind_f+nbF*1])/
                                                              (effort2FM_G[ind_f+nbF*0]*nbvFM_G[ind_f+nbF*0]));                                    //02/08/2016
        if (!ISNA(g_effSup[ind_f+nbF*IND_T]) &
             (g_effSup[ind_f+nbF*IND_T] < (effort1FM_G[ind_f+nbF*0]*effort2FM_G[ind_f+nbF*0]*nbvFM_G[ind_f+nbF*0] +
                                             effort1FM_G[ind_f+nbF*1]*effort2FM_G[ind_f+nbF*1]*nbvFM_G[ind_f+nbF*1])/(effort2F_G[ind_f]*nbvF_G[ind_f]))) {

         if (var==1) effort1FM_G[ind_f+nbF*0] =  (g_effSup[ind_f+nbF*IND_T]*effort2F_G[ind_f]*nbvF_G[ind_f] - effort1FM_G[ind_f+nbF*1]*effort2FM_G[ind_f+nbF*1]*nbvFM_G[ind_f+nbF*1])/
                            (effort2FM_G[ind_f+nbF*0]*nbvFM_G[ind_f+nbF*0]);
        }


        if (var==1) effort1F_G[ind_f] = (effort1FM_G[ind_f+nbF*0]*effort2FM_G[ind_f+nbF*0]*nbvFM_G[ind_f+nbF*0] +
                                          effort1FM_G[ind_f+nbF*1]*effort2FM_G[ind_f+nbF*1]*nbvFM_G[ind_f+nbF*1])/(effort2F_G[ind_f]*nbvF_G[ind_f]);
        if (var==1) {nbTripFM_G[ind_f+nbF*0] = effort1FM_G[ind_f+nbF*0] ; nbTripF_G[ind_f] = effort1F_G[ind_f];}


        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

    }

    free_matrix(q,1,2,1,1);
    free_vector(multF,1,nbF+1);
    free_vector(z,1,2);
    free_vector(x,1,1);

    }

	return 0;
}

}

extern "C" {

double BioEcoPar::fxMaxProf_FT_customCstV2(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    //double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    //double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_effort1FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m"));
    double *g_effort1F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f"));
    double *g_nbTripFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f_m"));
    double *g_nbTripF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));
        double *g_effort2FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f_m")); //02/08/2016
        double *g_effort2F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort2_f"));    //02/08/2016
        double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));         //02/08/2016
        //double *g_effSup = REAL(effSupMat);//02/08/16

    double *gcfF;

    //for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

//        if (var==1) g_effort1FM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),fmin2(effort1Ini[IND_F]*expEff,350.0)-g_effort1FM[IND_F+nbF*1]);
//        if (var==1) g_nbTripFM[IND_F+nbF*0] = g_effort1FM[IND_F+nbF*0];
//        if (var==1) g_effort1F[IND_F] = g_effort1FM[IND_F+nbF*0] + g_effort1FM[IND_F+nbF*1];
//        if (var==1) g_nbTripF[IND_F] = g_effort1F[IND_F];



       if (var==1) g_effort1FM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),
                                                        (350.0*g_effort2F[IND_F]*g_nbvF[IND_F]-g_effort1FM[IND_F+nbF*1]*g_effort2FM[IND_F+nbF*1]*g_nbvFM[IND_F+nbF*1])/
                                                              (g_effort2FM[IND_F+nbF*0]*g_nbvFM[IND_F+nbF*0]));                                    //02/08/2016
//        if (!ISNA(g_effSup[IND_F+nbF*IND_T]) &
//             (g_effSup[IND_F+nbF*IND_T] < (g_effort1FM[IND_F+nbF*0]*g_effort2FM[IND_F+nbF*0]*g_nbvFM[IND_F+nbF*0] +
//                                             g_effort1FM[IND_F+nbF*1]*g_effort2FM[IND_F+nbF*1]*g_nbvFM[IND_F+nbF*1])/(g_effort2F[IND_F]*g_nbvF[IND_F]))) {
//
//         if (var==1) g_effort1FM[IND_F+nbF*0] =  (g_effSup[IND_F+nbF*IND_T]*g_effort2F[IND_F]*g_nbvF[IND_F] - g_effort1FM[IND_F+nbF*1]*g_effort2FM[IND_F+nbF*1]*g_nbvFM[IND_F+nbF*1])/
//                            (g_effort2FM[IND_F+nbF*0]*g_nbvFM[IND_F+nbF*0]);
//        }


        if (var==1) g_effort1F[IND_F] = (g_effort1FM[IND_F+nbF*0]*g_effort2FM[IND_F+nbF*0]*g_nbvFM[IND_F+nbF*0] +
                                          g_effort1FM[IND_F+nbF*1]*g_effort2FM[IND_F+nbF*1]*g_nbvFM[IND_F+nbF*1])/(g_effort2F[IND_F]*g_nbvF[IND_F]);
        if (var==1) {g_nbTripFM[IND_F+nbF*0] = g_effort1FM[IND_F+nbF*0] ; g_nbTripF[IND_F] = g_effort1F[IND_F];}




//    //Rprintf("O %f \n",x[ind_f+1]);
//    //Rprintf("A %f \n",g_nbdsFM[ind_f+nbF*0]);
//    //Rprintf("B %f \n",g_nbdsFM[ind_f+nbF*1]);
//    //Rprintf("C %f \n",g_nbdsF[ind_f]);
//    //Rprintf("D %f \n",effortIni[ind_f]);
//    //Rprintf("F %i \n",ind_f);

    //}

    int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);

    for (int i = 0 ; i < NBI ; i++)
        REAL(VECTOR_ELT(out_Z_eit,eTemp))[i+NBI*IND_T] = Ztemp[i+1];

    CatchDL(listTemp, IND_T, eVarCopy);

    Marche(listTemp, IND_T);


        EcoDCF(listTemp, IND_T, EcoIndCopy[4], drCopy);

        gcfF = REAL(VECTOR_ELT(out_EcoDCF, 20));



    //Rprintf("GCF %f \n",gcfF[IND_F + nbF*IND_T]);

    //calcul de l'indicateur de profit à optimiser
    //OUT@output$gcf_f[indF,indT]-pxQ[indT]*(sum(OUT@outputSp$Li$Sole_commune[indF,,,indT],na.rm=TRUE)-TAC_f_t[indF,1])

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

    double result = 0.0;
    result = gcfF[IND_F + nbF*IND_T]*g_nbvF[IND_F] - PxQ * (totF[IND_F + nbF*IND_T] - TAC_byFleet[IND_F + nbF*IND_T]); //TAC_byFleet[IND_F + (nbF+1)*IND_T]);
//Rprintf("A %f \n",TAC_byFleet[IND_F + nbF*IND_T]);
//Rprintf("B %f \n",gcfF[IND_F + nbF*IND_T]);
//Rprintf("C %f \n",g_nbvF[IND_F]);
//Rprintf("D %f \n",totF[IND_F + nbF*IND_T]);

    UNPROTECT(3);

    return (-1*result);

}
}

//Report

extern "C" {

int BioEcoPar::QuotaExchV2Report(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
{

    if (ind_t<delay) {

    } else {

    IND_T = ind_t;
    PxQ = pxQuIni;
    spQ = spp;

    int nfunc;
	int ITquotaExch = 20;
	int ITTOT = 6;

    //Rprintf("TIME %i \n",IND_T);

    double **q = NRmatrix(1,2,1,1);
    double *multF = NRvector(1,nbF+1);
    double *z = NRvector(1,2);
    double *x = NRvector(1,1);

    bool GoOn = true;

	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT_customReportV2; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)
	BEfn1_F foo3 = &BioEcoPar::fxTAC_F_customReport2;

    double DIFF = 0.0;
    int IT = 0;

    while (GoOn) {

        for (int IT2 = 0 ; IT2 < ITTOT ; IT2++){

        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
    //Rprintf("IT %i \n",IT);


        for (int ind_f = 0 ; ind_f <= nbF ; ind_f++){

        //Rprintf("T %i F %i \n",ind_t,ind_f);

        IND_F = ind_f;

        if (ind_f==nbF) { //optimisation de Foth --> x multiplicateur

            q[1][1]=x[1]=0.85;
            z[1]=(this->*foo3)(x);
            q[2][1]=x[1]=1;
            z[2]=(this->*foo3)(x);

        amoeba(foo3, q,z,1,ftol,&nfunc);

        multF[ind_f+1] = q[2][1];

        } else {

        x[1]=1.0;
        z[1]=(this->*foo2)(x);//Rprintf("z1 %f \n",z[1]);
        x[1]=350.0;
        z[2]=(this->*foo2)(x);//Rprintf("z2 %f \n",z[2]);

        if (z[1]>z[2]) multF[ind_f+1] = 350.0; else multF[ind_f+1] = 0.0;

        //if (IT==0)  //Rprintf("Mult %f \n",multF[ind_f+1]);

        }
        }

                //2ème étape : redéfinition de Ztemp

        SEXP listTemp;

        PROTECT(listTemp = duplicate(list));
        PROTECT(eVarCopy = duplicate(eVar));

        double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
        double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
            g_nbdsFM[ind_f+nbF*1] = effortIni[ind_f] - g_nbdsFM[ind_f+nbF*0];
        }
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];

        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

        }

        int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,spQ))), "modI"));

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        for (int i = 0 ; i < NBI ; i++) {

            //Rprintf("diffZZ %f ", REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);
            Ztemp[i+1] = Ztemp[i+1] + lambda*(REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);

        }

        //... et on recommence jusqu'à convergence de Z vers la valeur coïncidant avec les mortalités marginales

        UNPROTECT(2);

        }

        //3ème étape : redéfinition de PxQ

    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
            g_nbdsFM[ind_f+nbF*1] = effortIni[ind_f] - g_nbdsFM[ind_f+nbF*0];
        }
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];

           if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }


    }

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        PROTECT(nDimF = allocVector(INTSXP,4));
        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

            //calcul de diffLQ
        double diffLQ = 0.0;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + (nbF+1)*IND_T]);

        }

        if ((DIFF*diffLQ)<0) lambda = lambda/3; //ie si DIFF et diffLQ de signe différent

        if ((diffLQ<=0) & (((diffLQ*lambda)*(diffLQ*lambda)<0.25) | (IT>ITquotaExch))) GoOn = false; //on ne s'arrête que si diffLQ<=0 (Quota respecté)

        IT++;

        DIFF = diffLQ;

//        //Rprintf("\n");
        //Rprintf("diffLQ %f \n",diffLQ);
//
        //Rprintf("PxQ_1 %f ",PxQ);

        if (diffLQ<0) {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmin2(lambda*diffLQ,-0.1),pxQuMax));
        } else {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmax2(lambda*diffLQ,0.1),pxQuMax));
        }

        //Rprintf("PxQ_2 %f \n",PxQ);
        //Rprintf("lambda %f \n",lambda);
        //... et on recommence

        UNPROTECT(3);

    }


    double *pxQuot = REAL(VECTOR_ELT(out_PQuot_et,spQ));
    pxQuot[ind_t] = PxQ;

	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
            nbdsFM_G[ind_f+nbF*1] = effortIni[ind_f] - nbdsFM_G[ind_f+nbF*0];
        }
        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];

        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

    }

    free_matrix(q,1,2,1,1);
    free_vector(multF,1,nbF+1);
    free_vector(z,1,2);
    free_vector(x,1,1);

    }

	return 0;
}

}

extern "C" {

double BioEcoPar::fxMaxProf_FT_customReportV2(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));

    double *gcfF;

    //for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            g_nbdsFM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),effortIni[IND_F]);
            g_nbdsFM[IND_F+nbF*1] = effortIni[IND_F] - g_nbdsFM[IND_F+nbF*0];
        }
        if (var==1) g_nbdsF[IND_F] = g_nbdsFM[IND_F+nbF*0] + g_nbdsFM[IND_F+nbF*1];

//    //Rprintf("O %f \n",x[ind_f+1]);
//    //Rprintf("A %f \n",g_nbdsFM[ind_f+nbF*0]);
//    //Rprintf("B %f \n",g_nbdsFM[ind_f+nbF*1]);
//    //Rprintf("C %f \n",g_nbdsF[ind_f]);
//    //Rprintf("D %f \n",effortIni[ind_f]);
//    //Rprintf("F %i \n",ind_f);

    //}

    int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);

    for (int i = 0 ; i < NBI ; i++)
        REAL(VECTOR_ELT(out_Z_eit,eTemp))[i+NBI*IND_T] = Ztemp[i+1];

    CatchDL(listTemp, IND_T, eVarCopy);

    Marche(listTemp, IND_T);


        EcoDCF(listTemp, IND_T, EcoIndCopy[4], drCopy);

        gcfF = REAL(VECTOR_ELT(out_EcoDCF, 20));



    //Rprintf("GCF %f \n",gcfF[IND_F + nbF*IND_T]);

    //calcul de l'indicateur de profit à optimiser
    //OUT@output$gcf_f[indF,indT]-pxQ[indT]*(sum(OUT@outputSp$Li$Sole_commune[indF,,,indT],na.rm=TRUE)-TAC_f_t[indF,1])

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

    double result = 0.0;
    result = gcfF[IND_F + nbF*IND_T]*g_nbvF[IND_F] - PxQ * (totF[IND_F + nbF*IND_T] - TAC_byFleet[IND_F + (nbF+1)*IND_T]);
    //Rprintf("A %f \n",TAC_byFleet[IND_F + (nbF+1)*IND_T]);
    //Rprintf("B %f \n",gcfF[IND_F + nbF*IND_T]);
    //Rprintf("C %f \n",g_nbvF[IND_F]);
    //Rprintf("D %f \n",totF[IND_F + nbF*IND_T]);

    UNPROTECT(3);

    return (-1*result);

}
}





//////////// ------------------------------------- ////////////
//////////// ------------------------------------- ////////////
//////////// ------------------------------------- ////////////
//Partie remise à jour pour tenir compte des paramètres TACbyF et effSup de l'objet argument, et d'un ajustement effort sur effort1 (nbTrip)

//hypothese effort métier autre constant

extern "C" {

double BioEcoPar::fxTAC_F_customCst2(double *x) //cas métier Sole des flottilles modélisées seulement impacté
{
    SEXP listTemp, nDimF, nDim;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_effort1FM = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m"));
    double *g_effort1FM_copy = REAL(duplicate(getListElement(getListElement(listTemp, "Fleet"), "effort1_f_m")));
    double *g_effort1F = REAL(getListElement(getListElement(listTemp, "Fleet"), "effort1_f"));
    //double *g_effort1F_copy = REAL(duplicate(getListElement(getListElement(listTemp, "Fleet"), "effort1_f")));
    double *g_nbTripFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f_m"));
    double *g_nbTripF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbTrip_f"));
    double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));
    double *g_tripLgthFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "tripLgth_f_m"));
    double *g_tripLgthF = REAL(getListElement(getListElement(listTemp, "Fleet"), "tripLgth_f"));
    //double *g_effSup = REAL(effSupMat);

    double *mpond_fm = REAL(m_fm);

    if (IND_F < nbF) {

         if (var==1) {  //effort en nb de marées

            double nbTrip_F = 0.0;

            //int priorite = 0; //on intègre désormais non plus des pondérations pour gestyp=2, mais un ordre de priorité de baisse d'effort (0 : P1; 1 : P2 ;...) pour un x donné

            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {

                if (!ISNA(g_effort1FM[IND_F+nbF*ind_m])) {

                    if (gestyp==1) g_effort1FM[IND_F+nbF*ind_m] = fmax2(g_effort1FM[IND_F+nbF*ind_m] + x[1]*mpond_fm[IND_F+nbF*ind_m],0.0);
                    if (gestyp==2) g_effort1FM[IND_F+nbF*ind_m] = fmax2(g_effort1FM[IND_F+nbF*ind_m]*(1 + x[1]*mpond_fm[IND_F+nbF*ind_m]),0.0);
                    if (gestyp==0) {
                            double Ww ;
                            int countZeroEff = 0; //on doit d'abord compter le nombre de métier de priorité supérieure pour lesquels l'effort est nul
                            for (int ind_m2 = 0 ; ind_m2<nbMe ; ind_m2++) {
                                if ((mpond_fm[IND_F+nbF*ind_m2]<mpond_fm[IND_F+nbF*ind_m]) & (fabs(g_effort1FM_copy[IND_F+nbF*ind_m2])<0.00001)) countZeroEff++;
                            }

                            if ((-1*mpond_fm[IND_F+nbF*ind_m])>=(x[1]-1-countZeroEff)) {
                                Ww = x[1]+mpond_fm[IND_F+nbF*ind_m]-1.0-countZeroEff;
                            } else {
                                if (x[1]>0) {
                                    Ww = x[1];
                                } else {
                                    Ww = 0.0;
                                }
                            }
                    //Rprintf("AA g_effort1FM %f Ww %f\n",g_effort1FM[IND_F+nbF*ind_m],Ww);
                            g_effort1FM[IND_F+nbF*ind_m] = fmax2(g_effort1FM[IND_F+nbF*ind_m]*(1 + Ww),0.0); //cf priorité d'impact
                    //Rprintf("BB g_effort1FM %f Ww %f\n",g_effort1FM[IND_F+nbF*ind_m],Ww);
                    }
                    g_nbTripFM[IND_F+nbF*ind_m] = g_effort1FM[IND_F+nbF*ind_m];
                    nbTrip_F = nbTrip_F + g_nbTripFM[IND_F+nbF*ind_m]*g_nbvFM[IND_F+nbF*ind_m]*g_tripLgthFM[IND_F+nbF*ind_m];

                }
            }

            g_effort1F[IND_F] = nbTrip_F/(g_nbvF[IND_F]*g_tripLgthF[IND_F]);
            g_nbTripF[IND_F] = g_effort1F[IND_F];

            //redressement dans le cas où on dépasse la limite imposée dans effSup à l'instant IND_T
//            if (!ISNA(g_effSup[IND_F+nbF*IND_T]) & (g_effSup[IND_F+nbF*IND_T]<g_effort1F[IND_F])) {
//
//                for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//
//                    g_effort1FM[IND_F+nbF*ind_m] = g_effort1FM[IND_F+nbF*ind_m]*g_effSup[IND_F+nbF*IND_T]/g_effort1F[IND_F];
//                    g_nbTripFM[IND_F+nbF*ind_m] = g_effort1FM[IND_F+nbF*ind_m];
//
//                }
//
//                g_effort1F[IND_F] = g_effSup[IND_F+nbF*IND_T];
//                g_nbTripF[IND_F] = g_effort1F[IND_F];
//
//            }

//            if (!ISNA(g_effSup[IND_F+nbF*IND_T]) & (g_effSup[IND_F+nbF*IND_T]<g_effort1F[IND_F])) { //correction au prorata de l'évolution entre l'effort initial et final
//
//                for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//
//                    g_effort1FM[IND_F+nbF*ind_m] = g_effort1FM_copy[IND_F+nbF*ind_m] +
//                       (g_effort1FM[IND_F+nbF*ind_m] - g_effort1FM_copy[IND_F+nbF*ind_m]) * (g_effSup[IND_F+nbF*IND_T] - g_effort1F_copy[IND_F]) / (g_effort1F[IND_F] - g_effort1F_copy[IND_F]);
//                    g_nbTripFM[IND_F+nbF*ind_m] = g_effort1FM[IND_F+nbF*ind_m];
//
//                }
//
//                g_effort1F[IND_F] = g_effSup[IND_F+nbF*IND_T];
//                g_nbTripF[IND_F] = g_effort1F[IND_F];
//
//            }

         }


        if (var==2) {  //nb de navires : impact seul au niveau flottille, et gestyp n'a alors plus de pertinence

            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {

                if (!ISNA(g_nbvFM[IND_F+nbF*ind_m])) g_nbvFM[IND_F+nbF*ind_m] = fmax2(g_nbvFM[IND_F+nbF*ind_m]*(1+x[1]),0.0);

            }

            g_nbvF[IND_F] = fmax2(g_nbvF[IND_F]*(1+x[1]),0.0);

//            //redressement dans le cas où on dépasse la limite imposée dans effSup à l'instant IND_T
//            if (!ISNA(g_effSup[IND_F+nbF*IND_T]) & (g_effSup[IND_F+nbF*IND_T]<g_nbvF[IND_F])) {
//
//                for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//
//                    g_nbvFM[IND_F+nbF*ind_m] = g_nbvFM[IND_F+nbF*ind_m]*g_effSup[IND_F+nbF*IND_T]/g_nbvF[IND_F];
//
//                }
//
//                g_nbvF[IND_F] = g_effSup[IND_F+nbF*IND_T];
//
//            }

         }

    } else {   //impact sur le F autres de l'espèce ajustée

            if (Qvec[eTemp]==0) {

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*x[1],0.0);


            } else {  //espèce SS3


                        double *Fothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 116));
                        double *Fothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 117));
                        double *Fothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 118));
                        double *Fothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 119));
                        double *Fothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 120));
                        double *Fothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 121));
                        double *Fothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 122));
                        double *Fothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 123));
                        double *Fothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 124));
                        double *Fothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 125));
                        double *Fothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 126));
                        double *Fothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 127));
                        double *Fothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 128));
                        double *Fothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 129));
                        double *Fothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 130));
                        double *Fothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 131));

                        double *FRWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 176));
                        double *FRWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 177));
                        double *FRWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 178));
                        double *FRWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 179));
                        double *FRWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 180));
                        double *FRWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 181));
                        double *FRWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 182));
                        double *FRWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 183));
                        double *FRWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 184));
                        double *FRWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 185));
                        double *FRWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 186));
                        double *FRWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 187));
                        double *FRWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 188));
                        double *FRWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 189));
                        double *FRWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 190));
                        double *FRWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 191));

                        double *FDWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 208));
                        double *FDWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 209));
                        double *FDWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 210));
                        double *FDWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 211));
                        double *FDWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 212));
                        double *FDWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 213));
                        double *FDWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 214));
                        double *FDWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 215));
                        double *FDWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 216));
                        double *FDWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 217));
                        double *FDWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 218));
                        double *FDWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 219));
                        double *FDWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 220));
                        double *FDWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 221));
                        double *FDWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 222));
                        double *FDWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, eTemp), 223));

                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

                for (int ag = 0; ag < ni; ag++) {

                            Fothi_S1M1[ag + IND_T*ni] = fmax2(Fothi_S1M1[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S1M2[ag + IND_T*ni] = fmax2(Fothi_S1M2[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S1M3[ag + IND_T*ni] = fmax2(Fothi_S1M3[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S1M4[ag + IND_T*ni] = fmax2(Fothi_S1M4[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S2M1[ag + IND_T*ni] = fmax2(Fothi_S2M1[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S2M2[ag + IND_T*ni] = fmax2(Fothi_S2M2[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S2M3[ag + IND_T*ni] = fmax2(Fothi_S2M3[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S2M4[ag + IND_T*ni] = fmax2(Fothi_S2M4[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S3M1[ag + IND_T*ni] = fmax2(Fothi_S3M1[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S3M2[ag + IND_T*ni] = fmax2(Fothi_S3M2[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S3M3[ag + IND_T*ni] = fmax2(Fothi_S3M3[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S3M4[ag + IND_T*ni] = fmax2(Fothi_S3M4[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S4M1[ag + IND_T*ni] = fmax2(Fothi_S4M1[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S4M2[ag + IND_T*ni] = fmax2(Fothi_S4M2[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S4M3[ag + IND_T*ni] = fmax2(Fothi_S4M3[ag + IND_T*ni]*x[1],0.0);
                            Fothi_S4M4[ag + IND_T*ni] = fmax2(Fothi_S4M4[ag + IND_T*ni]*x[1],0.0);

                            FRWTothi_S1M1[ag + IND_T*ni] = fmax2(FRWTothi_S1M1[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S1M2[ag + IND_T*ni] = fmax2(FRWTothi_S1M2[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S1M3[ag + IND_T*ni] = fmax2(FRWTothi_S1M3[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S1M4[ag + IND_T*ni] = fmax2(FRWTothi_S1M4[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S2M1[ag + IND_T*ni] = fmax2(FRWTothi_S2M1[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S2M2[ag + IND_T*ni] = fmax2(FRWTothi_S2M2[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S2M3[ag + IND_T*ni] = fmax2(FRWTothi_S2M3[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S2M4[ag + IND_T*ni] = fmax2(FRWTothi_S2M4[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S3M1[ag + IND_T*ni] = fmax2(FRWTothi_S3M1[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S3M2[ag + IND_T*ni] = fmax2(FRWTothi_S3M2[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S3M3[ag + IND_T*ni] = fmax2(FRWTothi_S3M3[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S3M4[ag + IND_T*ni] = fmax2(FRWTothi_S3M4[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S4M1[ag + IND_T*ni] = fmax2(FRWTothi_S4M1[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S4M2[ag + IND_T*ni] = fmax2(FRWTothi_S4M2[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S4M3[ag + IND_T*ni] = fmax2(FRWTothi_S4M3[ag + IND_T*ni]*x[1],0.0);
                            FRWTothi_S4M4[ag + IND_T*ni] = fmax2(FRWTothi_S4M4[ag + IND_T*ni]*x[1],0.0);

                            FDWTothi_S1M1[ag + IND_T*ni] = fmax2(FDWTothi_S1M1[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S1M2[ag + IND_T*ni] = fmax2(FDWTothi_S1M2[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S1M3[ag + IND_T*ni] = fmax2(FDWTothi_S1M3[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S1M4[ag + IND_T*ni] = fmax2(FDWTothi_S1M4[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S2M1[ag + IND_T*ni] = fmax2(FDWTothi_S2M1[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S2M2[ag + IND_T*ni] = fmax2(FDWTothi_S2M2[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S2M3[ag + IND_T*ni] = fmax2(FDWTothi_S2M3[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S2M4[ag + IND_T*ni] = fmax2(FDWTothi_S2M4[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S3M1[ag + IND_T*ni] = fmax2(FDWTothi_S3M1[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S3M2[ag + IND_T*ni] = fmax2(FDWTothi_S3M2[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S3M3[ag + IND_T*ni] = fmax2(FDWTothi_S3M3[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S3M4[ag + IND_T*ni] = fmax2(FDWTothi_S3M4[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S4M1[ag + IND_T*ni] = fmax2(FDWTothi_S4M1[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S4M2[ag + IND_T*ni] = fmax2(FDWTothi_S4M2[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S4M3[ag + IND_T*ni] = fmax2(FDWTothi_S4M3[ag + IND_T*ni]*x[1],0.0);
                            FDWTothi_S4M4[ag + IND_T*ni] = fmax2(FDWTothi_S4M4[ag + IND_T*ni]*x[1],0.0);

                    }

                }


         }

double result = 0.0;

    if (eTemp<nbE) { //espèce dynamique

        int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

        if (Qvec[eTemp]==1) ZoptSS3 = true;

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);

        if (Qvec[eTemp]==0) {
        for (int i = 0 ; i < NBI ; i++)
            REAL(VECTOR_ELT(out_Z_eit,eTemp))[i+NBI*IND_T] = Ztemp[i+1];
        }

        CatchDL(listTemp, IND_T, eVarCopy);

        PROTECT(nDimF = allocVector(INTSXP,4));
        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
        PROTECT(nDim = allocVector(INTSXP,4));
        int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;
        double *totF = REAL(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDimF));
        double *totF2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, eTemp),nDimF));
        double *tot = REAL(aggregObj(VECTOR_ELT(out_L_eit, eTemp),nDim));
        double *totMod = REAL(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDim));
        double *totMod2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, eTemp),nDim));
        ////PrintValue(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));

        if (IND_F < nbF) {
                //Rprintf("totF %f TAC %f\n",totF[IND_F + nbF*IND_T]+totF2[IND_F + nbF*IND_T],TAC_byFleet[IND_F + nbF*IND_T]);
                //result = result + fabs(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
                result = (totF[IND_F + nbF*IND_T]+totF2[IND_F + nbF*IND_T]-TAC_byFleet[IND_F + nbF*IND_T]);//*(totF[IND_F + nbF*IND_T]-TAC_byFleet[IND_F + (nbF+1)*IND_T]);
                //Rprintf("%12.6f ",result);
        } else {

        //result = result + fabs(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
                double TACoth = TAC_glob[IND_T];
                for (int ind_f = 0 ; ind_f < nbF ; ind_f++) TACoth = TACoth - TAC_byFleet[ind_f + nbF*IND_T];
                //Rprintf("totOTH %f TACoth %f\n",tot[IND_T] - totMod[IND_T] - totMod2[IND_T],TACoth);
                result = (tot[IND_T] - totMod[IND_T] - totMod2[IND_T] - TACoth);//*(tot[IND_T] - totMod[IND_T] - TACoth);

        }
        //Rprintf("ccc");
        //Rprintf("%12.6f \n",result);
        //Rprintf("result %f x %f\n",result,x[1]);

        UNPROTECT(2);

    } else {

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        PROTECT(nDimF = allocVector(INTSXP,4));
        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
        double *totF = REAL(aggregObj(VECTOR_ELT(out_Lstat, eTemp-nbE),nDimF));

        if (IND_F < nbF) {

            //Rprintf("totF %f TAC %f\n",totF[IND_F + nbF*IND_T],TAC_byFleet[IND_F + nbF*IND_T]);
            result = totF[IND_F + nbF*IND_T]-TAC_byFleet[IND_F + nbF*IND_T];
            //Rprintf("%12.6f ",result);

        }

        UNPROTECT(1);

    }

    UNPROTECT(2);
    return (result*result);

}
}






extern "C" {

int BioEcoPar::EstimationTACfromF(int ind_t)
{


//string str1, str2, str3;
//str1 = "testGestion";//"\\home1\\datahome\\fbriton\\AMURE\\Sc_bug_hke\\debugHKE_V";
//str3 = "_V";
//str2 = ".txt";
//
//std::stringstream ss, mp;
//mp << ind_t;
//ss << EcoIndCopy[0];
//str1 = str1 + mp.str()+ str3 + ss.str() + str2;
//
//ofstream fichier(str1.c_str() , ios::out | ios::trunc);
//
//fichier << "Début" << endl;

    if (ind_t<delay) {

    } else {
//Rprintf("A1\n");
    IND_T = ind_t;
//spQ = spp;

    //double *totFM, *totFM2, *totF, *totF2, *totFF, *totFF2, *tot, *totMod, *totMod2;

    SEXP listTempP, nDim;

    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;

    PROTECT(listTempP = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));


    double *g_effort1FM = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f_m"));
    double *g_effort1F = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f"));
    double *g_nbTripFM = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f_m"));
    double *g_nbTripF = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f"));

//Rprintf("A2\n");
//for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//    if ((ind_t==1) & (ind_f==0)) {
//
//        std::stringstream ggg1;
//        ggg1 << g_effort1FM[ind_f + nbF*ind_m];
//
//        fichier << "effort_step1T1" << ggg1.str() << endl;
//
//    }
//}



//for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//    if ((ind_t==1) & (ind_f==0)) {
//
//        std::stringstream ggg2;
//        ggg2 << g_effort1FM[ind_f + nbF*ind_m];
//
//        fichier << "effort_step2T1" << ggg2.str() << endl;
//
//    }
//}

//if (false) PrintValue(inpFtarg);
//if (false) {


int nbEtarg = length(getAttrib(inpFtarg, R_NamesSymbol));

int denom=0, denom2=0;

double *r_N_eit_S1M1=&NA_REAL, *r_N_eit_S2M2=&NA_REAL, *r_N_eit_S3M3=&NA_REAL, *r_N_eit_S4M4=&NA_REAL, *r_N_e0t=&NA_REAL, *rans_N_eit=&NA_REAL,
       *r_N_e0t_S1M1=&NA_REAL, *r_N_e0t_S2M2=&NA_REAL, *r_N_e0t_S3M3=&NA_REAL, *r_N_e0t_S4M4=&NA_REAL, *recValues=&NA_REAL, *LTOT=&NA_REAL,
       *TAC_byFleet=&NA_REAL, *TAC_glob=&NA_REAL, *r_W_Ftarg=&NA_REAL;

double *Fothi2=&NA_REAL;

double *Fothi2_S1M1=&NA_REAL,*Fothi2_S1M2=&NA_REAL,*Fothi2_S1M3=&NA_REAL,*Fothi2_S1M4=&NA_REAL,
       *Fothi2_S2M1=&NA_REAL,*Fothi2_S2M2=&NA_REAL,*Fothi2_S2M3=&NA_REAL,*Fothi2_S2M4=&NA_REAL,
       *Fothi2_S3M1=&NA_REAL,*Fothi2_S3M2=&NA_REAL,*Fothi2_S3M3=&NA_REAL,*Fothi2_S3M4=&NA_REAL,
       *Fothi2_S4M1=&NA_REAL,*Fothi2_S4M2=&NA_REAL,*Fothi2_S4M3=&NA_REAL,*Fothi2_S4M4=&NA_REAL,
       *FRWTothi2_S1M1=&NA_REAL,*FRWTothi2_S1M2=&NA_REAL,*FRWTothi2_S1M3=&NA_REAL,*FRWTothi2_S1M4=&NA_REAL,
       *FRWTothi2_S2M1=&NA_REAL,*FRWTothi2_S2M2=&NA_REAL,*FRWTothi2_S2M3=&NA_REAL,*FRWTothi2_S2M4=&NA_REAL,
       *FRWTothi2_S3M1=&NA_REAL,*FRWTothi2_S3M2=&NA_REAL,*FRWTothi2_S3M3=&NA_REAL,*FRWTothi2_S3M4=&NA_REAL,
       *FRWTothi2_S4M1=&NA_REAL,*FRWTothi2_S4M2=&NA_REAL,*FRWTothi2_S4M3=&NA_REAL,*FRWTothi2_S4M4=&NA_REAL,
       *FDWTothi2_S1M1=&NA_REAL,*FDWTothi2_S1M2=&NA_REAL,*FDWTothi2_S1M3=&NA_REAL,*FDWTothi2_S1M4=&NA_REAL,
       *FDWTothi2_S2M1=&NA_REAL,*FDWTothi2_S2M2=&NA_REAL,*FDWTothi2_S2M3=&NA_REAL,*FDWTothi2_S2M4=&NA_REAL,
       *FDWTothi2_S3M1=&NA_REAL,*FDWTothi2_S3M2=&NA_REAL,*FDWTothi2_S3M3=&NA_REAL,*FDWTothi2_S3M4=&NA_REAL,
       *FDWTothi2_S4M1=&NA_REAL,*FDWTothi2_S4M2=&NA_REAL,*FDWTothi2_S4M3=&NA_REAL,*FDWTothi2_S4M4=&NA_REAL;

double newRec=0.0, newRec_Q1=0.0, newRec_Q2=0.0, newRec_Q3=0.0, newRec_Q4=0.0;
//Rprintf("%i",nbEtarg);


for (int intEspTarg = 0 ; intEspTarg < nbEtarg ; intEspTarg++) {
//Rprintf("A3\n");
    SEXP namVarTarg, elmt, v_N_e0t, v_N_e0t_S1M1, v_N_e0t_S2M2, v_N_e0t_S3M3, v_N_e0t_S4M4, v_MeanRec_Ftarg, v_W_Ftarg, v_out_L_eit;
    PROTECT(namVarTarg=STRING_ELT(getAttrib(inpFtarg, R_NamesSymbol),intEspTarg));

    //calcul du ratio Ftarg/Fbar
    double r_Ftarg = REAL(getListElement(inpFtarg, CHAR(namVarTarg)))[IND_T];
    double r_Fbar = REAL(getListElement(out_Fbar_et, CHAR(namVarTarg)))[IND_T-1];

    PROTECT(elmt = getListElement(listTempP, CHAR(namVarTarg)));
    int nbI = length(getListElement(elmt, "modI"));

//Rprintf("A4\n");
    //correction des efforts par le ratio précédent
    for (int indF = 0 ; indF < nbF ; indF++) {

        for (int indM = 0 ; indM<nbMe ; indM++) {

            g_effort1FM[indF + nbF*indM] = g_effort1FM[indF + nbF*indM] * r_Ftarg / r_Fbar;
            g_nbTripFM[indF + nbF*indM] = g_nbTripFM[indF + nbF*indM] * r_Ftarg / r_Fbar;

        }

        g_effort1F[indF] = g_effort1F[indF] * r_Ftarg / r_Fbar;
        g_nbTripF[indF] = g_nbTripF[indF] * r_Ftarg / r_Fbar;

    }

    //et correction des mortalités autres pour les espèces dynamiques XSA, Spict et SS3


            int nbi = length(getListElement(getListElement(list, CHAR(namVarTarg)), "modI"));

            if (Qvec[getListIndex(Q, CHAR(namVarTarg))]==0) {

                    Fothi2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 44));
                    for (int ag = 0; ag < nbi; ag++) Fothi2[ag + IND_T*nbi] = Fothi2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;

            } else {

                    Fothi2_S1M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 116));
                    Fothi2_S1M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 117));
                    Fothi2_S1M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 118));
                    Fothi2_S1M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 119));
                    Fothi2_S2M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 120));
                    Fothi2_S2M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 121));
                    Fothi2_S2M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 122));
                    Fothi2_S2M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 123));
                    Fothi2_S3M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 124));
                    Fothi2_S3M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 125));
                    Fothi2_S3M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 126));
                    Fothi2_S3M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 127));
                    Fothi2_S4M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 128));
                    Fothi2_S4M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 129));
                    Fothi2_S4M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 130));
                    Fothi2_S4M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 131));

                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M1[ag + IND_T*nbi] = Fothi2_S1M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M2[ag + IND_T*nbi] = Fothi2_S1M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M3[ag + IND_T*nbi] = Fothi2_S1M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M4[ag + IND_T*nbi] = Fothi2_S1M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M1[ag + IND_T*nbi] = Fothi2_S2M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M2[ag + IND_T*nbi] = Fothi2_S2M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M3[ag + IND_T*nbi] = Fothi2_S2M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M4[ag + IND_T*nbi] = Fothi2_S2M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M1[ag + IND_T*nbi] = Fothi2_S3M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M2[ag + IND_T*nbi] = Fothi2_S3M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M3[ag + IND_T*nbi] = Fothi2_S3M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M4[ag + IND_T*nbi] = Fothi2_S3M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M1[ag + IND_T*nbi] = Fothi2_S4M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M2[ag + IND_T*nbi] = Fothi2_S4M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M3[ag + IND_T*nbi] = Fothi2_S4M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M4[ag + IND_T*nbi] = Fothi2_S4M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;

                    FRWTothi2_S1M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 176));
                    FRWTothi2_S1M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 177));
                    FRWTothi2_S1M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 178));
                    FRWTothi2_S1M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 179));
                    FRWTothi2_S2M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 180));
                    FRWTothi2_S2M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 181));
                    FRWTothi2_S2M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 182));
                    FRWTothi2_S2M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 183));
                    FRWTothi2_S3M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 184));
                    FRWTothi2_S3M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 185));
                    FRWTothi2_S3M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 186));
                    FRWTothi2_S3M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 187));
                    FRWTothi2_S4M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 188));
                    FRWTothi2_S4M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 189));
                    FRWTothi2_S4M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 190));
                    FRWTothi2_S4M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 191));

                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M1[ag + IND_T*nbi] = FRWTothi2_S1M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M2[ag + IND_T*nbi] = FRWTothi2_S1M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M3[ag + IND_T*nbi] = FRWTothi2_S1M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M4[ag + IND_T*nbi] = FRWTothi2_S1M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M1[ag + IND_T*nbi] = FRWTothi2_S2M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M2[ag + IND_T*nbi] = FRWTothi2_S2M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M3[ag + IND_T*nbi] = FRWTothi2_S2M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M4[ag + IND_T*nbi] = FRWTothi2_S2M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M1[ag + IND_T*nbi] = FRWTothi2_S3M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M2[ag + IND_T*nbi] = FRWTothi2_S3M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M3[ag + IND_T*nbi] = FRWTothi2_S3M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M4[ag + IND_T*nbi] = FRWTothi2_S3M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M1[ag + IND_T*nbi] = FRWTothi2_S4M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M2[ag + IND_T*nbi] = FRWTothi2_S4M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M3[ag + IND_T*nbi] = FRWTothi2_S4M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M4[ag + IND_T*nbi] = FRWTothi2_S4M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;

                    FDWTothi2_S1M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 208));
                    FDWTothi2_S1M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 209));
                    FDWTothi2_S1M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 210));
                    FDWTothi2_S1M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 211));
                    FDWTothi2_S2M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 212));
                    FDWTothi2_S2M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 213));
                    FDWTothi2_S2M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 214));
                    FDWTothi2_S2M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 215));
                    FDWTothi2_S3M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 216));
                    FDWTothi2_S3M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 217));
                    FDWTothi2_S3M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 218));
                    FDWTothi2_S3M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 219));
                    FDWTothi2_S4M1 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 220));
                    FDWTothi2_S4M2 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 221));
                    FDWTothi2_S4M3 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 222));
                    FDWTothi2_S4M4 = REAL(VECTOR_ELT(getListElement(eVarCopy, CHAR(namVarTarg)), 223));

                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M1[ag + IND_T*nbi] = FDWTothi2_S1M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M2[ag + IND_T*nbi] = FDWTothi2_S1M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M3[ag + IND_T*nbi] = FDWTothi2_S1M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M4[ag + IND_T*nbi] = FDWTothi2_S1M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M1[ag + IND_T*nbi] = FDWTothi2_S2M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M2[ag + IND_T*nbi] = FDWTothi2_S2M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M3[ag + IND_T*nbi] = FDWTothi2_S2M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M4[ag + IND_T*nbi] = FDWTothi2_S2M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M1[ag + IND_T*nbi] = FDWTothi2_S3M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M2[ag + IND_T*nbi] = FDWTothi2_S3M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M3[ag + IND_T*nbi] = FDWTothi2_S3M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M4[ag + IND_T*nbi] = FDWTothi2_S3M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M1[ag + IND_T*nbi] = FDWTothi2_S4M1[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M2[ag + IND_T*nbi] = FDWTothi2_S4M2[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M3[ag + IND_T*nbi] = FDWTothi2_S4M3[ag + IND_T*nbi] * r_Ftarg / r_Fbar;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M4[ag + IND_T*nbi] = FDWTothi2_S4M4[ag + IND_T*nbi] * r_Ftarg / r_Fbar;

            }

    // envoi du module Mortalité
    Mortalite(listTempP, IND_T, eVarCopy);

    // calcul recrutement selon type 1 (Moyenne) ou 2 (Forçage)
    PROTECT(v_MeanRec_Ftarg = getListElement(inpMeanRec_Ftarg, CHAR(namVarTarg)));
Rprintf("A5\n");
    if (length(v_MeanRec_Ftarg)==1) {

        denom = INTEGER(v_MeanRec_Ftarg)[0];
        denom2 = denom;

        if (!ISNA(denom)){
            if (Qvec[getListIndex(Q, CHAR(namVarTarg))]==0) {
Rprintf("A6\n");
              newRec = 0.0;
              rans_N_eit = REAL(getListElement(out_N_eit,CHAR(namVarTarg)));
              for (int index=1; index<=denom; index++) {if ((IND_T-index)<0) {
                                                           denom2 = denom2 - 1 ;
                                                         } else {
                                                           newRec = newRec + rans_N_eit[(IND_T-index)*nbI] ;
                                                         }}
              newRec = newRec / denom2;
              PROTECT(v_N_e0t = getListElement(elmt, "N_i0t"));
              r_N_e0t = REAL(v_N_e0t);
              r_N_e0t[IND_T] = newRec;
              rans_N_eit[IND_T*nbI] = newRec;
              UNPROTECT(1);
Rprintf("A7\n");
            } else {
Rprintf("A8\n");
              //Quarter 1
                r_N_eit_S1M1 = REAL(getListElement(out_N_eit_S1M1,CHAR(namVarTarg)));
                r_N_eit_S2M2 = REAL(getListElement(out_N_eit_S2M2,CHAR(namVarTarg)));
                r_N_eit_S3M3 = REAL(getListElement(out_N_eit_S3M3,CHAR(namVarTarg)));
                r_N_eit_S4M4 = REAL(getListElement(out_N_eit_S4M4,CHAR(namVarTarg)));
                newRec_Q1 = 0.0; newRec_Q2 = 0.0; newRec_Q3 = 0.0; newRec_Q4 = 0.0;
//Rprintf("A9\n");
                for (int index=1; index<=denom; index++) {if ((IND_T-index)<0) {
                                                           denom2 = denom2 - 1 ;
                                                         } else {
                                                           newRec_Q1 = newRec_Q1 + r_N_eit_S1M1[(IND_T-index)*nbI] ;
                                                           newRec_Q2 = newRec_Q2 + r_N_eit_S2M2[(IND_T-index)*nbI] ;
                                                           newRec_Q3 = newRec_Q3 + r_N_eit_S3M3[(IND_T-index)*nbI] ;
                                                           newRec_Q4 = newRec_Q4 + r_N_eit_S4M4[(IND_T-index)*nbI] ;
                                                         }}
                newRec_Q1 = newRec_Q1 / denom2 ;
                newRec_Q2 = newRec_Q2 / denom2 ;
                newRec_Q3 = newRec_Q3 / denom2 ;
                newRec_Q4 = newRec_Q4 / denom2 ;
//Rprintf("A10\n");
                PROTECT(v_N_e0t_S1M1 = getListElement(elmt, "Ni0_S1M1"));
                PROTECT(v_N_e0t_S2M2 = getListElement(elmt, "Ni0_S2M2"));
                PROTECT(v_N_e0t_S3M3 = getListElement(elmt, "Ni0_S3M3"));
                PROTECT(v_N_e0t_S4M4 = getListElement(elmt, "Ni0_S4M4"));

                r_N_e0t_S1M1 = REAL(v_N_e0t_S1M1);
                r_N_e0t_S2M2 = REAL(v_N_e0t_S2M2);
                r_N_e0t_S3M3 = REAL(v_N_e0t_S3M3);
                r_N_e0t_S4M4 = REAL(v_N_e0t_S4M4);

                r_N_e0t_S1M1[0] = newRec_Q1;
                r_N_e0t_S2M2[0] = newRec_Q2;
                r_N_e0t_S3M3[0] = newRec_Q3;
                r_N_e0t_S4M4[0] = newRec_Q4;

               // ce serait bien de mettre aussi à jour "N0t_S1M1[0]",...
                UNPROTECT(4);

            }

        }
    } else {

      if (length(v_MeanRec_Ftarg)>1) {  //historique XSA ou SS3
//Rprintf("A11\n");
        recValues = REAL(v_MeanRec_Ftarg);
//Rprintf("A110\n");
        if (Qvec[getListIndex(Q, CHAR(namVarTarg))]==0) {
//Rprintf("A12\n");
              PROTECT(v_N_e0t = getListElement(elmt, "N_i0t"));
              r_N_e0t = REAL(v_N_e0t);
              r_N_e0t[IND_T] = recValues[IND_T];
              UNPROTECT(1);
//Rprintf("A13\n");
        } else {
//Rprintf("A14\n");
                PROTECT(v_N_e0t_S1M1 = getListElement(elmt, "Ni0_S1M1"));
                PROTECT(v_N_e0t_S2M2 = getListElement(elmt, "Ni0_S2M2"));
                PROTECT(v_N_e0t_S3M3 = getListElement(elmt, "Ni0_S3M3"));
                PROTECT(v_N_e0t_S4M4 = getListElement(elmt, "Ni0_S4M4"));

                r_N_e0t_S1M1 = REAL(v_N_e0t_S1M1);
                r_N_e0t_S2M2 = REAL(v_N_e0t_S2M2);
                r_N_e0t_S3M3 = REAL(v_N_e0t_S3M3);
                r_N_e0t_S4M4 = REAL(v_N_e0t_S4M4);

                r_N_e0t_S1M1[0] = recValues[4*IND_T];
                r_N_e0t_S2M2[0] = recValues[4*IND_T + 1];
                r_N_e0t_S3M3[0] = recValues[4*IND_T + 2];
                r_N_e0t_S4M4[0] = recValues[4*IND_T + 3];
//Rprintf("A15\n");
               // ce serait bien de mettre aussi à jour "N0t_S1M1[0]",...

               UNPROTECT(4);

            }

      }

    }
Rprintf("A16\n");
    DynamicPop(listTempP, IND_T, eVarCopy, false);
Rprintf("A17\n");
    CatchDL(listTempP, IND_T, eVarCopy);
Rprintf("A18\n");
    //on peut désormais déduire des débarquements modélisés les TAC par flottille et totaux

    PROTECT(v_W_Ftarg = getListElement(inpW_Ftarg, CHAR(namVarTarg)));
Rprintf("A19\n");
    PROTECT(v_out_L_eit = getListElement(out_L_eit, CHAR(namVarTarg)));
Rprintf("A20\n");
    LTOT = REAL(aggregObj(v_out_L_eit,nDim));
Rprintf("A21\n");
    //if (IND_T==2) {Rprintf("AA\n"); PrintValue(TACbyF);PrintValue(TAC);}

    TAC_byFleet = REAL(getListElement(TACbyF, CHAR(namVarTarg)));
    TAC_glob = REAL(getListElement(TAC, CHAR(namVarTarg)));
    r_W_Ftarg = REAL(v_W_Ftarg);
Rprintf("A22\n");
    TAC_glob[IND_T] = LTOT[IND_T];
    for (int indF = 0 ; indF < nbF ; indF++) TAC_byFleet[indF + nbF*IND_T] = r_W_Ftarg[indF + nbF*IND_T] * LTOT[IND_T];
    //if (IND_T==2) {Rprintf("BB\n"); PrintValue(TACbyF);PrintValue(TAC);}

        //re-correction des efforts par l'inverse du ratio précédent
    for (int indF = 0 ; indF < nbF ; indF++) {

        for (int indM = 0 ; indM<nbMe ; indM++) {

            g_effort1FM[indF + nbF*indM] = g_effort1FM[indF + nbF*indM] * r_Fbar/ r_Ftarg;
            g_nbTripFM[indF + nbF*indM] = g_nbTripFM[indF + nbF*indM] * r_Fbar / r_Ftarg;

        }

        g_effort1F[indF] = g_effort1F[indF] * r_Fbar / r_Ftarg;
        g_nbTripF[indF] = g_nbTripF[indF] * r_Fbar / r_Ftarg;

    }

        //et re-correction des mortalités autres pour les espèces dynamiques XSA, Spict et SS3

            if (Qvec[getListIndex(Q, CHAR(namVarTarg))]==0) {

                    for (int ag = 0; ag < nbi; ag++) Fothi2[ag + IND_T*nbi] = Fothi2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;

            } else {

                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M1[ag + IND_T*nbi] = Fothi2_S1M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M2[ag + IND_T*nbi] = Fothi2_S1M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M3[ag + IND_T*nbi] = Fothi2_S1M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S1M4[ag + IND_T*nbi] = Fothi2_S1M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M1[ag + IND_T*nbi] = Fothi2_S2M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M2[ag + IND_T*nbi] = Fothi2_S2M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M3[ag + IND_T*nbi] = Fothi2_S2M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S2M4[ag + IND_T*nbi] = Fothi2_S2M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M1[ag + IND_T*nbi] = Fothi2_S3M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M2[ag + IND_T*nbi] = Fothi2_S3M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M3[ag + IND_T*nbi] = Fothi2_S3M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S3M4[ag + IND_T*nbi] = Fothi2_S3M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M1[ag + IND_T*nbi] = Fothi2_S4M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M2[ag + IND_T*nbi] = Fothi2_S4M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M3[ag + IND_T*nbi] = Fothi2_S4M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) Fothi2_S4M4[ag + IND_T*nbi] = Fothi2_S4M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;

                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M1[ag + IND_T*nbi] = FRWTothi2_S1M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M2[ag + IND_T*nbi] = FRWTothi2_S1M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M3[ag + IND_T*nbi] = FRWTothi2_S1M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S1M4[ag + IND_T*nbi] = FRWTothi2_S1M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M1[ag + IND_T*nbi] = FRWTothi2_S2M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M2[ag + IND_T*nbi] = FRWTothi2_S2M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M3[ag + IND_T*nbi] = FRWTothi2_S2M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S2M4[ag + IND_T*nbi] = FRWTothi2_S2M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M1[ag + IND_T*nbi] = FRWTothi2_S3M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M2[ag + IND_T*nbi] = FRWTothi2_S3M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M3[ag + IND_T*nbi] = FRWTothi2_S3M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S3M4[ag + IND_T*nbi] = FRWTothi2_S3M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M1[ag + IND_T*nbi] = FRWTothi2_S4M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M2[ag + IND_T*nbi] = FRWTothi2_S4M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M3[ag + IND_T*nbi] = FRWTothi2_S4M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FRWTothi2_S4M4[ag + IND_T*nbi] = FRWTothi2_S4M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;

                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M1[ag + IND_T*nbi] = FDWTothi2_S1M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M2[ag + IND_T*nbi] = FDWTothi2_S1M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M3[ag + IND_T*nbi] = FDWTothi2_S1M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S1M4[ag + IND_T*nbi] = FDWTothi2_S1M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M1[ag + IND_T*nbi] = FDWTothi2_S2M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M2[ag + IND_T*nbi] = FDWTothi2_S2M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M3[ag + IND_T*nbi] = FDWTothi2_S2M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S2M4[ag + IND_T*nbi] = FDWTothi2_S2M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M1[ag + IND_T*nbi] = FDWTothi2_S3M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M2[ag + IND_T*nbi] = FDWTothi2_S3M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M3[ag + IND_T*nbi] = FDWTothi2_S3M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S3M4[ag + IND_T*nbi] = FDWTothi2_S3M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M1[ag + IND_T*nbi] = FDWTothi2_S4M1[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M2[ag + IND_T*nbi] = FDWTothi2_S4M2[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M3[ag + IND_T*nbi] = FDWTothi2_S4M3[ag + IND_T*nbi] * r_Fbar / r_Ftarg;
                    for (int ag = 0; ag < nbi; ag++) FDWTothi2_S4M4[ag + IND_T*nbi] = FDWTothi2_S4M4[ag + IND_T*nbi] * r_Fbar / r_Ftarg;

            }

     UNPROTECT(5);


}
//UNPROTECT(2);
 //}
     UNPROTECT(3);


    }

   return(0);

  }
}







extern "C" {

int BioEcoPar::GestionF2(int ind_t)
{

//string str1, str2, str3;
//str1 = "testGestion";//"\\home1\\datahome\\fbriton\\AMURE\\Sc_bug_hke\\debugHKE_V";
//str3 = "_V";
//str2 = ".txt";
//
//std::stringstream ss, mp;
//mp << ind_t;
//ss << EcoIndCopy[0];
//str1 = str1 + mp.str()+ str3 + ss.str() + str2;
//
//ofstream fichier(str1.c_str() , ios::out | ios::trunc);
//
//fichier << "Début" << endl;

    if (ind_t<delay) {

    } else {

    IND_T = ind_t;
//spQ = spp;

	int ITtot = maxIter;
//if (spp>=nbE | length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,spQ))), "modI"))==1) ITtot = 1; //si espèce statique ou SPiCT, pas besoin d'itérations successives
	// si qqs i, |Z_i - Ztemp_i|<diffZmax, on arrête, sinon on continue sous réserve que IT<ITtot
	bool goon = true;

	//double ftol = 0.00000001;

    double *g_effSup = REAL(effSupMat);
    double *mpond_fm = REAL(m_fm);

    //double *totFM, *totFM2, *totF, *totF2, *totFF, *totFF2, *tot, *totMod, *totMod2;

    SEXP listTempP, nDimFM, nDimF, nDim, copyEffort;

    PROTECT(nDimFM = allocVector(INTSXP,4));
    int *ndFM = INTEGER(nDimFM); ndFM[0] = nbF; ndFM[1] = nbMe; ndFM[2] = 0; ndFM[3] = nbT;
    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;

    PROTECT(listTempP = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));
//new
    double *g_effort1FM = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f_m"));
    double *g_effort1F = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f"));
    double *g_nbTripFM = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f_m"));
    double *g_nbTripF = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f"));
    double *g_nbvFM = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbv_f_m"));
    double *g_nbvF = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbv_f"));
    double *g_effort2FM = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort2_f_m"));
    double *g_effort2F = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort2_f"));


//for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//    if ((ind_t==1) & (ind_f==0)) {
//
//        std::stringstream ggg1;
//        ggg1 << g_effort1FM[ind_f + nbF*ind_m];
//
//        fichier << "effort_step1T1" << ggg1.str() << endl;
//
//    }
//}



    for (int ind_f = 0 ; ind_f<nbF ; ind_f++) {//initialisation de l'effort de base

            g_effort1F[ind_f] = REAL(NBDSF)[ind_f + nbF*0];
            g_nbTripF[ind_f] = g_effort1F[ind_f];

        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {

            g_effort1FM[ind_f + nbF*ind_m] = (g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m]) /
                                                      (g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m]);
            g_nbTripFM[ind_f + nbF*ind_m] = g_effort1FM[ind_f + nbF*ind_m];

        }

    }

//for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//    if ((ind_t==1) & (ind_f==0)) {
//
//        std::stringstream ggg2;
//        ggg2 << g_effort1FM[ind_f + nbF*ind_m];
//
//        fichier << "effort_step2T1" << ggg2.str() << endl;
//
//    }
//}

    PROTECT(copyEffort = duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort1_f")));
    //double *g_effort1FM_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort1_f_m")));
    double *g_effort1F_copy = REAL(copyEffort); //duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort1_f")));
    //double *g_effort2FM_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort2_f_m")));
    //double *g_effort2F_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort2_f")));
//new
    Mortalite(listTempP, IND_T, eVar);
    DynamicPop(listTempP, IND_T, eVar,true);
    CatchDL(listTempP, IND_T, eVar);

//    double *g_effort1FM = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f_m"));
//    double *g_effort1FM_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort1_f_m")));
//    double *g_effort1F = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort1_f"));
//    double *g_effort1F_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort1_f")));
//    double *g_nbTripFM = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f_m"));
//    double *g_nbTripF = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbTrip_f"));
//    double *g_nbvFM = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbv_f_m"));
//    double *g_nbvF = REAL(getListElement(getListElement(listTempP, "Fleet"), "nbv_f"));
//    double *g_effort2FM = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort2_f_m"));
//    double *g_effort2FM_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort2_f_m")));
//    double *g_effort2F = REAL(getListElement(getListElement(listTempP, "Fleet"), "effort2_f"));
//    double *g_effort2F_copy = REAL(duplicate(getListElement(getListElement(listTempP, "Fleet"), "effort2_f")));

//fichier << "ST1" << endl;
//on initialise en remplissant Einterm_fm avec les valeurs maximales autorisées (fonction de effSupMat et la pondération multiplicative U (mpond_fm)) : Eq A1
//on rappelle que tout cela fonctionne uniquement si on est sur une base individuelle (dans le cas contraire, il faudrait descendre au niveau métier et pondérer par les nbv par métier

    for (int indF = 0 ; indF < nbF ; indF++) {
        if (ISNA(g_effSup[indF + nbF*ind_t])) g_effSup[indF + nbF*ind_t] = 300; //ATTENTION : important à noter, si un navire n'est contraint par rien, c'est direct 300 jours de mer
        double denom_st1 = 0.0; double alpha_f_st1 = 0.0;
        for (int indM = 0 ; indM<nbMe ; indM++) denom_st1 = denom_st1 + g_effort1F[indF] * mpond_fm[indF + nbF*indM]; //c'est censé valoir eff_f normalement si la somme des facteurs de pond. vaut 1
        if (denom_st1>0) alpha_f_st1 = g_effSup[indF + nbF*ind_t] / denom_st1;
        for (int indM = 0 ; indM<nbMe ; indM++) EffsupTMP_fm[1 + indF + nbF*indM] = alpha_f_st1 * g_effort1F[indF] * g_nbvF[indF] * g_effort2F[indF] * mpond_fm[indF + nbF*indM];
    }
//fichier << "ST2" << endl;
    for (int indF = 0 ; indF < nbF ; indF++)
    for (int indM = 0 ; indM<nbMe ; indM++)
      Einterm_fm[1 + indF + nbF*indM] = -1.0; //va servir à identifier à la fin les cellules non réconciliées, qui devront être égales à l'effort courant!!!

//à ce stade, on a initialisé Einterm_fm
//fichier << "ST3" << endl;
//on commence l'ajustement avec les espèces statiques indexées dans SPPstatOPT (s'il y en a)
if (N_SPPstatOPT>0) {

    for (int ind = 0 ; ind < N_SPPstatOPT ; ind++) { //boucle sur ces espèces statiques

        double *TAC_byFleet = REAL(getListElement(TACbyF, CHAR(STRING_ELT(sppListStat,SPPstatOPT[ind]-1))));
        double *totFM = REAL(aggregObj(VECTOR_ELT(out_Lstat, SPPstatOPT[ind]-1),nDimFM)); //PrintValue(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDimFM));
        double *totFM2 = REAL(aggregObj(VECTOR_ELT(out_statLD_efm, SPPstatOPT[ind]-1),nDimFM));
        //double *totF = REAL(aggregObj(VECTOR_ELT(out_Lstat, SPPstatOPT[ind]-1),nDimF));
        //double *totF2 = REAL(aggregObj(VECTOR_ELT(out_statLD_efm, SPPstatOPT[ind]-1),nDimF));
//fichier << "ST4" << endl;
        for (int ind_f = 0 ; ind_f<nbF ; ind_f++) {

            double denom_st2 = 0.0; double alpha_f_st2 = 0.0;
            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {

              if (g_effort1FM[ind_f + nbF*ind_m]>0)
                 denom_st2 = denom_st2 + mpond_fm[ind_f + nbF*ind_m] * (totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T]) /
                                  (g_effort1FM[ind_f + nbF*ind_m] * g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m]);
                    //Rprintf("%f\n", totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T]);
                //totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] = mpond_fm[ind_f + nbF*ind_m] * totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] / g_effort1FM[ind_f + nbF*ind_m];
                    //Rprintf("%f\n", totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T]);
                //totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T] = mpond_fm[ind_f + nbF*ind_m] * totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T] / g_effort1FM[ind_f + nbF*ind_m];
            }

            if ((denom_st2>0) & (g_effort1F[ind_f]>0))
                    alpha_f_st2 = finite(TAC_byFleet[ind_f + nbF*IND_T] / (g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * denom_st2));

            //réconciliation
            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                double valTest = alpha_f_st2 * g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m];
                if ((totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T])>0) {
                    if (Einterm_fm[1 + ind_f + nbF*ind_m]<-0.5) {
                    Einterm_fm[1 + ind_f + nbF*ind_m] = EffsupTMP_fm[1 + ind_f + nbF*ind_m]; //on élimine le -1
                    SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                    SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                    }
                    if (valTest < Einterm_fm[1 + ind_f + nbF*ind_m] ) {//réconciliation seulement si la capture associée est non nulle
                    Einterm_fm[1 + ind_f + nbF*ind_m] = valTest;
                    SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, STRING_ELT(sppListStat,SPPstatOPT[ind]-1));
                    SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, STRING_ELT(sppListStat,SPPstatOPT[ind]-1));
                    }
                }
            }
            //Rprintf("T %i F %i \n",ind_t,ind_f);
        }
        }
}


//on poursuit avec l'ajustement des espèces dynamiques sous SPiCT indexées dans SPPspictOPT (s'il y en a)
if (N_SPPspictOPT>0) {

    for (int ind = 0 ; ind < N_SPPspictOPT ; ind++) { //boucle sur ces espèces Spict
//fichier << "ST5" << endl;
        TAC_byFleet = REAL(getListElement(TACbyF, CHAR(STRING_ELT(sppList,SPPspictOPT[ind]-1))));//fichier << "ST51" << endl;
        TAC_glob = REAL(getListElement(TAC, CHAR(STRING_ELT(sppList,SPPspictOPT[ind]-1))));//fichier << "ST52" << endl;
        double *totFM = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPspictOPT[ind]-1),nDimFM));//fichier << "ST53" << endl; //PrintValue(VECTOR_ELT(out_L_efmit, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDimFM));
        double *totFM2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPspictOPT[ind]-1),nDimFM));//fichier << "ST54" << endl; //PrintValue(VECTOR_ELT(out_LD_efmi, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_LD_efmi, eTemp),nDimFM));
        //double *totF = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPspictOPT[ind]-1),nDimF));//fichier << "ST55" << endl;
        //double *totF2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPspictOPT[ind]-1),nDimF));//fichier << "ST56" << endl;
        double *tot = REAL(aggregObj(VECTOR_ELT(out_L_eit, SPPspictOPT[ind]-1),nDim));//fichier << "ST57" << endl;
        double *totMod = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPspictOPT[ind]-1),nDim));//fichier << "ST58" << endl;
        double *totMod2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPspictOPT[ind]-1),nDim));//fichier << "ST59" << endl;
//fichier << "ST6" << endl;
        for (int ind_f = 0 ; ind_f<nbF ; ind_f++) {

            double denom_st3 = 0.0; double alpha_f_st3 = 0.0;
            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {

              if (g_effort1FM[ind_f + nbF*ind_m]>0)
                 //fichier << "ST6.1" << endl;
                 denom_st3 = denom_st3 + mpond_fm[ind_f + nbF*ind_m] * (totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T]) /
                                 (g_effort1FM[ind_f + nbF*ind_m] * g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m]);
                    //Rprintf("%f\n", totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T]);
                //totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] = mpond_fm[ind_f + nbF*ind_m] * totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] / g_effort1FM[ind_f + nbF*ind_m];
                    //Rprintf("%f\n", totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T]);
                //totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T] = mpond_fm[ind_f + nbF*ind_m] * totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T] / g_effort1FM[ind_f + nbF*ind_m];
            }

            if ((denom_st3>0) & (g_effort1F[ind_f]>0)) {
                //fichier << "ST6.2" << endl;
                alpha_f_st3 = finite(TAC_byFleet[ind_f + nbF*IND_T] /(g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * denom_st3)); //Eq: A3
            }

            //réconciliation
            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                double valTest = alpha_f_st3 * g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m];
                if ((totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T])>0){
                    //fichier << "ST6.3" << endl;
                    if (Einterm_fm[1 + ind_f + nbF*ind_m]<-0.5) {
                    //fichier << "ST6.4" << endl;
                    Einterm_fm[1 + ind_f + nbF*ind_m] = EffsupTMP_fm[1 + ind_f + nbF*ind_m]; //on élimine le -1
                    SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                    SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                    }
                    if (valTest < Einterm_fm[1 + ind_f + nbF*ind_m] ) {//réconciliation seulement si la capture associée est non nulle
                    //fichier << "ST6.5" << endl;
                    Einterm_fm[1 + ind_f + nbF*ind_m] = valTest;
                    SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, STRING_ELT(sppList,SPPspictOPT[ind]-1));
                    SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, STRING_ELT(sppList,SPPspictOPT[ind]-1));
                }}
            }
            //Rprintf("T %i F %i \n",ind_t,ind_f);

        }
//fichier << "ST7" << endl;
    double TACoth = TAC_glob[IND_T];
    for (int ind_ff = 0 ; ind_ff < nbF ; ind_ff++) TACoth = TACoth - TAC_byFleet[ind_ff + nbF*IND_T];
    //multF[ind_f+1] = finite(TACoth / (tot[IND_T] - totMod[IND_T] - totMod2[IND_T]));
    double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPspictOPT[ind]-1), 44));
    int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,SPPspictOPT[ind]-1))), "modI"));
    for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*finite(TACoth / (tot[IND_T] - totMod[IND_T] - totMod2[IND_T])),0.0);
//fichier << "ST8" << endl;
    }
}



//à ce stade, on garde la trace de Einterm_fm et listTempP original
//SEXP EintermTMP, listTempPP;
//PROTECT(EintermTMP = duplicate(Einterm_fm));
//PROTECT(listTempPP = duplicate(listTempP));

//on termine avec l'ajustement des espèces dynamiques sous XSA ou SS3 indexées dans SPPdynOPT (s'il y en a)

if (N_SPPdynOPT>0) {
//fichier << "ST7" << endl;
    //on finit d'initialiser Einterm_fm
     for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) {  //boucle sur les espèces dynamiques restantes pour finaliser l'initialisation de Einterm_fm
//fichier << "ST9" << endl;
            double *totFM = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPdynOPT[ind]-1),nDimFM)); //fichier << "ST9a" << endl;//PrintValue(VECTOR_ELT(out_L_efmit, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDimFM));
            double *totFM2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPdynOPT[ind]-1),nDimFM)); //fichier << "ST9b" << endl;//PrintValue(VECTOR_ELT(out_LD_efmi, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_LD_efmi, eTemp),nDimFM));

            for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
            for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
               if ((totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T])>0){
                        //fichier << "ST7.1" << endl;
                        if (Einterm_fm[1 + ind_f + nbF*ind_m]<-0.5) {
                          //fichier << "ST7.2" << endl;
                          Einterm_fm[1 + ind_f + nbF*ind_m] = EffsupTMP_fm[1 + ind_f + nbF*ind_m]; //fichier << "ST9c" << endl;//on élimine le -1
                          //if (ind_f==0 & ind_m==0) PrintValue(reconcilSPP);
                          SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                          SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("MAX"));
                        }
                }
            }
     }
}
//fichier << "ST91" << endl;
 //les -1 restants sont remplacés par les efforts initiaux --> les cellules fm non contraintes ne changent pas d'effort lors de l'ajustement
for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
      if (Einterm_fm[1 + ind_f + nbF*ind_m]<-0.5) {
      //fichier << "ST7.3" << endl;
      Einterm_fm[1 + ind_f + nbF*ind_m] = g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m];
      SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("---"));
      SET_STRING_ELT(reconcilSPP_copy, ind_f + nbF*ind_m + nbF*nbMe*IND_T, mkChar("---"));
      }
}


//fichier << "ST10" << endl;

if (N_SPPdynOPT>0) {

    int NBI = 0;

    ZoptSS3 = false;

    //SEXP reconcilSPP_copy;
    //on remet reconcilSPP au niveau qu'il avait avant l'engagement dans la boucle XSA/SS3

    //PROTECT(reconcilSPP_copy = duplicate(reconcilSPP));


    //on crée l'ensemble de matrices Einterm de longueur N_SPPdynOPT
//double *EintermList_fm = NRvector(1,nbF*nbMe*N_SPPdynOPT);

//fichier << "ST7.31" << endl;
for (int indF = 0 ; indF < nbF ; indF++)  //initialisation de la copie de Einterm_fm
for (int indM = 0 ; indM < nbMe ; indM++) Einterm_fm_copy[1 + indF + nbF*indM] = Einterm_fm[1 + indF + nbF*indM] ;

//for (int indF = 0 ; indF < nbF ; indF++)  //initialisation des copies de Einterm_fm qui serviront de base de réconciliation sur le'ensemble des espèces dynamiques (hors Spict)
//for (int indM = 0 ; indM < nbMe ; indM++)
//for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) EintermList_fm[1 + indF + nbF*indM+ nbF*nbMe*ind] = Einterm_fm[1 + indF + nbF*indM] ;

//fichier << "ST11" << endl;
    //avant de passer aux ajustements suivants, on met à jour les efforts flottille-métier et flottille, puis on évalue Z associé
//fichier << "ST7.32" << endl;
        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
        //fichier << "ST7.34" << endl;
        g_effort1F[ind_f] = 0.0;
        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                //fichier << "ST7.35" << endl;
                g_effort1FM[ind_f + nbF*ind_m] = Einterm_fm[1 + ind_f + nbF*ind_m] / (g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m]) ;
                g_nbTripFM[ind_f + nbF*ind_m] = g_effort1FM[ind_f + nbF*ind_m] ;
                if (!ISNA(g_effort1FM[ind_f + nbF*ind_m])){
                     g_effort1F[ind_f] = g_effort1F[ind_f] + g_effort1FM[ind_f + nbF*ind_m] * g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m] ;
                     //fichier << "ST7.4" << endl;
                }
        }
        //fichier << "ST7.41" << endl;
        g_effort1F[ind_f] = g_effort1F[ind_f] / (g_nbvF[ind_f] * g_effort2F[ind_f]) ;
        g_nbTripF[ind_f] = g_effort1F[ind_f] ;
        }


//        for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg3;
//                ggg3 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step3T1 " << ggg3.str() << endl;
//
//            }
//        }


//fichier << "ST7.42" << endl;
//fichier << "ST12" << endl;
    Mortalite(listTempP, IND_T, eVar) ; //on génère les Z dans out_Z_eit (il faut s'assurer que l'application du Ztemp est bloquée -> utilisation de ZoptSS3)
//fichier << "ST7.43" << endl;
// on actualise les Ztemp ----
    for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) { //boucle sur les espèces dynamiques XSA ou SS3 : initialisation des Z temporaires (ZtempList)

        NBI = length(getListElement(getListElement(listTempP, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))), "modI"));
//fichier << "ST13" << endl;
        double *Zt = REAL(getListElement(ZtempList, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1)))) ;
//fichier << "ST7.44" << endl;
        if (Qvec[SPPdynOPT[ind]-1]==0) {
            //fichier << "ST8.1" << endl;
            for (int i = 0 ; i < NBI ; i++) Zt[i] = REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI*IND_T] ; //XSA

        } else {
            //fichier << "ST8.2" << endl;
            for (int i = 0 ; i < NBI ; i++) { //SS3

                Zt[i+(0*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S1M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(1*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S1M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(2*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S1M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(3*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S1M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(4*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S2M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(5*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S2M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(6*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S2M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(7*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S2M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(8*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S3M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(9*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S3M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(10*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S3M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(11*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S3M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(12*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S4M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(13*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S4M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(14*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S4M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;
                Zt[i+(15*NBI)] = REAL(VECTOR_ELT(out_Z_eit_S4M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] ;

            }
        }
        //fichier << "ST14" << endl;
    }



    for (int IT = 0 ; IT < ITtot ; IT++){
//fichier << "ST8.20" << endl;
       if (goon) {

        // on enclenche la boucle d'ajustement croisé selon les phases par espèce successives : fixation du Z, résolution marginale, réconciliation avec Einterm_fm, ajustement des Zfix pour chaque espèce
//fichier << "ST8.21" << endl;
        for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) { //boucle sur les espèces dynamiques XSA ou SS3
            if (Qvec[SPPdynOPT[ind]-1]==1) ZoptSS3 = true; //SS3
        }

//
//        for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg00;
//                ggg00 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step00T1 " << ggg00.str() << endl;
//
//            }
//        }

//fichier << "ST8.22" << endl;
for (int indF = 0 ; indF < nbF ; indF++)  //réinitialisation de Einterm_fm et de reconcilSPP
for (int indM = 0 ; indM < nbMe ; indM++) {
        Einterm_fm[1 + indF + nbF*indM] = Einterm_fm_copy[1 + indF + nbF*indM] ;
        SET_STRING_ELT(reconcilSPP, indF + nbF*indM + nbF*nbMe*IND_T, STRING_ELT(reconcilSPP_copy,indF + nbF*indM + nbF*nbMe*IND_T));
}
//fichier << "ST8.23" << endl;
//on remet reconcilSPP_copy égal à reconcilSPP avant le lancement de l'ajustement XSA/SS3
//reconcilSPP_copy = duplicate(reconcilSPP);

    // on reboote les efforts flottilles, on en déduit les efforts flottille-métier initiaux en fonction de U


//        for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg0, ggg01, ggg02, ggg03, ggg04, ggg05, ggg06, ggg07;
//                ggg0 << g_effort1FM[ind_f + nbF*ind_m];
//                ggg01 << g_effort1F[ind_f];
//                ggg02 << g_effort2F[ind_f];
//                ggg03 << g_nbvF[ind_f];
//                ggg04 << mpond_fm[ind_f + nbF*ind_m];
//                ggg05 << g_effort2FM[ind_f + nbF*ind_m];
//                ggg06 << g_nbvFM[ind_f + nbF*ind_m];
//                ggg07 << g_effort1F_copy[ind_f];
//
//                fichier << "effort_step0T1 " << ggg0.str() << endl;
//                fichier << " ef1F " << ggg01.str() << " ef2F " << ggg02.str() << " nbvF " << ggg03.str() <<" pond " << ggg04.str() << " ef2FM " << ggg05.str() << " nbvFM " << ggg06.str() << " eff1F_copy " << ggg07.str() << endl;
//
//            }
//        }


    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
        g_effort1F[ind_f] = g_effort1F_copy[ind_f] ;
        g_nbTripF[ind_f] = g_effort1F[ind_f] ;
        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                    g_effort1FM[ind_f + nbF*ind_m] = g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m] / (g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m] ) ;
                    g_nbTripFM[ind_f + nbF*ind_m] = g_effort1FM[ind_f + nbF*ind_m] ;
        }
    }


//            for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg4;
//                ggg4 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step4T1 " << ggg4.str() << endl;
//
//            }
//        }


//fichier << "ST8.24" << endl;
//fichier << "ST15" << endl;
        Mortalite(listTempP, IND_T, eVar); //hors boucle espèce à optimiser
        DynamicPop(listTempP, IND_T, eVar,true); //hors boucle espèce à optimiser
//fichier << "ST8.25" << endl;
    for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) {  //boucle sur les espèces dynamiques XSA ou SS3

        int NBI2 = 0;
//fichier << "ST8.26" << endl;
        NBI2 = length(getListElement(getListElement(listTempP, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))), "modI"));
        double *Zt = REAL(getListElement(ZtempList, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1)))) ;
//fichier << "ST8.27" << endl;
//fichier << "ST16" << endl;
        if (Qvec[SPPdynOPT[ind]-1]==0) {    //XSA
          //fichier << "ST8.28" << endl;
          for (int i = 0 ; i < NBI2 ; i++)
            REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i];
        } else {                            //SS3 : sans doute inutile car boulot déjà fait dans le module Dyn avec ZoptSS3 = true
          //fichier << "ST8.29" << endl;
          for (int i = 0 ; i < NBI2 ; i++)
          {
            REAL(VECTOR_ELT(out_Z_eit_S1M1,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(0*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S1M2,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(1*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S1M3,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(2*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S1M4,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(3*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S2M1,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(4*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S2M2,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(5*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S2M3,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(6*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S2M4,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(7*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S3M1,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(8*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S3M2,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(9*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S3M3,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(10*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S3M4,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(11*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S4M1,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(12*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S4M2,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(13*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S4M3,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(14*NBI2)];
            REAL(VECTOR_ELT(out_Z_eit_S4M4,SPPdynOPT[ind]-1))[i+NBI2*IND_T] = Zt[i+(15*NBI2)];
          }
        }
//fichier << "ST17" << endl;
    }

        CatchDL(listTempP, IND_T, eVar); //hors boucle espèce à optimiser

    for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) {  //boucle sur les espèces dynamiques XSA ou SS3 : détermination de alpha, effort associé, réconciliation avec Einterm, màj Einterm
//fichier << "ST18" << endl;
//fichier << "ST8.29" << endl;
        TAC_byFleet = REAL(getListElement(TACbyF, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))));
        TAC_glob = REAL(getListElement(TAC, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))));
        double *totFM = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPdynOPT[ind]-1),nDimFM)); //PrintValue(VECTOR_ELT(out_L_efmit, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_L_efmit, eTemp),nDimFM));
        double *totFM2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPdynOPT[ind]-1),nDimFM)); //PrintValue(VECTOR_ELT(out_LD_efmi, eTemp)) ; PrintValue(aggregObj(VECTOR_ELT(out_LD_efmi, eTemp),nDimFM));
        double *totF = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPdynOPT[ind]-1),nDimF));
        double *totF2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPdynOPT[ind]-1),nDimF));
        double *tot = REAL(aggregObj(VECTOR_ELT(out_L_eit, SPPdynOPT[ind]-1),nDim));
        double *totMod = REAL(aggregObj(VECTOR_ELT(out_L_efmit, SPPdynOPT[ind]-1),nDim));
        double *totMod2 = REAL(aggregObj(VECTOR_ELT(out_LD_efmi, SPPdynOPT[ind]-1),nDim));
//fichier << "ST8.291" << endl;

//fichier << "ST19" << endl;
        for (int ind_f = 0 ; ind_f <= nbF ; ind_f++){

                    ////Rprintf("TACf %f totF %f totF2 %f denom %f mult %f\n",TAC_byFleet[ind_f + nbF*IND_T],totF[ind_f + nbF*IND_T],totF2[ind_f + nbF*IND_T],denom,multF[ind_f+1]);
                    ////Rprintf("ind_f %i multF %f \n",ind_f,multF[ind_f+1]);
                    //multF[ind_f+1] = 1; }
//fichier << "ST8.292" << endl;
            double alpha_f_st4 = 0.0, alpha_f_st5 = 0.0;

            if (ind_f<nbF) {

                alpha_f_st4 = finite(TAC_byFleet[ind_f + nbF*IND_T] / (totF[ind_f + nbF*IND_T] + totF2[ind_f + nbF*IND_T])); //Eq: A4 ???????????????????
//fichier << "ST8.293" << endl;
//std::stringstream ff;
//ff << alpha_f_st4;
//fichier << ff.str() << endl;

                //réconciliation
                for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//                        fichier << "ST8.294" << endl;
                    double valTest = alpha_f_st4 * g_effort1F[ind_f] * g_effort2F[ind_f] * g_nbvF[ind_f] * mpond_fm[ind_f + nbF*ind_m];

//                    std::stringstream gg;
//                    gg << totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T];
//                    std::stringstream hh;
//                    hh << totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T];
//                    fichier << gg.str() << endl;
//                    fichier << hh.str() << endl;

                    if ( ((totFM[ind_f + nbF*ind_m + nbF*nbMe*IND_T] + totFM2[ind_f + nbF*ind_m + nbF*nbMe*IND_T])>0) & (valTest < Einterm_fm[1 + ind_f + nbF*ind_m]) ) {//réconciliation seulement si la capture associée est non nulle
//                        fichier << "ST9.1" << endl;
                        Einterm_fm[1 + ind_f + nbF*ind_m] = valTest;
                        SET_STRING_ELT(reconcilSPP, ind_f + nbF*ind_m + nbF*nbMe*IND_T, STRING_ELT(sppList,SPPdynOPT[ind]-1));
                }
                }
                //Rprintf("T %i F %i \n",ind_t,ind_f);

            } else {  //alpha_oth
//fichier << "ST9.11" << endl;
                double TACoth = TAC_glob[IND_T];
                for (int ind_ff = 0 ; ind_ff < nbF ; ind_ff++) TACoth = TACoth - TAC_byFleet[ind_ff + nbF*IND_T];
                //fichier << "ST9.12" << endl;
                alpha_f_st5 = finite(TACoth / (tot[IND_T] - totMod[IND_T] - totMod2[IND_T]));
                //Rprintf("TACothIni %f TACoth %f tot %f totMod %f totMod2 %f\n",TAC_glob[IND_T],TACoth,tot[IND_T],totMod[IND_T],totMod2[IND_T]);

                if (Qvec[SPPdynOPT[ind]-1]==0) {
//fichier << "ST9.13" << endl;
                    double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 44));
                    int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))), "modI"));
                    for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = g_Fothi[ag + ni*IND_T]*alpha_f_st5;
//fichier << "ST9.14" << endl;

                } else {  //espèce SS3

//fichier << "ST9.15" << endl;
                            double *Fothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 116));
                            double *Fothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 117));
                            double *Fothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 118));
                            double *Fothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 119));
                            double *Fothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 120));
                            double *Fothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 121));
                            double *Fothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 122));
                            double *Fothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 123));
                            double *Fothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 124));
                            double *Fothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 125));
                            double *Fothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 126));
                            double *Fothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 127));
                            double *Fothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 128));
                            double *Fothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 129));
                            double *Fothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 130));
                            double *Fothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 131));
//fichier << "ST9.16" << endl;
                            double *FRWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 176));
                            double *FRWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 177));
                            double *FRWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 178));
                            double *FRWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 179));
                            double *FRWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 180));
                            double *FRWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 181));
                            double *FRWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 182));
                            double *FRWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 183));
                            double *FRWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 184));
                            double *FRWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 185));
                            double *FRWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 186));
                            double *FRWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 187));
                            double *FRWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 188));
                            double *FRWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 189));
                            double *FRWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 190));
                            double *FRWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 191));
//fichier << "ST9.17" << endl;
                            double *FDWTothi_S1M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 208));
                            double *FDWTothi_S1M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 209));
                            double *FDWTothi_S1M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 210));
                            double *FDWTothi_S1M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 211));
                            double *FDWTothi_S2M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 212));
                            double *FDWTothi_S2M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 213));
                            double *FDWTothi_S2M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 214));
                            double *FDWTothi_S2M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 215));
                            double *FDWTothi_S3M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 216));
                            double *FDWTothi_S3M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 217));
                            double *FDWTothi_S3M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 218));
                            double *FDWTothi_S3M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 219));
                            double *FDWTothi_S4M1 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 220));
                            double *FDWTothi_S4M2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 221));
                            double *FDWTothi_S4M3 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 222));
                            double *FDWTothi_S4M4 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, SPPdynOPT[ind]-1), 223));
//fichier << "ST9.18" << endl;
                    int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))), "modI"));

                    for (int ag = 0; ag < ni; ag++) {

                                Fothi_S1M1[ag + IND_T*ni] = Fothi_S1M1[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S1M2[ag + IND_T*ni] = Fothi_S1M2[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S1M3[ag + IND_T*ni] = Fothi_S1M3[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S1M4[ag + IND_T*ni] = Fothi_S1M4[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S2M1[ag + IND_T*ni] = Fothi_S2M1[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S2M2[ag + IND_T*ni] = Fothi_S2M2[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S2M3[ag + IND_T*ni] = Fothi_S2M3[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S2M4[ag + IND_T*ni] = Fothi_S2M4[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S3M1[ag + IND_T*ni] = Fothi_S3M1[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S3M2[ag + IND_T*ni] = Fothi_S3M2[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S3M3[ag + IND_T*ni] = Fothi_S3M3[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S3M4[ag + IND_T*ni] = Fothi_S3M4[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S4M1[ag + IND_T*ni] = Fothi_S4M1[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S4M2[ag + IND_T*ni] = Fothi_S4M2[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S4M3[ag + IND_T*ni] = Fothi_S4M3[ag + IND_T*ni]*alpha_f_st5;
                                Fothi_S4M4[ag + IND_T*ni] = Fothi_S4M4[ag + IND_T*ni]*alpha_f_st5;
//fichier << "ST9.19" << endl;
                                FRWTothi_S1M1[ag + IND_T*ni] = FRWTothi_S1M1[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S1M2[ag + IND_T*ni] = FRWTothi_S1M2[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S1M3[ag + IND_T*ni] = FRWTothi_S1M3[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S1M4[ag + IND_T*ni] = FRWTothi_S1M4[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S2M1[ag + IND_T*ni] = FRWTothi_S2M1[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S2M2[ag + IND_T*ni] = FRWTothi_S2M2[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S2M3[ag + IND_T*ni] = FRWTothi_S2M3[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S2M4[ag + IND_T*ni] = FRWTothi_S2M4[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S3M1[ag + IND_T*ni] = FRWTothi_S3M1[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S3M2[ag + IND_T*ni] = FRWTothi_S3M2[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S3M3[ag + IND_T*ni] = FRWTothi_S3M3[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S3M4[ag + IND_T*ni] = FRWTothi_S3M4[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S4M1[ag + IND_T*ni] = FRWTothi_S4M1[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S4M2[ag + IND_T*ni] = FRWTothi_S4M2[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S4M3[ag + IND_T*ni] = FRWTothi_S4M3[ag + IND_T*ni]*alpha_f_st5;
                                FRWTothi_S4M4[ag + IND_T*ni] = FRWTothi_S4M4[ag + IND_T*ni]*alpha_f_st5;
//fichier << "ST9.21" << endl;
                                FDWTothi_S1M1[ag + IND_T*ni] = FDWTothi_S1M1[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S1M2[ag + IND_T*ni] = FDWTothi_S1M2[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S1M3[ag + IND_T*ni] = FDWTothi_S1M3[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S1M4[ag + IND_T*ni] = FDWTothi_S1M4[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S2M1[ag + IND_T*ni] = FDWTothi_S2M1[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S2M2[ag + IND_T*ni] = FDWTothi_S2M2[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S2M3[ag + IND_T*ni] = FDWTothi_S2M3[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S2M4[ag + IND_T*ni] = FDWTothi_S2M4[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S3M1[ag + IND_T*ni] = FDWTothi_S3M1[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S3M2[ag + IND_T*ni] = FDWTothi_S3M2[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S3M3[ag + IND_T*ni] = FDWTothi_S3M3[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S3M4[ag + IND_T*ni] = FDWTothi_S3M4[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S4M1[ag + IND_T*ni] = FDWTothi_S4M1[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S4M2[ag + IND_T*ni] = FDWTothi_S4M2[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S4M3[ag + IND_T*ni] = FDWTothi_S4M3[ag + IND_T*ni]*alpha_f_st5;
                                FDWTothi_S4M4[ag + IND_T*ni] = FDWTothi_S4M4[ag + IND_T*ni]*alpha_f_st5;

                        }

                    }
             }


            }

           }

    ZoptSS3 = false;
//fichier << "ST20" << endl;
    //on évalue Z par espèce associé à Einterm réconcilié
//fichier << "ST9.22" << endl;
        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
        g_effort1F[ind_f] = 0.0;
        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                g_effort1FM[ind_f + nbF*ind_m] = Einterm_fm[1 + ind_f + nbF*ind_m] / (g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m]) ;
                g_nbTripFM[ind_f + nbF*ind_m] = g_effort1FM[ind_f + nbF*ind_m] ;
                if (!ISNA(g_effort1FM[ind_f + nbF*ind_m]))
                     g_effort1F[ind_f] = g_effort1F[ind_f] + g_effort1FM[ind_f + nbF*ind_m] * g_effort2FM[ind_f + nbF*ind_m] * g_nbvFM[ind_f + nbF*ind_m] ;
        }
        g_effort1F[ind_f] = g_effort1F[ind_f] / (g_nbvF[ind_f] * g_effort2F[ind_f]) ;
        g_nbTripF[ind_f] = g_effort1F[ind_f] ;
        }

//
//        for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg5;
//                ggg5 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step5T1 " << ggg5.str() << endl;
//
//            }
//        }

//fichier << "ST9.23" << endl;
//fichier << "ST21" << endl;
    Mortalite(listTempP, IND_T, eVar) ; //on génère les Z dans out_Z_eit (il faut s'assurer que l'application du Ztemp est bloquée -> utilisation de ZoptSS3)

//       for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg7;
//                ggg7 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step7T1 " << ggg7.str() << endl;
//
//            }
//        }

    DynamicPop(listTempP, IND_T, eVar,true);



//      for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg8;
//                ggg8 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step8T1 " << ggg8.str() << endl;
//
//            }
//        }


//fichier << "ST9.24" << endl;
//il faut maintenant en déduire Z par espèce et modifier Zfix_e en conséquence

	goon = false;

	for (int ind = 0 ; ind < N_SPPdynOPT ; ind++) {  //boucle sur les espèces dynamiques XSA ou SS3 : détermination de alpha, effort associé, réconciliation avec Einterm, màj Einterm
//fichier << "ST10.1" << endl;
      int NBI = length(getListElement(getListElement(listTempP, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1))), "modI"));
      double *Ztemp = REAL(getListElement(ZtempList, CHAR(STRING_ELT(sppList,SPPdynOPT[ind]-1)))) ;
//fichier << "ST22" << endl;
      if (Qvec[SPPdynOPT[ind]-1]==0) {
//fichier << "ST221" << endl;
//fichier << "ST10.2" << endl;
            for (int i = 0 ; i < NBI ; i++) {
//fichier << "ST222" << endl;
                //Rprintf("IT %i time %i indiv %i\n",IT,IND_T,ind);
                //Rprintf("Z %f Ztmp %f diff ZZ%f\n", REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI*IND_T], Ztemp[i], REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i]);fichier << "ST223" << endl;
                //fichier << "ST10.3" << endl;
                if (fabs(REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i] = Ztemp[i] + lambda*(REAL(VECTOR_ELT(out_Z_eit,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i]);
//fichier << "ST10.4" << endl;
            }

       } else { //SS3
//fichier << "ST224" << endl;
//fichier << "ST10.5" << endl;
            for (int i = 0 ; i < NBI ; i++) {
                    //fichier << "ST10.6" << endl;
//fichier << "ST225" << endl;
                //Rprintf("IT %i time %i indiv %i\n",IT,IND_T,ind);
                //Rprintf("diffZZ S1M1 %f \n", REAL(VECTOR_ELT(out_Z_eit_S1M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(0*NBI)]);fichier << "ST226" << endl;
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S1M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(0*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(0*NBI)] = Ztemp[i+(0*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S1M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(0*NBI)]);

                //Rprintf("diffZZ S1M2 %f \n", REAL(VECTOR_ELT(out_Z_eit_S1M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(1*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S1M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(1*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(1*NBI)] = Ztemp[i+(1*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S1M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(1*NBI)]);

                //Rprintf("diffZZ S1M3 %f \n", REAL(VECTOR_ELT(out_Z_eit_S1M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(2*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S1M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(2*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(2*NBI)] = Ztemp[i+(2*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S1M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(2*NBI)]);

                //Rprintf("diffZZ S1M4 %f \n", REAL(VECTOR_ELT(out_Z_eit_S1M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(3*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S1M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(3*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(3*NBI)] = Ztemp[i+(3*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S1M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(3*NBI)]);

                //Rprintf("diffZZ S2M1 %f \n", REAL(VECTOR_ELT(out_Z_eit_S2M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(4*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S2M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(4*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(4*NBI)] = Ztemp[i+(4*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S2M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(4*NBI)]);

                //Rprintf("diffZZ S2M2 %f \n", REAL(VECTOR_ELT(out_Z_eit_S2M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(5*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S2M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(5*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(5*NBI)] = Ztemp[i+(5*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S2M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(5*NBI)]);

                //Rprintf("diffZZ S2M3 %f \n", REAL(VECTOR_ELT(out_Z_eit_S2M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(6*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S2M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(6*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(6*NBI)] = Ztemp[i+(6*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S2M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(6*NBI)]);

                //Rprintf("diffZZ S2M4 %f \n", REAL(VECTOR_ELT(out_Z_eit_S2M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(7*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S2M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(7*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(7*NBI)] = Ztemp[i+(7*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S2M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(7*NBI)]);

                //Rprintf("diffZZ S3M1 %f \n", REAL(VECTOR_ELT(out_Z_eit_S3M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(8*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S3M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(8*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(8*NBI)] = Ztemp[i+(8*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S3M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(8*NBI)]);

                //Rprintf("diffZZ S3M2 %f \n", REAL(VECTOR_ELT(out_Z_eit_S3M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(9*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S3M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(9*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(9*NBI)] = Ztemp[i+(9*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S3M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(9*NBI)]);

                //Rprintf("diffZZ S3M3 %f \n", REAL(VECTOR_ELT(out_Z_eit_S3M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(10*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S3M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(10*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(10*NBI)] = Ztemp[i+(10*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S3M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(10*NBI)]);

                //Rprintf("diffZZ S3M4 %f \n", REAL(VECTOR_ELT(out_Z_eit_S3M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(11*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S3M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(11*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(11*NBI)] = Ztemp[i+(11*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S3M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(11*NBI)]);

                //Rprintf("diffZZ S4M1 %f \n", REAL(VECTOR_ELT(out_Z_eit_S4M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(12*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S4M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(12*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(12*NBI)] = Ztemp[i+(12*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S4M1,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(12*NBI)]);

                //Rprintf("diffZZ S4M2 %f \n", REAL(VECTOR_ELT(out_Z_eit_S4M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(13*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S4M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(13*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(13*NBI)] = Ztemp[i+(13*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S4M2,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(13*NBI)]);

                //Rprintf("diffZZ S4M3 %f \n", REAL(VECTOR_ELT(out_Z_eit_S4M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(14*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S4M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(14*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(14*NBI)] = Ztemp[i+(14*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S4M3,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(14*NBI)]);

                //Rprintf("diffZZ S4M4 %f \n", REAL(VECTOR_ELT(out_Z_eit_S4M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(15*NBI)]);
                if (fabs(REAL(VECTOR_ELT(out_Z_eit_S4M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(15*NBI)]) > diffZmax) goon = true; //on continue si l'une des valeurs est supérieurs à diffZiMax
                Ztemp[i+(15*NBI)] = Ztemp[i+(15*NBI)] + lambda*(REAL(VECTOR_ELT(out_Z_eit_S4M4,SPPdynOPT[ind]-1))[i+NBI*IND_T] - Ztemp[i+(15*NBI)]);
//fichier << "ST10.7" << endl;
            }

      }
	}


//	     for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg9;
//                ggg9 << g_effort1FM[ind_f + nbF*ind_m];
//
//                fichier << "effort_step9T1 " << ggg9.str() << endl;
//
//            }
//        }


    }

}
//reconcilSPP = duplicate(reconcilSPP_copy);
//UNPROTECT(1);

//free_vector(EintermList_fm,1,nbF*nbMe*N_SPPdynOPT);

}

//fichier << "ST23" << endl;

//fichier << "ST10.8" << endl;
        double *g_effort1FM_G = REAL(getListElement(FList, "effort1_f_m"));
//        double *g_effort1FM_Gcopy = REAL(duplicate(getListElement(FList, "effort1_f_m")));
        double *g_effort1F_G = REAL(getListElement(FList, "effort1_f"));
//        double *g_effort1F_Gcopy = REAL(duplicate(getListElement(FList, "effort1_f")));
        //double *g_nbTripFM_G = REAL(getListElement(FList, "nbTrip_f_m"));
        double *g_nbTripF_G = REAL(getListElement(FList, "nbTrip_f"));
        double *g_nbvFM_G = REAL(getListElement(FList, "nbv_f_m"));
        double *g_nbvF_G = REAL(getListElement(FList, "nbv_f"));
        double *g_effort2FM_G = REAL(getListElement(FList, "effort2_f_m"));
//        double *g_effort1FM_Gcopy = REAL(duplicate(getListElement(FList, "effort1_f_m")));
        double *g_effort2F_G = REAL(getListElement(FList, "effort2_f"));
//fichier << "ST10.9" << endl;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
                //fichier << "ST11.1" << endl;
        g_effort1F_G[ind_f] = 0.0;
        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
                g_effort1FM_G[ind_f + nbF*ind_m] = Einterm_fm[1 + ind_f + nbF*ind_m] / (g_effort2FM_G[ind_f + nbF*ind_m] * g_nbvFM_G[ind_f + nbF*ind_m]) ;
                g_nbTripFM[ind_f + nbF*ind_m] = g_effort1FM[ind_f + nbF*ind_m] ;
                if (!ISNA(g_effort1FM_G[ind_f + nbF*ind_m])){
                     g_effort1F_G[ind_f] = g_effort1F_G[ind_f] + g_effort1FM_G[ind_f + nbF*ind_m] * g_effort2FM_G[ind_f + nbF*ind_m] * g_nbvFM_G[ind_f + nbF*ind_m] ;
                    //fichier << "ST11.2" << endl;
                }
        }
        g_effort1F_G[ind_f] = g_effort1F_G[ind_f] / (g_nbvF_G[ind_f] * g_effort2F_G[ind_f]) ;
        g_nbTripF_G[ind_f] = g_effort1F_G[ind_f] ;
        }

//        for (int ind_f = 0 ; ind_f<nbF ; ind_f++)
//        for (int ind_m = 0 ; ind_m<nbMe ; ind_m++) {
//            if ((ind_t==1) & (ind_f==0)) {
//
//                std::stringstream ggg6;
//                ggg6 << g_effort1FM_G[ind_f + nbF*ind_m];
//
//                fichier << "effort_step6T1 " << ggg6.str() << endl;
//
//            }
//        }




//  free_matrix(q,1,2,1,1);
//	free_vector(z,1,2);
//	free_vector(x,1,1);
//  free_vector(multF,1,nbF+1);

 UNPROTECT(6);

    }

    ZoptSS3 = false;
	return 0;

//	fichier.close();
}

}
//////////// ------------------------------------- ////////////
//////////// ------------------------------------- ////////////
//////////// ------------------------------------- ////////////







//hypothese report d'effort

extern "C" {

double BioEcoPar::fxTAC_F_customReport2(double *x) //cas métier Sole des flottilles modélisées seulement impacté
{
    SEXP listTemp, nDimF, nDim;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    if (IND_F < nbF) {

        if (var==1) {
            g_nbdsFM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),effortIni[IND_F]);
            g_nbdsFM[IND_F+nbF*1] = effortIni[IND_F] - g_nbdsFM[IND_F+nbF*0];
        }
        if (var==1) g_nbdsF[IND_F] = g_nbdsFM[IND_F+nbF*0] + g_nbdsFM[IND_F+nbF*1];

    } else {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*x[1],0.0);
            }

    }



    int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);

    for (int i = 0 ; i < NBI ; i++)
        REAL(VECTOR_ELT(out_Z_eit,eTemp))[i+NBI*IND_T] = Ztemp[i+1];

    CatchDL(listTemp, IND_T, eVarCopy);

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, eTemp),nDimF));
    double *tot = REAL(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));
    double *totMod = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, eTemp),nDim));
    ////PrintValue(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));

    double result = 0.0;
    if (IND_F < nbF) {
            //result = result + fabs(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            result = (totF[IND_F + nbF*IND_T]-TAC_byFleet[IND_F + (nbF+1)*IND_T])*(totF[IND_F + nbF*IND_T]-TAC_byFleet[IND_F + (nbF+1)*IND_T]);
            //Rprintf("%12.6f ",result);
    } else {

    //result = result + fabs(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
            double TACoth = TAC_byFleet[nbF + (nbF+1)*IND_T];
            for (int ind_f = 0 ; ind_f < nbF ; ind_f++) TACoth = TACoth - TAC_byFleet[ind_f + (nbF+1)*IND_T];
            result = (tot[IND_T] - totMod[IND_T] - TACoth)*(tot[IND_T] - totMod[IND_T] - TACoth);

    }
    //Rprintf("ccc");
    //Rprintf("%12.6f \n",result);
    //Rprintf("result %f \n",result);
    //Rprintf("result %f x %f\n",result,x[1]);


    UNPROTECT(4);

    return result;

}
}



extern "C" {

int BioEcoPar::GestionF2report(int spp, int ind_t)
{

    if (ind_t<delay) {

    } else {

    IND_T = ind_t;
    spQ = spp;

	int nfunc;
	int ITtot = 6;
	double lambda = 0.9;
	double ftol = 0.00000001;

    //Rprintf("TIME %i \n",IND_T);
	//on déclare q et z nécessaire à la procédure d'optimisation

	double **q = NRmatrix(1,2,1,1);
	double *z = NRvector(1,2);
	double *x = NRvector(1,1);
    double *multF = NRvector(1,nbF+1);

	BEfn1_F foo2 = &BioEcoPar::fxTAC_F_customReport2;

    for (int IT = 0 ; IT < ITtot ; IT++){

        for (int ind_f = 0 ; ind_f <= nbF ; ind_f++){

        //Rprintf("F %i \n",ind_f);

        IND_F = ind_f;

        if (ind_f==nbF) { //optimisation de Foth --> x multiplicateur
            q[1][1]=x[1]=0.85;
            z[1]=(this->*foo2)(x);
            q[2][1]=x[1]=1;
            z[2]=(this->*foo2)(x);
        } else {            //optimisation de nbds --> x effort
            q[1][1]=x[1]=REAL(getListElement(getListElement(list, "Fleet"), "nbds_f_m"))[IND_F+nbF*0] - 0.5;//0.0;
            z[1]=(this->*foo2)(x);
            q[2][1]=x[1]=REAL(getListElement(getListElement(list, "Fleet"), "nbds_f_m"))[IND_F+nbF*0] + 0.5;//1.0;
            z[2]=(this->*foo2)(x);
        }

        amoeba(foo2, q,z,1,ftol,&nfunc);

        multF[ind_f+1] = q[2][1];

//        //Rprintf("Mult %f \n",multF[ind_f+1]);

        }

        //2ème étape : redéfinition de Ztemp

        SEXP listTemp;

        PROTECT(listTemp = duplicate(list));
        PROTECT(eVarCopy = duplicate(eVar));

        double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
        double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
        if (var==1) g_nbdsFM[ind_f+nbF*1] = effortIni[ind_f] - g_nbdsFM[ind_f+nbF*0];
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];


        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

        }

        int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,spQ))), "modI"));

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        for (int i = 0 ; i < NBI ; i++) {

            //Rprintf("diffZZ %f ", REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);
            Ztemp[i+1] = Ztemp[i+1] + lambda*(REAL(VECTOR_ELT(out_Z_eit,spQ))[i+NBI*IND_T] - Ztemp[i+1]);

        }

        //... et on recommence

        UNPROTECT(2);
    }


	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {

        if (var==1) nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
        if (var==1) nbdsFM_G[ind_f+nbF*1] = effortIni[ind_f] - nbdsFM_G[ind_f+nbF*0];
        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];


        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++) {

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*multF[nbF+1],0.0);
            }
         }

    }

    free_matrix(q,1,2,1,1);
	free_vector(z,1,2);
	free_vector(x,1,1);
    free_vector(multF,1,nbF+1);


    }

	return 0;
}

}




//------------------------------




extern "C" {

double BioEcoPar::fxTAC_F(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF, nDim;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));


    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) g_nbdsF[ind_f] = fmax2(g_nbdsF[ind_f]*x[ind_f+1],0.0);
        if (var==2) g_nbvF[ind_f] = fmax2(g_nbvF[ind_f]*x[ind_f+1],0.0);

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if (var==1) g_nbdsFM[ind_f+nbF*ind_m] = fmax2(g_nbdsFM[ind_f+nbF*ind_m]*x[ind_f+1],0.0);
            if (var==2) g_nbvFM[ind_f+nbF*ind_m] = fmax2(g_nbvFM[ind_f+nbF*ind_m]*x[ind_f+1],0.0);

         if ((ind_m==0) & (ind_f==0)) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*x[nbF+1],0.0);
            }
         }
        }
    }


    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, eTemp),nDimF));
    double *tot = REAL(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));
    ////PrintValue(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));

    double result = 0.0;
    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
            //result = result + fabs(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            result = result + (totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T])*(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            //Rprintf("%12.6f ",result);
    }
    //result = result + fabs(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    result = result + (tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T])*(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    //Rprintf("result %f \n",result);
    //Rprintf("%12.6f \n",result);


    UNPROTECT(4);

    return result;

}
}

//Attention : fonctions customisées seulement valides pour le cas modèle individuel Quota Sole (2 métiers)

extern "C" {

double BioEcoPar::fxTAC_F_customCst(double *x) //cas métier Sole des flottilles modélisées seulement impacté
{
    SEXP listTemp, nDimF, nDim;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(g_nbdsFM[ind_f+nbF*0]*x[ind_f+1],0.0),effortIni[ind_f]-g_nbdsFM[ind_f+nbF*1]);
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];

        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*x[nbF+1],0.0);
            }
         }

    }

    int NBI = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,eTemp))), "modI"));

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);

    for (int i = 0 ; i < NBI ; i++)
        REAL(VECTOR_ELT(out_Z_eit,eTemp))[i+NBI*IND_T] = Ztemp[i+1];

    CatchDL(listTemp, IND_T, eVarCopy);

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, eTemp),nDimF));
    double *tot = REAL(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));
    ////PrintValue(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));

    double result = 0.0;
    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
            //result = result + fabs(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            result = result + (totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T])*(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            //Rprintf("%12.6f ",result);
    }
    //result = result + fabs(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    result = result + (tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T])*(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    //Rprintf("ccc");
    //Rprintf("%12.6f \n",result);
    //Rprintf("result %f \n",result);


    UNPROTECT(4);

    return result;

}
}


extern "C" {

double BioEcoPar::fxTAC_F_customReport(double *x) //cas report d'effort
{
    SEXP listTemp, nDimF, nDim;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(g_nbdsFM[ind_f+nbF*0]*x[ind_f+1],0.0),effortIni[ind_f]);
            g_nbdsFM[ind_f+nbF*1] = effortIni[ind_f] - g_nbdsFM[ind_f+nbF*0];
        }
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];


        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *g_Fothi = REAL(VECTOR_ELT(VECTOR_ELT(eVarCopy, e), 44));
                int ni = length(getListElement(getListElement(listTemp, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) g_Fothi[ag + ni*IND_T] = fmax2(g_Fothi[ag + ni*IND_T]*x[nbF+1],0.0);
            }
         }

    }


    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    PROTECT(nDim = allocVector(INTSXP,4));
    int *nd = INTEGER(nDim); nd[0] = 0;  nd[1] = 0; nd[2] = 0; nd[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, eTemp),nDimF));
    double *tot = REAL(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));
    ////PrintValue(aggregObj(VECTOR_ELT(out_Y_eit, eTemp),nDim));

    double result = 0.0;
    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
            //result = result + fabs(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            result = result + (totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T])*(totF[ind_f + nbF*IND_T]-TAC_byFleet[ind_f + (nbF+1)*IND_T]);
            //Rprintf("%12.6f ",result);
    }
    //result = result + fabs(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    result = result + (tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T])*(tot[IND_T]-TAC_byFleet[nbF + (nbF+1)*IND_T]);
    //Rprintf("ccc");
    //Rprintf("%12.6f \n",result);


    UNPROTECT(4);

    return result;

}
}


extern "C" {

int BioEcoPar::MinimizeF(double **p, double y[], int ndim, double ftol)
{
	int i,nfunc,j;//,ndim=3;
	//float *x,*y,**p;

	double *x=NRvector(1,NP);
	//y=NRvector(1,4);
	//p=NRmatrix(1,4,1,3);

	BEfn1_F foo = &BioEcoPar::func;

	for (i=1;i<=MP;i++) {
		for (j=1;j<=NP;j++)
			x[j]=p[i][j]=(i == (j+1) ? 1.0 : 0.0);
		y[i]=(this->*foo)(x);
	}

	amoeba(foo, p,y,ndim,ftol,&nfunc);
	//Rprintf("\nNumber of function evaluations: %3d\n",nfunc);
	//Rprintf("Vertices of final 3-d simplex and\n");
	//Rprintf("function values at the vertices:\n\n");
	Rprintf("%3s %10s %12s %12s %14s\n\n",
		"i","x[i]","y[i]","z[i]","function");
	for (i=1;i<=MP;i++) {
		//Rprintf("%3d ",i);
		for (j=1;j<=NP;j++) Rprintf("%12.6f ",p[i][j]);
		//Rprintf("%12.6f\n",y[i]);
	}
	//Rprintf("\nTrue minimum is at (0.5,0.6,0.7)\n");
	//free_matrix(p,1,MP,1,NP);
	//free_vector(y,1,MP);
	free_vector(x,1,NP);
	return 0;
}

}

//original 'GestionF' à conserver

//extern "C" {
//
//int BioEcoPar::GestionF(double **p, double y[], int ndim, double ftol, int ind_t)
//{
//
//    if (ind_t<delay) {
//
//    } else {
//
//    IND_T = ind_t;
//
//	int i,nfunc,j;
//
//	double *x=NRvector(1,ndim);
//	//y=NRvector(1,4);
//	//p=NRmatrix(1,4,1,3);
//
//	BEfn1_F foo = &BioEcoPar::fxTAC_F;
//
//	for (i=1;i<=(ndim+1);i++) {
//		for (j=1;j<=ndim;j++)
//			x[j]=p[i][j]=1+(i == (j+1) ? 0.1 : -0.1);
//		y[i]=(this->*foo)(x);
//	}
//
//	amoeba(foo, p,y,ndim,ftol,&nfunc);
//	//Rprintf("\nNumber of function evaluations: %3d\n",nfunc);
//	//Rprintf("Vertices of final 3-d simplex and\n");
//	//Rprintf("function values at the vertices:\n\n");
//	//Rprintf("%3s %10s %12s %12s %14s\n\n",
//	//	"i","x[i]","y[i]","z[i]","function");
//	//for (i=1;i<=(ndim+1);i++) {
//	//	//Rprintf("%3d ",i);
//	//	for (j=1;j<=ndim;j++) //Rprintf("%12.6f ",p[i][j]);
//	//	//Rprintf("%12.6f\n",y[i]);
//	//}
//	//Rprintf("\nTrue minimum is at (0.5,0.6,0.7)\n");
//
//	free_vector(x,1,ndim);
//
//	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
//    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));
//    double *nbvFM_G = REAL(getListElement(FList, "nbv_f_m"));
//    double *nbvF_G = REAL(getListElement(FList, "nbv_f"));
//
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        if (var==1) nbdsF_G[ind_f] = fmax2(nbdsF_G[ind_f]*p[nbF+2][ind_f+1],0.0);
//        if (var==2) nbvF_G[ind_f] = fmax2(nbvF_G[ind_f]*p[nbF+2][ind_f+1],0.0);
//
//        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {
//
//            if (var==1) nbdsFM_G[ind_f+nbF*ind_m] = fmax2(nbdsFM_G[ind_f+nbF*ind_m]*p[nbF+2][ind_f+1],0.0);
//            if (var==2) nbvFM_G[ind_f+nbF*ind_m] = fmax2(nbvFM_G[ind_f+nbF*ind_m]*p[nbF+2][ind_f+1],0.0);
//
//         if (ind_m==0 & ind_f==0) {
//
//            for (int e = 0 ; e < nbE ; e++){
//
//                double *Fothi_G = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
//                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
//                for (int ag = 0; ag < ni; ag++) Fothi_G[ag + ni*IND_T] = fmax2(Fothi_G[ag + ni*IND_T]*p[nbF+2][nbF+1],0.0);
//            }
//         }
//        }
//    }
//    }
//	return 0;
//}
//
//}


//custom Cst

extern "C" {

int BioEcoPar::GestionF(double **p, double y[], int ndim, double ftol, int ind_t)
{

    if (ind_t<delay) {

    } else {

    IND_T = ind_t;

	int i,nfunc,j;

	double *x=NRvector(1,ndim);
	//y=NRvector(1,4);
	//p=NRmatrix(1,4,1,3);

	BEfn1_F foo = &BioEcoPar::fxTAC_F_customCst;

	for (i=1;i<=(ndim+1);i++) {
		for (j=1;j<=ndim;j++)
			x[j]=p[i][j]=1+(i == (j+1) ? 0.1 : -0.1);
		y[i]=(this->*foo)(x);
	}

	amoeba(foo, p,y,ndim,ftol,&nfunc);

    ////Rprintf("Time %i\n",ind_t);
	////Rprintf("END--------------------------------\n");
	////Rprintf("\nNumber of function evaluations: %3d\n",nfunc);
	////Rprintf("Vertices of final 3-d simplex and\n");
	////Rprintf("function values at the vertices:\n\n");
	////Rprintf("%3s %10s %12s %12s %14s\n\n",
	////	"i","x[i]","y[i]","z[i]","function");
	////for (i=1;i<=(ndim+1);i++) {
	////	//Rprintf("%3d ",i);
	////	for (j=1;j<=ndim;j++) //Rprintf("%12.6f ",p[i][j]);
	////	//Rprintf("%12.6f\n",y[i]);
	////}
	////Rprintf("\nTrue minimum is at (0.5,0.6,0.7)\n");

	free_vector(x,1,ndim);

    double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(nbdsFM_G[ind_f+nbF*0]*p[nbF+2][ind_f+1],0.0),effortIni[ind_f]-nbdsFM_G[ind_f+nbF*1]);
        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];

        if (ind_f==0) {

            for (int e = 0 ; e < nbE ; e++){

                double *Fothi_G = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
                for (int ag = 0; ag < ni; ag++) Fothi_G[ag + ni*IND_T] = fmax2(Fothi_G[ag + ni*IND_T]*p[nbF+2][nbF+1],0.0);
            }
        }

    }

    }

	return 0;
}

}



//custom Report

//extern "C" {
//
//int BioEcoPar::GestionF(double **p, double y[], int ndim, double ftol, int ind_t)
//{
//
//    if (ind_t<delay) {
//
//    } else {
//
//    IND_T = ind_t;
//
//	int i,nfunc,j;
//
//	double *x=NRvector(1,ndim);
//	//y=NRvector(1,4);
//	//p=NRmatrix(1,4,1,3);
//
//	BEfn1_F foo = &BioEcoPar::fxTAC_F_customReport;
//
//	for (i=1;i<=(ndim+1);i++) {
//		for (j=1;j<=ndim;j++)
//			x[j]=p[i][j]=1+(i == (j+1) ? 0.1 : -0.1);
//		y[i]=(this->*foo)(x);
//	}
//
//	amoeba(foo, p,y,ndim,ftol,&nfunc);
//	//Rprintf("\nNumber of function evaluations: %3d\n",nfunc);
//	//Rprintf("Vertices of final 3-d simplex and\n");
//	//Rprintf("function values at the vertices:\n\n");
//	//Rprintf("%3s %10s %12s %12s %14s\n\n",
//	//	"i","x[i]","y[i]","z[i]","function");
//	//for (i=1;i<=(ndim+1);i++) {
//	//	//Rprintf("%3d ",i);
//	//	for (j=1;j<=ndim;j++) //Rprintf("%12.6f ",p[i][j]);
//	//	//Rprintf("%12.6f\n",y[i]);
//	//}
//	//Rprintf("\nTrue minimum is at (0.5,0.6,0.7)\n");
//
//	free_vector(x,1,ndim);
//
//    double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
//    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        if (var==1) {
//            nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(nbdsFM_G[ind_f+nbF*0]*p[nbF+2][ind_f+1],0.0),effortIni[ind_f]);
//            nbdsFM_G[ind_f+nbF*1] = effortIni[ind_f] - nbdsFM_G[ind_f+nbF*0];
//        }
//        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];
//
//
//        if (ind_f==0) {
//
//            for (int e = 0 ; e < nbE ; e++){
//
//                double *Fothi_G = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e), 44));
//                int ni = length(getListElement(getListElement(list, CHAR(STRING_ELT(sppList,e))), "modI"));
//                for (int ag = 0; ag < ni; ag++) Fothi_G[ag + ni*IND_T] = fmax2(Fothi_G[ag + ni*IND_T]*p[nbF+2][nbF+1],0.0);
//            }
//        }
//    }
//
//    }
//
//	return 0;
//}
//
//}


/* (C) Copr. 1986-92 Numerical Recipes Software *pA24. */
//------------------------------------------------------------------------------------------------------




//------------------------------------------
// Module 'Report d'effort' selon une pondération des ratio profit par métier et effort par métier anticipés
//------------------------------------------

extern "C" {

void BioEcoPar::FleetBehav(SEXP list, int ind_t, SEXP paramBehav) //ind_t>0
{

    SEXP Flist, nbds_f, nbds_f_m, fmtBhv, muBhv, alphaBhv, RTBS_f_m;

    PROTECT(Flist = getListElement(list, "Fleet"));
    PROTECT(nbds_f = getListElement(Flist, "nbds_f"));
    PROTECT(nbds_f_m = getListElement(Flist, "nbds_f_m"));
    PROTECT(fmtBhv = getListElement(paramBehav, "FMT"));
    PROTECT(muBhv = getListElement(paramBehav, "MU"));
    PROTECT(alphaBhv = getListElement(paramBehav, "ALPHA"));

    double *r_nbds_f = REAL(nbds_f), *r_nbds_f_m = REAL(nbds_f_m);
    int typeBhv = INTEGER(getListElement(paramBehav, "type"))[0];
    int posMuBhv = INTEGER(getListElement(paramBehav, "MUpos"))[0];
    bool isPos = (posMuBhv==1);

 //type n°1 : pas de report d'effort. Intervention sur l'effort au niveau flottille-métier via la matrice FMT
 // qui opère additivement, avec redressement en cas d'effort résultant négatif ou supérieur à 365 sommé sur les métiers
 // L'effort au niveau flottille est ensuite réévalué par agrégation du niveau flottille-métier

    if ((typeBhv==1) & (fmtBhv != NULL)) {

       double *r_fmtBhv = REAL(fmtBhv);

       for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        double sumEff_byF = 0.0;

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if (!ISNA(r_nbds_f_m[ind_f + nbF*ind_m])) {

                r_nbds_f_m[ind_f + nbF*ind_m] = fmax2(r_nbds_f_m[ind_f + nbF*ind_m] + r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t],0.0); //NA+...=NA et max(NA,0)=NA
                sumEff_byF = sumEff_byF + r_nbds_f_m[ind_f + nbF*ind_m];

            }

        }

        //correction

        if (sumEff_byF>365.0) {

          for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

           r_nbds_f_m[ind_f + nbF*ind_m] = r_nbds_f_m[ind_f + nbF*ind_m]*365/sumEff_byF;

          }

        }

        // niveau flottille

        r_nbds_f[ind_f] = fmin2(sumEff_byF,365.0);

       }
    }


 //type n°2 : reports d'effort pilotés. Intervention sur les métiers par flottille avec report conditionné par une matrice FMT
 // de type :   | xx  xx   1 -0.5 -0.5   xx |
 //             | xx 0.7 0.3   xx -0.2 -0.8 |
 //             | ...                       |
 //
 // La quantité brute de report par flottille-métier est ensuite évaluée par multiplication de FMT par un vecteur MU de dimension nbF
 // MU est contraint pour que les reports soient cohérents


    if ((typeBhv==2) & (fmtBhv != NULL) & (muBhv != NULL)) {

       double *r_fmtBhv = REAL(fmtBhv), *r_muBhv = REAL(muBhv);

       for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

           //détermination de la validité de MU_f et correction le cas échéant

        double mu_limSup=-1.0, mu_limInf=0.0, finalMu=0.0;

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if (!ISNA(r_nbds_f_m[ind_f + nbF*ind_m])) {

                if (mu_limSup<0) { //première évaluation
                    if (r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]>0) {
                       mu_limSup = (365-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                       if (!isPos) mu_limInf = (0-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                    } else {
                       if (r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]<0) {
                        mu_limSup = (0-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                        if (!isPos) mu_limInf = (365-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t];
                       }
                    }
                } else {
                    if (r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]>0) {
                       mu_limSup = fmin2(mu_limSup , (365-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]);
                       if (!isPos) mu_limInf = fmax2(mu_limInf , (0-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]);
                    } else {
                       if (r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]<0) {
                        mu_limSup = fmin2(mu_limSup , (0-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]);
                        if (!isPos) mu_limInf = fmax2(mu_limInf , (365-r_nbds_f_m[ind_f + nbF*ind_m])/r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]);
                       }
                    }
                }
            }
        }

        mu_limSup = fmax2(mu_limSup,0.0);

        finalMu = fmax2(fmin2(r_muBhv[ind_f + nbF*ind_t],mu_limSup),mu_limInf);

        //calcul

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if (!ISNA(r_nbds_f_m[ind_f + nbF*ind_m]))

                r_nbds_f_m[ind_f + nbF*ind_m] = r_nbds_f_m[ind_f + nbF*ind_m] + r_fmtBhv[ind_f + nbF*ind_m + nbF*nbMe*ind_t]*finalMu;

        }

        //normalement, pas besoin de réévaluer nbds_f car la conservation de l'effort est assurée par la méthodo
       }
    }




 //type n°3 : report d'effort orienté par pondération des ratio de profit et d'effort de l'année précédente (cf P. Marchal).

    if ((typeBhv==3) & (ind_t>0) & (alphaBhv != NULL)) {

        if (ecodcf==0) {
            PROTECT(RTBS_f_m = VECTOR_ELT(out_Eco,10));
        } else {
            PROTECT(RTBS_f_m = VECTOR_ELT(out_EcoDCF,44));
        }

        double *r_RTBS_f_m = REAL(RTBS_f_m), *r_alphaBhv = REAL(alphaBhv);

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

            r_alphaBhv[ind_f + nbF*ind_t] = fmax2(fmin2(r_alphaBhv[ind_f + nbF*ind_t],1.0),0.0);

            double totalRTBS_f = 0.0, totalEff_f = 0.0;

            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

                if (!ISNA(r_RTBS_f_m[ind_f + nbF*ind_m + nbF*nbMe*(ind_t-1)]))

                    totalRTBS_f = totalRTBS_f + fmax2(r_RTBS_f_m[ind_f + nbF*ind_m + nbF*nbMe*(ind_t-1)],0.0);

            }

            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

                if (!ISNA(r_nbds_f_m[ind_f + nbF*ind_m])) {

                    if (totalRTBS_f==0.0) {

                        r_nbds_f_m[ind_f + nbF*ind_m] = 0.0;

                    } else {

                        r_nbds_f_m[ind_f + nbF*ind_m] = r_nbds_f[ind_f] *
                                ((r_alphaBhv[ind_f + nbF*ind_t] * fmax2(r_RTBS_f_m[ind_f + nbF*ind_m + nbF*nbMe*(ind_t-1)],0.0) / totalRTBS_f) +
                                ((1 - r_alphaBhv[ind_f + nbF*ind_t]) * r_nbds_f_m[ind_f + nbF*ind_m] / r_nbds_f[ind_f]));

                        totalEff_f = totalEff_f + r_nbds_f_m[ind_f + nbF*ind_m];
                    }
                }

            }

            r_nbds_f[ind_f] = totalEff_f; //=0 si totalRTBS_f=0
        }

        UNPROTECT(1);

    }



    UNPROTECT(6);
}
}





//------------------------------------------
// Module 'Echange de quotas'
//------------------------------------------

extern "C" {

double BioEcoPar::fxMaxProf_FT(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));

    double initVal = 0.0;
    double *gcfF;

        if ((var==1) & (g_nbdsF[IND_F]>0)) {initVal = g_nbdsF[IND_F]; g_nbdsF[IND_F] = fmin2(fmax2(x[1],1),350);}
        if ((var==2) & (g_nbvF[IND_F]>0)) {initVal = g_nbvF[IND_F]; g_nbvF[IND_F] = fmin2(fmax2(x[1],1),350);}

        for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {

            if ((var==1) & (initVal>0)) g_nbdsFM[IND_F+nbF*ind_m] = g_nbdsFM[IND_F+nbF*ind_m]*g_nbdsF[IND_F]/initVal;
            if ((var==2) & (initVal>0)) g_nbvFM[IND_F+nbF*ind_m] = g_nbvFM[IND_F+nbF*ind_m]*g_nbvF[IND_F]/initVal;

        }

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);

    Marche(listTemp, IND_T);


        EcoDCF(listTemp, IND_T, EcoIndCopy[4], drCopy);

        gcfF = REAL(VECTOR_ELT(out_EcoDCF, 20));


    //Rprintf("GCF %f \n",gcfF[IND_F + nbF*IND_T]);

    //calcul de l'indicateur de profit à optimiser
    //OUT@output$gcf_f[indF,indT]-pxQ[indT]*(sum(OUT@outputSp$Li$Sole_commune[indF,,,indT],na.rm=TRUE)-TAC_f_t[indF,1])

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

    double result = 0.0;
    result = gcfF[IND_F + nbF*IND_T]*g_nbvF[IND_F] - PxQ * (totF[IND_F + nbF*IND_T] - TAC_byFleet[IND_F + (nbF+1)*IND_T]);


    UNPROTECT(3);

    return (-1*result);

}
}


extern "C" {

double BioEcoPar::fxMaxProf_FT_customCst(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));

    double *gcfF;

    //for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) g_nbdsFM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),effortIni[IND_F]-g_nbdsFM[IND_F+nbF*1]);
        if (var==1) g_nbdsF[IND_F] = g_nbdsFM[IND_F+nbF*0] + g_nbdsFM[IND_F+nbF*1];

//    //Rprintf("O %f \n",x[ind_f+1]);
//    //Rprintf("A %f \n",g_nbdsFM[ind_f+nbF*0]);
//    //Rprintf("B %f \n",g_nbdsFM[ind_f+nbF*1]);
//    //Rprintf("C %f \n",g_nbdsF[ind_f]);
//    //Rprintf("D %f \n",effortIni[ind_f]);
//    //Rprintf("F %i \n",ind_f);

    //}

    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);

    Marche(listTemp, IND_T);


        EcoDCF(listTemp, IND_T, EcoIndCopy[4], drCopy);

        gcfF = REAL(VECTOR_ELT(out_EcoDCF, 20));


    //Rprintf("GCF %f \n",gcfF[IND_F + nbF*IND_T]);

    //calcul de l'indicateur de profit à optimiser
    //OUT@output$gcf_f[indF,indT]-pxQ[indT]*(sum(OUT@outputSp$Li$Sole_commune[indF,,,indT],na.rm=TRUE)-TAC_f_t[indF,1])

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

    double result = 0.0;
    result = gcfF[IND_F + nbF*IND_T]*g_nbvF[IND_F] - PxQ * (totF[IND_F + nbF*IND_T] - TAC_byFleet[IND_F + (nbF+1)*IND_T]);
    //Rprintf("A %f \n",TAC_byFleet[IND_F + (nbF+1)*IND_T]);
    //Rprintf("B %f \n",gcfF[IND_F + nbF*IND_T]);
    //Rprintf("C %f \n",g_nbvF[IND_F]);
    //Rprintf("D %f \n",totF[IND_F + nbF*IND_T]);

    UNPROTECT(3);

    return (-1*result);

}
}




extern "C" {

double BioEcoPar::fxMaxProf_FT_customReport(double *x) //attention : l'indexation de x commence à 1 et non 0
{
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
    double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));

    double *gcfF;

    //for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) {
            g_nbdsFM[IND_F+nbF*0] = fmin2(fmax2(x[1],0.0),effortIni[IND_F]);
            g_nbdsFM[IND_F+nbF*1] = effortIni[IND_F] - g_nbdsFM[IND_F+nbF*0];
        }
        if (var==1) g_nbdsF[IND_F] = g_nbdsFM[IND_F+nbF*0] + g_nbdsFM[IND_F+nbF*1];

    //}


    Mortalite(listTemp, IND_T, eVarCopy);
    DynamicPop(listTemp, IND_T, eVarCopy,true);
    CatchDL(listTemp, IND_T, eVarCopy);

    Marche(listTemp, IND_T);


        EcoDCF(listTemp, IND_T, EcoIndCopy[4], drCopy);

        gcfF = REAL(VECTOR_ELT(out_EcoDCF, 20));


    //Rprintf("GCF %f \n",gcfF[IND_F + nbF*IND_T]);

    //calcul de l'indicateur de profit à optimiser
    //OUT@output$gcf_f[indF,indT]-pxQ[indT]*(sum(OUT@outputSp$Li$Sole_commune[indF,,,indT],na.rm=TRUE)-TAC_f_t[indF,1])

    PROTECT(nDimF = allocVector(INTSXP,4));
    int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
    double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

    double result = 0.0;
    result = gcfF[IND_F + nbF*IND_T]*g_nbvF[IND_F] - PxQ * (totF[IND_F + nbF*IND_T] - TAC_byFleet[IND_F + (nbF+1)*IND_T]);


    UNPROTECT(3);

    return (-1*result);

}
}




//extern "C" {
//
//int BioEcoPar::QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
//{
//
//    if (ind_t<delay) {
//
//    } else {
//
//    IND_T = ind_t;
//    PxQ = pxQuIni;
//    spQ = spp;
//
//	int nfunc;
//	int ITquotaExch = 20;
//
//    //Rprintf("TIME %i \n",IND_T);
//	//on déclare q et z nécessaire à la procédure d'optimisation
//
//	double **q = NRmatrix(1,2,1,1);
//	double *z = NRvector(1,2);
//	double *x = NRvector(1,1);
//    double *multF = NRvector(1,nbF);
//
//	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)
//
//    for (int IT = 0 ; IT < ITquotaExch ; IT++){
//
//        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
//    //Rprintf("IT %i \n",IT);
//
//    if (IT==5) lambda = lambda/6;
//    if (IT==10) lambda = lambda/6;
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        IND_F = ind_f;
//
////        x[1]=1;
////        //Rprintf("Val : %f ",(this->*foo2)(x));
////        x[1]=50;
////        //Rprintf("%f ",(this->*foo2)(x));
////        x[1]=125;
////        //Rprintf("%f ",(this->*foo2)(x));
////        x[1]=200;
////        //Rprintf("%f ",(this->*foo2)(x));
////        x[1]=350;
////        //Rprintf("%f \n",(this->*foo2)(x));
//
//        q[1][1]=x[1]=175;
//        z[1]=(this->*foo2)(x);
//        q[2][1]=x[1]=120;
//        z[2]=(this->*foo2)(x);
//
//        amoeba(foo2, q,z,1,ftol,&nfunc);
//
//        multF[ind_f+1] = q[2][1];
//
////        //Rprintf("Mult %f \n",multF[ind_f+1]);
//
//        }
//
//        //2ème étape : redéfinition de PxQ
//
//        SEXP listTemp, nDimF;
//
//        PROTECT(listTemp = duplicate(list));
//        PROTECT(eVarCopy = duplicate(eVar));
//
//        double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
//        double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
//        double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
//        double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));
//
//        double initVal = 0.0;
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//            if (var==1 & g_nbdsF[ind_f]>0) {initVal = g_nbdsF[ind_f] ; g_nbdsF[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//            if (var==2 & g_nbvF[ind_f]>0) {initVal = g_nbvF[ind_f] ; g_nbvF[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//
//            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {
//
//                if (var==1 & initVal>0) g_nbdsFM[ind_f+nbF*ind_m] = g_nbdsFM[ind_f+nbF*ind_m]*g_nbdsF[ind_f]/initVal;
//                if (var==2 & initVal>0) g_nbvFM[ind_f+nbF*ind_m] = g_nbvFM[ind_f+nbF*ind_m]*g_nbvF[ind_f]/initVal;
//
//            }
//        }
//
//        Mortalite(listTemp, IND_T, eVarCopy,0);
//        DynamicPop(listTemp, IND_T, eVarCopy,0);
//        CatchDL(listTemp, IND_T, eVarCopy,0);
//        Mortalite(listTemp, IND_T, eVarCopy,1);
//        DynamicPop(listTemp, IND_T, eVarCopy,1);
//        CatchDL(listTemp, IND_T, eVarCopy,1);
//        Mortalite(listTemp, IND_T, eVarCopy,2);
//        DynamicPop(listTemp, IND_T, eVarCopy,2);
//        CatchDL(listTemp, IND_T, eVarCopy,2);
//        Mortalite(listTemp, IND_T, eVarCopy,3);
//        DynamicPop(listTemp, IND_T, eVarCopy,3);
//        CatchDL(listTemp, IND_T, eVarCopy,3);
//
//        PROTECT(nDimF = allocVector(INTSXP,4));
//        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
//        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));
//
//            //calcul de diffLQ
//        double diffLQ = 0.0;
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + (nbF+1)*IND_T]);
//
//        }
//
////        //Rprintf("\n");
//        //Rprintf("diffLQ %f \n",diffLQ);
////
//        //Rprintf("PxQ_1 %f ",PxQ);
//
//        PxQ = fmax2(pxQuMin,fmin2(PxQ + lambda*diffLQ,pxQuMax));
//
//        //Rprintf("PxQ_2 %f \n",PxQ);
//        //... et on recommence
//
//        UNPROTECT(3);
//    }
//
//
//	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
//    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));
//    double *nbvFM_G = REAL(getListElement(FList, "nbv_f_m"));
//    double *nbvF_G = REAL(getListElement(FList, "nbv_f"));
//
//    double initVal2 = 0.0;
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//            if (var==1 & nbdsF_G[ind_f]>0) {initVal2 = nbdsF_G[ind_f] ; nbdsF_G[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//            if (var==2 & nbvF_G[ind_f]>0) {initVal2 = nbvF_G[ind_f] ; nbvF_G[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//
//            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {
//
//                if (var==1 & initVal2>0) nbdsFM_G[ind_f+nbF*ind_m] = nbdsFM_G[ind_f+nbF*ind_m]*nbdsF_G[ind_f]/initVal2;
//                if (var==2 & initVal2>0) nbvFM_G[ind_f+nbF*ind_m] = nbvFM_G[ind_f+nbF*ind_m]*nbvF_G[ind_f]/initVal2;
//
//            }
//        }
//
//    free_matrix(q,1,2,1,1);
//	free_vector(z,1,2);
//	free_vector(x,1,1);
//    free_vector(multF,1,nbF);
//
//
//    }
//
//	return 0;
//}
//
//}



//
////version sans algorithme d'optimisation (hypothèse de fonction de cout linéaire --> solutions en coin)
//
//extern "C" {
//
//int BioEcoPar::QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
//{
//
//    if (ind_t<delay) {
//
//    } else {
//
//    IND_T = ind_t;
//    PxQ = pxQuIni;
//    spQ = spp;
//
//	int ITquotaExch = 30;
//
//    //Rprintf("TIME %i \n",IND_T);
//
//    double *multF = NRvector(1,nbF);
//    double *z = NRvector(1,2);
//    double *x = NRvector(1,1);
//
//    bool GoOn = true;
//
//	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)
//
//    double DIFF = 0.0;
//    int IT = 0;
//
//    while (GoOn) {
//
//    //for (int IT = 0 ; IT < ITquotaExch ; IT++){
//
//        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
//    //Rprintf("IT %i \n",IT);
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        IND_F = ind_f;
//
//        x[1]=1.0;
//        z[1]=(this->*foo2)(x);//Rprintf("z1 %f \n",z[1]);
//        x[1]=350.0;
//        z[2]=(this->*foo2)(x);//Rprintf("z2 %f \n",z[2]);
//
//        if (z[1]>z[2]) multF[ind_f+1] = 350.0; else multF[ind_f+1] = 1.0;
//
//        //if (IT==0)  //Rprintf("Mult %f \n",multF[ind_f+1]);
//
//        }
//
//        //2ème étape : redéfinition de PxQ
//
//        SEXP listTemp, nDimF;
//
//        PROTECT(listTemp = duplicate(list));
//        PROTECT(eVarCopy = duplicate(eVar));
//
//        double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
//        double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
//        double *g_nbvFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f_m"));
//        double *g_nbvF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbv_f"));
//
//        double initVal = 0.0;
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
//
//            if (var==1 & g_nbdsF[ind_f]>0) {initVal = g_nbdsF[ind_f] ; g_nbdsF[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//            if (var==2 & g_nbvF[ind_f]>0) {initVal = g_nbvF[ind_f] ; g_nbvF[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//
//            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {
//
//                if (var==1 & initVal>0) g_nbdsFM[ind_f+nbF*ind_m] = g_nbdsFM[ind_f+nbF*ind_m]*g_nbdsF[ind_f]/initVal;
//                if (var==2 & initVal>0) g_nbvFM[ind_f+nbF*ind_m] = g_nbvFM[ind_f+nbF*ind_m]*g_nbvF[ind_f]/initVal;
//
//            }
//        }
//
//        Mortalite(listTemp, IND_T, eVarCopy,0);
//        DynamicPop(listTemp, IND_T, eVarCopy,0);
//        CatchDL(listTemp, IND_T, eVarCopy,0);
//        Mortalite(listTemp, IND_T, eVarCopy,1);
//        DynamicPop(listTemp, IND_T, eVarCopy,1);
//        CatchDL(listTemp, IND_T, eVarCopy,1);
//        Mortalite(listTemp, IND_T, eVarCopy,2);
//        DynamicPop(listTemp, IND_T, eVarCopy,2);
//        CatchDL(listTemp, IND_T, eVarCopy,2);
//        Mortalite(listTemp, IND_T, eVarCopy,3);
//        DynamicPop(listTemp, IND_T, eVarCopy,3);
//        CatchDL(listTemp, IND_T, eVarCopy,3);
//
//        PROTECT(nDimF = allocVector(INTSXP,4));
//        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
//        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));
//
//            //calcul de diffLQ
//        double diffLQ = 0.0;
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + (nbF+1)*IND_T]);
//
//        }
//
//        if ((DIFF*diffLQ)<0) lambda = lambda/3; //ie si DIFF et diffLQ de signe différent
//
//        if ((diffLQ<=0) & ((lambda<0.002) | (IT>ITquotaExch))) GoOn = false; //on ne s'arrête que si diffLQ<=0 (Quota respecté)
//
//        IT++;
//
//        DIFF = diffLQ;
//
////        //Rprintf("\n");
//        //Rprintf("diffLQ %f \n",diffLQ);
////
//        //Rprintf("PxQ_1 %f ",PxQ);
//
//        PxQ = fmax2(pxQuMin,fmin2(PxQ + lambda*diffLQ,pxQuMax));
//
//        //Rprintf("PxQ_2 %f \n",PxQ);
//        //Rprintf("lambda %f \n",lambda);
//        //... et on recommence
//
//        UNPROTECT(3);
//
//    }
//
//
//    double *pxQuot = REAL(VECTOR_ELT(out_PQuot_et,spQ));
//    pxQuot[ind_t] = PxQ;
//
//	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
//    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));
//    double *nbvFM_G = REAL(getListElement(FList, "nbv_f_m"));
//    double *nbvF_G = REAL(getListElement(FList, "nbv_f"));
//
//    double initVal2 = 0.0;
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//            if (var==1 & nbdsF_G[ind_f]>0) {initVal2 = nbdsF_G[ind_f] ; nbdsF_G[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//            if (var==2 & nbvF_G[ind_f]>0) {initVal2 = nbvF_G[ind_f] ; nbvF_G[ind_f] = fmin2(fmax2(multF[ind_f+1],1),350);}
//
//            for (int ind_m = 0 ; ind_m< nbMe ; ind_m++) {
//
//                if (var==1 & initVal2>0) nbdsFM_G[ind_f+nbF*ind_m] = nbdsFM_G[ind_f+nbF*ind_m]*nbdsF_G[ind_f]/initVal2;
//                if (var==2 & initVal2>0) nbvFM_G[ind_f+nbF*ind_m] = nbvFM_G[ind_f+nbF*ind_m]*nbvF_G[ind_f]/initVal2;
//
//            }
//        }
//
//    free_vector(multF,1,nbF);
//    free_vector(z,1,2);
//    free_vector(x,1,1);
//
//    }
//
//	return 0;
//}
//
//}

//---------------------------------
//
//
//
//---------------------------------

//Version customCst

extern "C" {

int BioEcoPar::QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
{

    if (ind_t<delay) {

    } else {

    FOTHoptim_use = true;

    IND_T = ind_t;
    PxQ = pxQuIni;
    spQ = spp;

	int ITquotaExch = 20;

    //Rprintf("TIME %i \n",IND_T);

    double *multF = NRvector(1,nbF);
    double *z = NRvector(1,2);
    double *x = NRvector(1,1);

    bool GoOn = true;

	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT_customCst; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)

    double DIFF = 0.0;
    int IT = 0;

    while (GoOn) {

    //for (int IT = 0 ; IT < ITquotaExch ; IT++){

        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
    //Rprintf("IT %i \n",IT);

        Zoptim_use = true;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        IND_F = ind_f;

        x[1]=1.0;
        z[1]=(this->*foo2)(x);//Rprintf("z1 %f \n",z[1]);
        x[1]=350.0;
        z[2]=(this->*foo2)(x);//Rprintf("z2 %f \n",z[2]);

        if (z[1]>z[2]) multF[ind_f+1] = 350.0; else multF[ind_f+1] = 0.0;

        //if (IT==0)  //Rprintf("Mult %f \n",multF[ind_f+1]);

        }

        //2ème étape : redéfinition de PxQ
    Zoptim_use = false;
    SEXP listTemp, nDimF;

    PROTECT(listTemp = duplicate(list));
    PROTECT(eVarCopy = duplicate(eVar));

    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]-g_nbdsFM[ind_f+nbF*1]);
        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];

    }

        Mortalite(listTemp, IND_T, eVarCopy);
        DynamicPop(listTemp, IND_T, eVarCopy,true);
        CatchDL(listTemp, IND_T, eVarCopy);

        PROTECT(nDimF = allocVector(INTSXP,4));
        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));

            //calcul de diffLQ
        double diffLQ = 0.0;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + (nbF+1)*IND_T]);

        }

        if ((DIFF*diffLQ)<0) lambda = lambda/3; //ie si DIFF et diffLQ de signe différent

        if ((diffLQ<=0) & (((diffLQ*lambda)*(diffLQ*lambda)<0.25) | (IT>ITquotaExch))) GoOn = false; //on ne s'arrête que si diffLQ<=0 (Quota respecté)

        IT++;

        DIFF = diffLQ;

//        //Rprintf("\n");
        //Rprintf("diffLQ %f \n",diffLQ);
//
        //Rprintf("PxQ_1 %f ",PxQ);

        if (diffLQ<0) {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmin2(lambda*diffLQ,-0.1),pxQuMax));
        } else {
        PxQ = fmax2(pxQuMin,fmin2(PxQ + fmax2(lambda*diffLQ,0.1),pxQuMax));
        }

        //Rprintf("PxQ_2 %f \n",PxQ);
        //Rprintf("lambda %f \n",lambda);
        //... et on recommence

        UNPROTECT(3);

    }


    double *pxQuot = REAL(VECTOR_ELT(out_PQuot_et,spQ));
    pxQuot[ind_t] = PxQ;

	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (var==1) nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]-nbdsFM_G[ind_f+nbF*1]);
        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];

    }

    free_vector(multF,1,nbF);
    free_vector(z,1,2);
    free_vector(x,1,1);

    }

	return 0;
}

}



//
////Version customReport
//
//extern "C" {
//
//int BioEcoPar::QuotaExch(double pxQuIni, double pxQuMin, double pxQuMax, double lambda, int spp, double ftol, int ind_t)
//{
//
//    if (ind_t<delay) {
//
//    } else {
//
//    FOTHoptim_use = true;
//
//    IND_T = ind_t;
//    PxQ = pxQuIni;
//    spQ = spp;
//
//	int ITquotaExch = 20;
//
//    //Rprintf("TIME %i \n",IND_T);
//
//    double *multF = NRvector(1,nbF);
//    double *z = NRvector(1,2);
//    double *x = NRvector(1,1);
//
//    bool GoOn = true;
//
//	BEfn1_F foo2 = &BioEcoPar::fxMaxProf_FT_customReport; //fonction calculant le profit d'une flottille donnée à un instant donné en fonction du prix du quota d'une espèce donnée (dépend de IND_F)
//
//    double DIFF = 0.0;
//    int IT = 0;
//
//    while (GoOn) {
//
//    //for (int IT = 0 ; IT < ITquotaExch ; IT++){
//
//        //1ère étape : maximisation du profit par l'effort par flottille en fonction de PxQ et spQ
//    //Rprintf("IT %i \n",IT);
//
//        Zoptim_use = true;
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        IND_F = ind_f;
//
//        x[1]=1.0;
//        z[1]=(this->*foo2)(x);//Rprintf("z1 %f \n",z[1]);
//        x[1]=350.0;
//        z[2]=(this->*foo2)(x);//Rprintf("z2 %f \n",z[2]);
//
//        if (z[1]>z[2]) multF[ind_f+1] = 350.0; else multF[ind_f+1] = 0.0;
//
//        //if (IT==0)  //Rprintf("Mult %f \n",multF[ind_f+1]);
//
//        }
//
//        //2ème étape : redéfinition de PxQ
//
//      Zoptim_use = false;
//        SEXP listTemp, nDimF;
//
//    PROTECT(listTemp = duplicate(list));
//    PROTECT(eVarCopy = duplicate(eVar));
//
//    double *g_nbdsFM = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f_m"));
//    double *g_nbdsF = REAL(getListElement(getListElement(listTemp, "Fleet"), "nbds_f"));
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        if (var==1) {
//            g_nbdsFM[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]);
//            g_nbdsFM[ind_f+nbF*1] = effortIni[ind_f] - g_nbdsFM[ind_f+nbF*0];
//        }
//        if (var==1) g_nbdsF[ind_f] = g_nbdsFM[ind_f+nbF*0] + g_nbdsFM[ind_f+nbF*1];
//
//    }
//
//
//        Mortalite(listTemp, IND_T, eVarCopy,0);
//        DynamicPop(listTemp, IND_T, eVarCopy,0);
//        CatchDL(listTemp, IND_T, eVarCopy,0);
//        Mortalite(listTemp, IND_T, eVarCopy,1);
//        DynamicPop(listTemp, IND_T, eVarCopy,1);
//        CatchDL(listTemp, IND_T, eVarCopy,1);
//        Mortalite(listTemp, IND_T, eVarCopy,2);
//        DynamicPop(listTemp, IND_T, eVarCopy,2);
//        CatchDL(listTemp, IND_T, eVarCopy,2);
//        Mortalite(listTemp, IND_T, eVarCopy,3);
//        DynamicPop(listTemp, IND_T, eVarCopy,3);
//        CatchDL(listTemp, IND_T, eVarCopy,3);
//
//        PROTECT(nDimF = allocVector(INTSXP,4));
//        int *ndF = INTEGER(nDimF); ndF[0] = nbF; ndF[1] = 0; ndF[2] = 0; ndF[3] = nbT;
//        double *totF = REAL(aggregObj(VECTOR_ELT(out_Y_efmit, spQ),nDimF));
//
//            //calcul de diffLQ
//        double diffLQ = 0.0;
//
//        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//         diffLQ = diffLQ + (totF[ind_f + nbF*IND_T] - TAC_byFleet[ind_f + (nbF+1)*IND_T]);
//
//        }
//
//        if ((DIFF*diffLQ)<0) lambda = lambda/3; //ie si DIFF et diffLQ de signe différent
//
//        if ((diffLQ<=0) & (((diffLQ*lambda)*(diffLQ*lambda)<0.25) | (IT>ITquotaExch))) GoOn = false; //on ne s'arrête que si diffLQ<=0 (Quota respecté)
//
//        IT++;
//
//        DIFF = diffLQ;
//
////        //Rprintf("\n");
//        //Rprintf("diffLQ %f \n",diffLQ);
////
//        //Rprintf("PxQ_1 %f ",PxQ);
//
//        if (diffLQ<0) {
//            PxQ = fmax2(pxQuMin,fmin2(PxQ + fmin2(lambda*diffLQ,-0.1),pxQuMax));
//        } else {
//            PxQ = fmax2(pxQuMin,fmin2(PxQ + fmax2(lambda*diffLQ,0.1),pxQuMax));
//        }
//
//
////        PxQ = fmax2(pxQuMin,fmin2(PxQ + lambda*diffLQ,pxQuMax));
//
//        //Rprintf("PxQ_2 %f \n",PxQ);
//        //Rprintf("lambda %f \n",lambda);
//        //... et on recommence
//
//        UNPROTECT(3);
//
//    }
//
//
//    double *pxQuot = REAL(VECTOR_ELT(out_PQuot_et,spQ));
//    pxQuot[ind_t] = PxQ;
//
//	double *nbdsFM_G = REAL(getListElement(FList, "nbds_f_m"));
//    double *nbdsF_G = REAL(getListElement(FList, "nbds_f"));
//
//    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){
//
//        if (var==1) nbdsFM_G[ind_f+nbF*0] = fmin2(fmax2(multF[ind_f+1],0.0),effortIni[ind_f]-nbdsFM_G[ind_f+nbF*1]);
//        if (var==1) nbdsF_G[ind_f] = nbdsFM_G[ind_f+nbF*0] + nbdsFM_G[ind_f+nbF*1];
//
//    }
//
//    free_vector(multF,1,nbF);
//    free_vector(z,1,2);
//    free_vector(x,1,1);
//
//    }
//
//	return 0;
//}
//
//}
//



//------------------------------------------
// Module 'Economie' DCF
//------------------------------------------

extern "C" {

void BioEcoPar::EcoDCF(SEXP list, int ind_t, int perscCalc, double dr)
{

//ofstream fichier("C:\\Users\\mmerzere\\Desktop\\test2\\testEco.txt", ios::out | ios::trunc);

//extern "C" {
//void BioEcoPar::EcoDCF(SEXP list, int ind_t, int perscCalc, double dr)
//{
//Rprintf("\nJ1\n");fichier << "J1" << endl;

    SEXP Flist;
    PROTECT(Flist = getListElement(list, "Fleet"));

    PROTECT(out_EcoDCF);

    SEXP dimCstF, DimF, dimnamesF, dimCstFM, dimCstFini, dimCstFMini, DimFM, DimFMini, dimnamesFM, dimnamesFMini; //formatage des objets résultats

    SEXP eFACTf, eFACTfm, elmt;

    SEXP    nbv_f, nbv_f_m, lc_f_m, lcd_f_m, tripLgth_f, tripLgth_f_m, nbTrip_f, nbTrip_f_m, nbds_f, nbds_f_m,
            effort1_f, effort1_f_m, effort2_f, effort2_f_m, Lref_f_m, cnb_f_m, ovcDCF_f_m, fc_f_m, vf_f_m, cshr_f_m, cshr_f, cnb_f, persc_f,
            eec_f, mwh_f, rep_f, gc_f, fixc_f, FTE_f, dep_f, ic_f, K_f, inv_f, FTE_f_m, GVLref_f_m, ue_f, ue_f_m;

    SEXP    dc_nbv_f, dc_nbv_f_m, dc_lc_f_m, dc_lcd_f_m, dc_tripLgth_f, dc_tripLgth_f_m, dc_nbTrip_f, dc_nbTrip_f_m, dc_nbds_f, dc_nbds_f_m,
            dc_effort1_f, dc_effort1_f_m, dc_effort2_f, dc_effort2_f_m, dc_Lref_f_m, dc_cnb_f_m, dc_ovcDCF_f_m, dc_fc_f_m, dc_vf_f_m, dc_cshr_f_m, dc_cshr_f, dc_cnb_f, dc_persc_f,
            dc_eec_f, dc_mwh_f, dc_rep_f, dc_gc_f, dc_fixc_f, dc_FTE_f, dc_dep_f, dc_ic_f, dc_K_f, dc_inv_f, dc_FTE_f_m, dc_GVLref_f_m, dc_ue_f, dc_ue_f_m;

    int *dCF,*dCFM,*dCFini,*dCFMini,*DF,*DFM, *DFMini;

    int     *dim_nbv_f, *dim_nbv_f_m, *dim_lc_f_m, *dim_tripLgth_f_m, *dim_nbTrip_f_m,
            *dim_Lref_f_m, *dim_cnb_f_m, *dim_ovcDCF_f_m, *dim_fc_f_m, *dim_vf_f_m, *dim_cshr_f_m, *dim_cshr_f, *dim_persc_f,
            *dim_eec_f, *dim_mwh_f, *dim_rep_f, *dim_gc_f, *dim_fixc_f, *dim_FTE_f, *dim_dep_f, *dim_ic_f, *dim_K_f, *dim_inv_f, *dim_GVLref_f_m,
            *dim_ue_f_m;

    double  *r_nbv_f, *r_nbv_f_m, *r_lc_f_m, *r_lcd_f_m, *r_tripLgth_f_m, *r_nbTrip_f_m,
            *r_Lref_f_m, *r_cnb_f_m, *r_ovcDCF_f_m, *r_fc_f_m, *r_vf_f_m, *r_cshr_f_m, *r_cshr_f, *r_persc_f,
            *r_eec_f, *r_mwh_f, *r_rep_f, *r_gc_f, *r_fixc_f, *r_FTE_f, *r_dep_f, *r_ic_f, *r_K_f, *r_inv_f, *r_GVLref_f_m;

    double  *r_ET_f_m_out,
            *r_GVLcom_f_m_e_out,*r_GVLst_f_m_e_out, *r_GVLtot_f_m_out, *r_GVLav_f_m_out, *r_GVLtot_f_out,
            *r_GVLav_f_out, *r_NGVLav_f_m_out, *r_NGVLav_f_out, *r_cnb_f_m_out, *r_cnb_f_out,
            *r_rtbs_f_m_out, *r_rtbs_f_out, *r_cshrT_f_m_out, *r_cshrT_f_out, *r_ncshr_f_out, *r_ocl_f_out, *r_cs_f_out, *r_csTot_f_out, *r_gva_f_out, *r_gvamargin_f_out,
            *r_gva_FTE_f_out, *r_ccw_f_out, *r_ccwCr_f_out, *r_wageg_f_out, *r_wagen_f_out, *r_wageg_FTE_f_out, *r_wageg_h_f_out, *r_gp_f_out, *r_gpmargin_f_out,
            *r_ncf_f_out, *r_np_f_out, *r_npmargin_f_out, *r_prof_f_out, *r_npmargin_trend_f_out, *r_ssTot_f_out, *r_ps_f_out, *r_sts_f_out, *r_BER_f_out, *r_CR_BER_f_out,
            *r_fuelEff_f_out, *r_ratio_fvol_gva_f_out, *r_ratio_gp_gva_f_out, *r_ratio_GVL_K_f_out, *r_ratio_gp_K_f_out, *r_RoFTA_f_out, *r_ROI_f_out,
            *r_ratio_np_K_f_out, *r_ratio_GVL_cnb_ue_f_out,
            *r_rtbsAct_f_out, *r_csAct_f_out, *r_gvaAct_f_out, *r_gpAct_f_out, *r_psAct_f_out, *r_stsAct_f_out;


//Rprintf("Eco 2");fichier << "Eco2" << endl;
//définition des dimensions


    PROTECT(dimnamesF = allocVector(VECSXP,2));
    PROTECT(dimnamesFM = allocVector(VECSXP,3));
    PROTECT(dimnamesFMini = allocVector(VECSXP,2));

    SET_VECTOR_ELT(dimnamesF, 0, fleetList); SET_VECTOR_ELT(dimnamesF, 1, times);
    SET_VECTOR_ELT(dimnamesFM, 0, fleetList); SET_VECTOR_ELT(dimnamesFM, 1, metierListEco); SET_VECTOR_ELT(dimnamesFM, 2, times);
    SET_VECTOR_ELT(dimnamesFMini, 0, fleetList); SET_VECTOR_ELT(dimnamesFMini, 1, metierListEco);


    PROTECT(dimCstF = allocVector(INTSXP, 4));
    PROTECT(dimCstFini = allocVector(INTSXP, 4));
    PROTECT(dimCstFM = allocVector(INTSXP, 4));
    PROTECT(dimCstFMini = allocVector(INTSXP, 4));

    dCF = INTEGER(dimCstF) ; dCF[0] = nbF; dCF[1] = 0; dCF[2] = 0; dCF[3] = nbT;
    dCFM = INTEGER(dimCstFM) ; dCFM[0] = nbF; dCFM[1] = nbMe; dCFM[2] = 0; dCFM[3] = nbT;
    dCFini = INTEGER(dimCstFini) ; dCFini[0] = nbF; dCFini[1] = 0; dCFini[2] = 0; dCFini[3] = 0;
    dCFMini = INTEGER(dimCstFMini) ; dCFMini[0] = nbF; dCFMini[1] = nbMe; dCFMini[2] = 0; dCFMini[3] = 0;


    PROTECT(DimF = allocVector(INTSXP, 2));
    PROTECT(DimFM = allocVector(INTSXP, 3));
    PROTECT(DimFMini = allocVector(INTSXP, 2));

    DF = INTEGER(DimF) ; DF[0] = nbF; DF[1] = nbT;
    DFM = INTEGER(DimFM) ; DFM[0] = nbF; DFM[1] = nbMe; DFM[2] = nbT;
    DFMini = INTEGER(DimFMini) ; DFMini[0] = nbF; DFMini[1] = nbMe;

    // facteurs des indices génériques F/FM

    PROTECT(eFACTf = iDim(dCF));
    PROTECT(eFACTfm = iDim(dCFM));

    //Rprintf("Eco 3");fichier << "Eco3" << endl;
    // protect.root -> 14

// ---> P = 14

    int *eF_f = INTEGER(eFACTf);
    int *eF_fm = INTEGER(eFACTfm);

    PROTECT(nbv_f = getListElement(Flist, "nbv_f"));                PROTECT(dc_nbv_f = iDim(INTEGER(getAttrib(nbv_f, install("DimCst"))))); //Rprintf("Eco 31");
    PROTECT(nbv_f_m = getListElement(Flist, "nbv_f_m"));            PROTECT(dc_nbv_f_m = iDim(INTEGER(getAttrib(nbv_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(lc_f_m = getListElement(Flist, "lc_f_m"));              PROTECT(dc_lc_f_m = iDim(INTEGER(getAttrib(lc_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(lcd_f_m = getListElement(Flist, "lcd_f_m"));            PROTECT(dc_lcd_f_m = iDim(INTEGER(getAttrib(lcd_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(tripLgth_f = getListElement(Flist, "tripLgth_f"));      PROTECT(dc_tripLgth_f = iDim(INTEGER(getAttrib(tripLgth_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(tripLgth_f_m = getListElement(Flist, "tripLgth_f_m"));  PROTECT(dc_tripLgth_f_m = iDim(INTEGER(getAttrib(tripLgth_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(nbTrip_f = getListElement(Flist, "nbTrip_f"));          PROTECT(dc_nbTrip_f = iDim(INTEGER(getAttrib(nbTrip_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(nbTrip_f_m = getListElement(Flist, "nbTrip_f_m"));      PROTECT(dc_nbTrip_f_m = iDim(INTEGER(getAttrib(nbTrip_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(nbds_f = getListElement(Flist, "nbds_f"));              PROTECT(dc_nbds_f = iDim(INTEGER(getAttrib(nbds_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(nbds_f_m = getListElement(Flist, "nbds_f_m"));          PROTECT(dc_nbds_f_m = iDim(INTEGER(getAttrib(nbds_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(effort1_f = getListElement(Flist, "effort1_f"));        PROTECT(dc_effort1_f = iDim(INTEGER(getAttrib(effort1_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(effort1_f_m = getListElement(Flist, "effort1_f_m"));    PROTECT(dc_effort1_f_m = iDim(INTEGER(getAttrib(effort1_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(effort2_f = getListElement(Flist, "effort2_f"));        PROTECT(dc_effort2_f = iDim(INTEGER(getAttrib(effort2_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(effort2_f_m = getListElement(Flist, "effort2_f_m"));    PROTECT(dc_effort2_f_m = iDim(INTEGER(getAttrib(effort2_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(Lref_f_m = getListElement(Flist, "Lref_f_m"));          PROTECT(dc_Lref_f_m = iDim(INTEGER(getAttrib(Lref_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(cnb_f_m = getListElement(Flist, "cnb_f_m"));            PROTECT(dc_cnb_f_m = iDim(INTEGER(getAttrib(cnb_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(ovcDCF_f_m = getListElement(Flist, "ovcDCF_f_m"));      PROTECT(dc_ovcDCF_f_m = iDim(INTEGER(getAttrib(ovcDCF_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(fc_f_m = getListElement(Flist, "fc_f_m"));              PROTECT(dc_fc_f_m = iDim(INTEGER(getAttrib(fc_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(vf_f_m = getListElement(Flist, "vf_f_m"));              PROTECT(dc_vf_f_m = iDim(INTEGER(getAttrib(vf_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(cshr_f_m = getListElement(Flist, "cshr_f_m"));          PROTECT(dc_cshr_f_m = iDim(INTEGER(getAttrib(cshr_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(cshr_f = getListElement(Flist, "cshr_f"));              PROTECT(dc_cshr_f = iDim(INTEGER(getAttrib(cshr_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(cnb_f = getListElement(Flist, "cnb_f"));                PROTECT(dc_cnb_f = iDim(INTEGER(getAttrib(cnb_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(persc_f = getListElement(Flist, "persc_f"));            PROTECT(dc_persc_f = iDim(INTEGER(getAttrib(persc_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(eec_f = getListElement(Flist, "eec_f"));                PROTECT(dc_eec_f = iDim(INTEGER(getAttrib(eec_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(mwh_f = getListElement(Flist, "mwh_f"));                PROTECT(dc_mwh_f = iDim(INTEGER(getAttrib(mwh_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(rep_f = getListElement(Flist, "rep_f"));                PROTECT(dc_rep_f = iDim(INTEGER(getAttrib(rep_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(gc_f = getListElement(Flist, "gc_f"));                  PROTECT(dc_gc_f = iDim(INTEGER(getAttrib(gc_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(fixc_f = getListElement(Flist, "fixc_f"));              PROTECT(dc_fixc_f = iDim(INTEGER(getAttrib(fixc_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(FTE_f = getListElement(Flist, "FTE_f"));                PROTECT(dc_FTE_f = iDim(INTEGER(getAttrib(FTE_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(dep_f = getListElement(Flist, "dep_f"));                PROTECT(dc_dep_f = iDim(INTEGER(getAttrib(dep_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(ic_f = getListElement(Flist, "ic_f"));                  PROTECT(dc_ic_f = iDim(INTEGER(getAttrib(ic_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(K_f = getListElement(Flist, "K_f"));                    PROTECT(dc_K_f = iDim(INTEGER(getAttrib(K_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(inv_f = getListElement(Flist, "inv_f"));                PROTECT(dc_inv_f = iDim(INTEGER(getAttrib(inv_f, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(FTE_f_m = getListElement(Flist, "FTE_f_m"));            PROTECT(dc_FTE_f_m = iDim(INTEGER(getAttrib(FTE_f_m, install("DimCst")))));//Rprintf("Eco 31");
    PROTECT(GVLref_f_m = getListElement(Flist, "GVLref_f_m"));      PROTECT(dc_GVLref_f_m = iDim(INTEGER(getAttrib(GVLref_f_m, install("DimCst")))));//Rprintf("Eco 31");

// ---> P = 14 + 35*2 = 84
//Rprintf("Eco 4");fichier << "Eco4" << endl;

    PROTECT(ue_f = NEW_NUMERIC(nbF));
    setAttrib(ue_f, R_DimSymbol, getAttrib(getListElement(Flist, "effort1_f"), R_DimSymbol));
    setAttrib(ue_f, R_DimNamesSymbol, getAttrib(getListElement(Flist, "effort1_f"), R_DimNamesSymbol));
    setAttrib(ue_f, install("DimCst"), getAttrib(getListElement(Flist, "effort1_f"), install("DimCst")));

    PROTECT(ue_f_m = NEW_NUMERIC(nbF*nbMe));
    setAttrib(ue_f_m, R_DimSymbol, getAttrib(getListElement(Flist, "effort1_f_m"), R_DimSymbol));
    setAttrib(ue_f_m, R_DimNamesSymbol, getAttrib(getListElement(Flist, "effort1_f_m"), R_DimNamesSymbol));
    setAttrib(ue_f_m, install("DimCst"), getAttrib(getListElement(Flist, "effort1_f_m"), install("DimCst")));

    double *r_ue_f = REAL(ue_f); double *reff1_f = REAL(getListElement(Flist, "effort1_f")) ; double *reff2_f = REAL(getListElement(Flist, "effort2_f"));
    double *r_ue_f_m = REAL(ue_f_m); double *reff1 = REAL(getListElement(Flist, "effort1_f_m")) ; double *reff2 = REAL(getListElement(Flist, "effort2_f_m"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
        r_ue_f[ind_f] = reff1_f[ind_f]*reff2_f[ind_f];
        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) r_ue_f_m[ind_f + nbF*ind_m] = reff1[ind_f + nbF*ind_m]*reff2[ind_f + nbF*ind_m];
    }

//Rprintf("Eco 5");fichier << "Eco5" << endl;
    PROTECT(dc_ue_f = iDim(INTEGER(getAttrib(ue_f, install("DimCst")))));
    PROTECT(dc_ue_f_m = iDim(INTEGER(getAttrib(ue_f_m, install("DimCst")))));
    dim_ue_f_m = INTEGER(dc_ue_f_m);
// ---> P = 84 + 4 = 88

    dim_nbv_f = INTEGER(dc_nbv_f);                          r_nbv_f = REAL(nbv_f);//Rprintf("Eco 51\n");
    dim_nbv_f_m = INTEGER(dc_nbv_f_m);                      r_nbv_f_m = REAL(nbv_f_m);//Rprintf("Eco 51\n");
    dim_lc_f_m = INTEGER(dc_lc_f_m);                        r_lc_f_m = REAL(lc_f_m);//Rprintf("Eco 51\n");
    /*dim_lcd_f_m = INTEGER(dc_lcd_f_m); */                 r_lcd_f_m = REAL(lcd_f_m);//Rprintf("Eco 51\n");
    //dim_tripLgth_f = INTEGER(dc_tripLgth_f);                r_tripLgth_f = REAL(tripLgth_f);//Rprintf("Eco 51\n");
    dim_tripLgth_f_m = INTEGER(dc_tripLgth_f_m);            r_tripLgth_f_m = REAL(tripLgth_f_m);//Rprintf("Eco 51\n");
    //dim_nbTrip_f = INTEGER(dc_nbTrip_f);                    r_nbTrip_f = REAL(nbTrip_f);//Rprintf("Eco 51\n");
    dim_nbTrip_f_m = INTEGER(dc_nbTrip_f_m);                r_nbTrip_f_m = REAL(nbTrip_f_m);//Rprintf("Eco 51\n");
    //dim_nbds_f = INTEGER(dc_nbds_f);                        r_nbds_f = REAL(nbds_f);//Rprintf("Eco 51\n");
    //dim_nbds_f_m = INTEGER(dc_nbds_f_m);                    r_nbds_f_m = REAL(nbds_f_m);//Rprintf("Eco 51\n");
    //dim_effort1_f = INTEGER(dc_effort1_f);                  r_effort1_f = REAL(effort1_f);//Rprintf("Eco 51\n");
    //dim_effort1_f_m = INTEGER(dc_effort1_f_m);              r_effort1_f_m = REAL(effort1_f_m);//Rprintf("Eco 51\n");
    //dim_effort2_f = INTEGER(dc_effort2_f);                  r_effort2_f = REAL(effort2_f);//Rprintf("Eco 51\n");
    //dim_effort2_f_m = INTEGER(dc_effort2_f_m);              r_effort2_f_m = REAL(effort2_f_m);//Rprintf("Eco 51\n");
    dim_Lref_f_m = INTEGER(dc_Lref_f_m);                    r_Lref_f_m = REAL(Lref_f_m);//Rprintf("Eco 51\n");
    dim_cnb_f_m = INTEGER(dc_cnb_f_m);                      r_cnb_f_m = REAL(cnb_f_m);//Rprintf("Eco 51\n");
    dim_ovcDCF_f_m = INTEGER(dc_ovcDCF_f_m);                r_ovcDCF_f_m = REAL(ovcDCF_f_m);//Rprintf("Eco 51\n");
    dim_fc_f_m = INTEGER(dc_fc_f_m);                        r_fc_f_m = REAL(fc_f_m);//Rprintf("Eco 51\n");
    dim_vf_f_m = INTEGER(dc_vf_f_m);                        r_vf_f_m = REAL(vf_f_m);//Rprintf("Eco 51\n");
    dim_cshr_f_m = INTEGER(dc_cshr_f_m);                    r_cshr_f_m = REAL(cshr_f_m);//Rprintf("Eco 51\n");
    dim_cshr_f = INTEGER(dc_cshr_f);                        r_cshr_f = REAL(cshr_f);//Rprintf("Eco 51\n");
    //dim_cnb_f = INTEGER(dc_cnb_f);                          r_cnb_f = REAL(cnb_f);//Rprintf("Eco 51\n");
    dim_persc_f = INTEGER(dc_persc_f);                      r_persc_f = REAL(persc_f);//Rprintf("Eco 51\n");
    dim_eec_f = INTEGER(dc_eec_f);                          r_eec_f = REAL(eec_f);//Rprintf("Eco 51\n");
    dim_mwh_f = INTEGER(dc_mwh_f);                          r_mwh_f = REAL(mwh_f);//Rprintf("Eco 51\n");
    dim_rep_f = INTEGER(dc_rep_f);                          r_rep_f = REAL(rep_f);//Rprintf("Eco 51\n");
    dim_gc_f = INTEGER(dc_gc_f);                            r_gc_f = REAL(gc_f);//Rprintf("Eco 51\n");
    dim_fixc_f = INTEGER(dc_fixc_f);                        r_fixc_f = REAL(fixc_f);//Rprintf("Eco 51\n");
    dim_FTE_f = INTEGER(dc_FTE_f);                          r_FTE_f = REAL(FTE_f);//Rprintf("Eco 51\n");
    dim_dep_f = INTEGER(dc_dep_f);                          r_dep_f = REAL(dep_f);//Rprintf("Eco 51\n");
    dim_ic_f = INTEGER(dc_ic_f);                            r_ic_f = REAL(ic_f);//Rprintf("Eco 51\n");
    dim_K_f = INTEGER(dc_K_f);                              r_K_f = REAL(K_f);//Rprintf("Eco 51\n");
    dim_inv_f = INTEGER(dc_inv_f);                          r_inv_f = REAL(inv_f);//Rprintf("Eco 51\n");
    //dim_FTE_f_m = INTEGER(dc_FTE_f_m);                    r_FTE_f_m = REAL(FTE_f_m);//Rprintf("Eco 51\n");
    dim_GVLref_f_m = INTEGER(dc_GVLref_f_m);                r_GVLref_f_m = REAL(GVLref_f_m);//Rprintf("Eco 51\n");


    int nbC=0;
    //int nbI=0;

//Rprintf("Eco 6");fichier << "Eco6" << endl;

if (ind_t==0) {

    SEXP ETini_f_m, fvolue_f_m, ovcDCFue_f_m, rtbsIni_f, ccwr_f, opersc_f, eco_names,
         GVLcom_f_m_e_out, GVLcom_f_m_eStat_out, GVLcom_f_m_e, GVLst_f_m_e_out, GVLst_f_m_eStat_out, GVLst_f_m_e, GVL_f_m_e_out, GVL_f_m_eStat_out, GVLtot_f_m_e,
         GVLtot_f_m_out, GVLav_f_m_out, GVLtot_f_out, GVLav_f_out, NGVLav_f_m_out, NGVLav_f_out, ET_f_m_out,
         cnb_f_m_out, cnb_f_out, rtbs_f_m_out, rtbs_f_out, rtbsAct_f_out, cshrT_f_m_out, cshrT_f_out, ncshr_f_out, ocl_f_out, cs_f_out, csAct_f_out, csTot_f_out,
         gva_f_out, gvaAct_f_out, gvamargin_f_out, gva_FTE_f_out, ccw_f_out, ccwCr_f_out, wageg_f_out, wagen_f_out, wageg_FTE_f_out, wageg_h_f_out,
         gp_f_out, gpAct_f_out, gpmargin_f_out, ncf_f_out, np_f_out, npmargin_f_out, prof_f_out, npmargin_trend_f_out,
         ssTot_f_out, ps_f_out, psAct_f_out, sts_f_out, stsAct_f_out, BER_f_out, CR_BER_f_out, fuelEff_f_out,
         ratio_fvol_gva_f_out, ratio_gp_gva_f_out, ratio_GVL_K_f_out, ratio_gp_K_f_out, RoFTA_f_out, ROI_f_out, ratio_np_K_f_out, ratio_GVL_cnb_ue_f_out;

    double  *r_ETini_f_m, *r_fvolue_f_m, *r_ovcDCFue_f_m, *r_rtbsIni_f, *r_ccwr_f, *r_opersc_f;

//-------------------------
// Stade préliminaire (temps initial)
//-------------------------

    PROTECT(ETini_f_m = NEW_NUMERIC(nbF*nbMe));                 r_ETini_f_m = REAL(ETini_f_m);
    PROTECT(fvolue_f_m = NEW_NUMERIC(nbF*nbMe));                r_fvolue_f_m = REAL(fvolue_f_m);
    PROTECT(ovcDCFue_f_m = NEW_NUMERIC(nbF*nbMe));              r_ovcDCFue_f_m = REAL(ovcDCFue_f_m);
    PROTECT(rtbsIni_f = NEW_NUMERIC(nbF));                      r_rtbsIni_f = REAL(rtbsIni_f);
    PROTECT(ccwr_f = NEW_NUMERIC(nbF));                         r_ccwr_f = REAL(ccwr_f);
    PROTECT(opersc_f = NEW_NUMERIC(nbF));                       r_opersc_f = REAL(opersc_f);
// ---> P(t0) = 6
//Rprintf("Eco 7");fichier << "Eco7" << endl;

// on crée ETini
//    double *rnbTrip = REAL(getListElement(Flist, "nbTrip_f_m"));
//    double *rtripLgth = REAL(getListElement(Flist, "tripLgth_f_m"));
//    double *rnbv = REAL(getListElement(Flist, "nbv_f_m"));
//    double *rcnb = REAL(getListElement(Flist, "cnb_f_m"));

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++) {
        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) {
            r_ETini_f_m[ind_f + nbF*ind_m] =
               finite(
               r_Lref_f_m[ind_f*dim_Lref_f_m[0] + ind_m*dim_Lref_f_m[1] + 0*dim_Lref_f_m[2] + ind_t*dim_Lref_f_m[3]] /
               (r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]] *
                r_nbTrip_f_m[ind_f*dim_nbTrip_f_m[0] + ind_m*dim_nbTrip_f_m[1] + 0*dim_nbTrip_f_m[2] + ind_t*dim_nbTrip_f_m[3]] *
                r_tripLgth_f_m[ind_f*dim_tripLgth_f_m[0] + ind_m*dim_tripLgth_f_m[1] + 0*dim_tripLgth_f_m[2] + ind_t*dim_tripLgth_f_m[3]] *
                r_cnb_f_m[ind_f*dim_cnb_f_m[0] + ind_m*dim_cnb_f_m[1] + 0*dim_cnb_f_m[2] + ind_t*dim_cnb_f_m[3]]));
            //if (ISNA(r_ETini_f_m[ind_f + nbF*ind_m])) r_ETini_f_m[ind_f + nbF*ind_m] = 0.0;
        }
    }


//Rprintf("Eco 8");fichier << "Eco8" << endl;
 for (int e = 0 ; e < nbE+nbEstat ; e++) {

        if (e<nbE) {
         PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e))));
        } else {
         PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e-nbE))));
        }

        //if (e<nbE) nbI = length(getListElement(elmt, "modI"));
        if (e<nbE) nbC = length(getListElement(elmt, "modC"));

        PROTECT(GVLtot_f_m_e = NEW_NUMERIC(nbF*nbMe*nbT));
        PROTECT(GVLcom_f_m_e = NEW_NUMERIC(nbF*nbMe*nbT));
        PROTECT(GVLst_f_m_e = NEW_NUMERIC(nbF*nbMe*nbT));

        double *r_GVLtot_f_m_e = REAL(GVLtot_f_m_e);
        double *r_GVLcom_f_m_e = REAL(GVLcom_f_m_e);
        double *r_GVLst_f_m_e = REAL(GVLst_f_m_e);

        double *r_Lbio_f_m_e ,  *r_P_f_m_e, r_Pst_e=NA_REAL, *r_LD_efmc=&NA_REAL, *r_statLDor_efm=&NA_REAL, *r_statLDst_efm=&NA_REAL, r_theta_e;
        int *dim_Lbio_e, *dim_P_e;
//Rprintf("Eco 9");fichier << "Eco9" << endl;
        if (e<nbE) {
            r_Lbio_f_m_e = REAL(VECTOR_ELT(out_L_efmct, e));
            //r_Lbio_f_sum_e = REAL(aggregObj(VECTOR_ELT(out_L_efmct, e),dimCstF));
            r_P_f_m_e = REAL(VECTOR_ELT(out_P_t, e));
            r_LD_efmc = REAL(VECTOR_ELT(out_LD_efmc, e));
            r_theta_e = REAL(getListElement(elmt, "theta_e"))[0];
            dim_Lbio_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_L_efmct, e), install("DimCst")))));
            dim_P_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_P_t, e), install("DimCst")))));
        } else {
            r_Lbio_f_m_e = REAL(VECTOR_ELT(out_Lstat, e-nbE));
            //r_Lbio_f_sum_e = REAL(aggregObj(VECTOR_ELT(out_Lstat, e-nbE),dimCstF));
            r_P_f_m_e = REAL(VECTOR_ELT(out_Pstat, e-nbE));
            r_statLDor_efm = REAL(VECTOR_ELT(out_statLDor_efm, e-nbE));
            r_statLDst_efm = REAL(VECTOR_ELT(out_statLDst_efm, e-nbE));
            r_theta_e = REAL(getListElement(elmt, "theta_e"))[0];
            dim_Lbio_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_Lstat, e-nbE), install("DimCst")))));
            dim_P_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_Pstat, e-nbE), install("DimCst")))));
            r_Pst_e = REAL(getListElement(elmt, "Pst_e"))[0];
        }

        //------------------------------
        //équations de la table "p"
        //------------------------------
//Rprintf("Eco 10");fichier << "Eco10" << endl;

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){   //on rappelle ici que ind_t est en fait égal à 0

    //double countGVLtotf = 0.0; //pour sommer GVLtot_f_m_e sur les métiers

            for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

         //-- 3. GVLtot_f_m_e

    double countCom = 0.0;

    if (e<nbE) {

             if (ISNA(r_theta_e)) r_theta_e = 1.0;

             for (int ind_c = 0 ; ind_c < (nbC-1) ; ind_c++){ //sur les classes non sous-tailles

                if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]]))
                    r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;

                if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {

                countCom = countCom +
                  r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                  r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]];

             }

             }

             if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]]))
                    r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;

             //if (ISNA(r_theta_e)) r_theta_e = 1.0;

             if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {

                  r_GVLst_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                   r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                   r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                   r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                   r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]];

             } else {

                  r_GVLst_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = 0.0;

             }

               //if (e==1 & ind_f==0 & ind_m==4) PrintValue(ETini_f_m_out);

    } else {

        if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]]))
                    r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;

        if (ISNA(r_theta_e)) r_theta_e = 1.0;

        if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {

            countCom = r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                  r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 *
                  finite(r_statLDor_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]) ;

        }

        if (!ISNA(r_statLDst_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {

        if (ISNA(r_Pst_e)) r_Pst_e = 0.0;

            r_GVLst_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                  r_Pst_e * 1000 * r_statLDst_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]];

        }

    }

            r_GVLcom_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = countCom;
            r_GVLtot_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
            r_GVLcom_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] +
            r_GVLst_f_m_e[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]];

//Rprintf("Eco 11");fichier << "Eco11" << endl;


        }
        }

        //on formatte le(s) résultat(s) et on les intègre à 'eVar'
//Rprintf("Eco 13");fichier << "Eco13" << endl;
        setAttrib(GVLtot_f_m_e, R_DimSymbol, DimFM);
        setAttrib(GVLtot_f_m_e, R_DimNamesSymbol, dimnamesFM);
        setAttrib(GVLtot_f_m_e, install("DimCst"), dimCstFM);
        if (e<nbE) SET_VECTOR_ELT(VECTOR_ELT(eVar, e), 41, GVLtot_f_m_e); else SET_VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE), 1, GVLtot_f_m_e);

        setAttrib(GVLcom_f_m_e, R_DimSymbol, DimFM);
        setAttrib(GVLcom_f_m_e, R_DimNamesSymbol, dimnamesFM);
        setAttrib(GVLcom_f_m_e, install("DimCst"), dimCstFM);
        if (e<nbE) SET_VECTOR_ELT(VECTOR_ELT(eVar, e), 228, GVLcom_f_m_e); else SET_VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE), 8, GVLcom_f_m_e);

        setAttrib(GVLst_f_m_e, R_DimSymbol, DimFM);
        setAttrib(GVLst_f_m_e, R_DimNamesSymbol, dimnamesFM);
        setAttrib(GVLst_f_m_e, install("DimCst"), dimCstFM);
        if (e<nbE) SET_VECTOR_ELT(VECTOR_ELT(eVar, e), 229, GVLst_f_m_e); else SET_VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE), 9, GVLst_f_m_e);

//Rprintf("Eco 14");fichier << "Eco14" << endl;
        UNPROTECT(4);

}


//Rprintf("Eco 8");fichier << "Eco8" << endl;

    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

       double countRTBSnum = 0.0;

       for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

        countRTBSnum = countRTBSnum + finite(r_GVLref_f_m[ind_f*dim_GVLref_f_m[0] + ind_m*dim_GVLref_f_m[1] + 0*dim_GVLref_f_m[2] + ind_t*dim_GVLref_f_m[3]] *
                                      r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]] *
                                      (1 - finite(r_lc_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]]))) -
                                      finite(r_ovcDCF_f_m[ind_f*dim_ovcDCF_f_m[0] + ind_m*dim_ovcDCF_f_m[1] + 0*dim_ovcDCF_f_m[2] + ind_t*dim_ovcDCF_f_m[3]]) -
                                      finite(r_fc_f_m[ind_f*dim_fc_f_m[0] + ind_m*dim_fc_f_m[1] + 0*dim_fc_f_m[2] + ind_t*dim_fc_f_m[3]]);

      //-- 4. fvolue_f_m

        r_fvolue_f_m[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                    finite( r_fc_f_m[ind_f*dim_fc_f_m[0] + ind_m*dim_fc_f_m[1] + 0*dim_fc_f_m[2] + ind_t*dim_fc_f_m[3]] /
                    (r_vf_f_m[ind_f*dim_vf_f_m[0] + ind_m*dim_vf_f_m[1] + 0*dim_vf_f_m[2] + ind_t*dim_vf_f_m[3]] *
                    r_ue_f_m[ind_f + ind_m*nbF]) );

      //-- 5. ovcDCFue_f_m

        r_ovcDCFue_f_m[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                    finite( r_ovcDCF_f_m[ind_f*dim_ovcDCF_f_m[0] + ind_m*dim_ovcDCF_f_m[1] + 0*dim_ovcDCF_f_m[2] + ind_t*dim_ovcDCF_f_m[3]] /
                    r_ue_f_m[ind_f + ind_m*nbF] );

        }

//Rprintf("Eco 18");fichier << "Eco18" << endl;

        //-- 6. rtbsIni_f

            r_rtbsIni_f[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                  countRTBSnum / r_nbv_f[ind_f*dim_nbv_f[0] + 0*dim_nbv_f[1] + 0*dim_nbv_f[2] + ind_t*dim_nbv_f[3]];


        //-- 7. ccwr_f

            r_ccwr_f[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                r_persc_f[ind_f*dim_persc_f[0] + 0*dim_persc_f[1] + 0*dim_persc_f[2] + ind_t*dim_persc_f[3]] /
                r_rtbsIni_f[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

        //-- 8. opersc_f

            r_opersc_f[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                r_persc_f[ind_f*dim_persc_f[0] + 0*dim_persc_f[1] + 0*dim_persc_f[2] + ind_t*dim_persc_f[3]] -
                (0.01 * r_cshr_f[ind_f*dim_cshr_f[0] + 0*dim_cshr_f[1] + 0*dim_cshr_f[2] + ind_t*dim_cshr_f[3]] * //cshr_f en %
                r_rtbsIni_f[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]]);

    }

//Rprintf("Eco 19\n");fichier << "Eco19" << endl;

//on formatte le(s) résultat(s) et on intègre à fVar

        setAttrib(fvolue_f_m, R_DimSymbol, DimFMini);
        setAttrib(fvolue_f_m, R_DimNamesSymbol, dimnamesFMini);
        setAttrib(fvolue_f_m, install("DimCst"), dimCstFMini);
        SET_VECTOR_ELT(fVar, 4, fvolue_f_m);

        setAttrib(ovcDCFue_f_m, R_DimSymbol, DimFMini);
        setAttrib(ovcDCFue_f_m, R_DimNamesSymbol, dimnamesFMini);
        setAttrib(ovcDCFue_f_m, install("DimCst"), dimCstFMini);
        SET_VECTOR_ELT(fVar, 10, ovcDCFue_f_m);

        setAttrib(ccwr_f, R_NamesSymbol, fleetList);
        setAttrib(ccwr_f, install("DimCst"), dimCstFini);
        SET_VECTOR_ELT(fVar, 27, ccwr_f);

        setAttrib(opersc_f, R_NamesSymbol,  fleetList);
        setAttrib(opersc_f, install("DimCst"), dimCstFini);
        SET_VECTOR_ELT(fVar, 28, opersc_f);

        SET_VECTOR_ELT(fVar, 31, rtbsIni_f);

        SET_VECTOR_ELT(fVar, 33, ETini_f_m);
//Rprintf("Eco 20\n");fichier << "Eco20" << endl;
//enfin, on initialise l'output


    PROTECT(GVLcom_f_m_e_out = allocVector(VECSXP, nbE));
    setAttrib(GVLcom_f_m_e_out, R_NamesSymbol, sppList);
    SET_VECTOR_ELT(out_EcoDCF, 0, GVLcom_f_m_e_out);//Rprintf("Eco 20\n");

    PROTECT(GVLcom_f_m_eStat_out = allocVector(VECSXP, nbEstat));
    setAttrib(GVLcom_f_m_eStat_out, R_NamesSymbol, sppListStat);
    SET_VECTOR_ELT(out_EcoDCF, 1, GVLcom_f_m_eStat_out);//Rprintf("Eco 20\n");

    PROTECT(GVLst_f_m_e_out = allocVector(VECSXP, nbE));
    setAttrib(GVLst_f_m_e_out, R_NamesSymbol, sppList);
    SET_VECTOR_ELT(out_EcoDCF, 2, GVLst_f_m_e_out);//Rprintf("Eco 20\n");

    PROTECT(GVLst_f_m_eStat_out = allocVector(VECSXP, nbEstat));
    setAttrib(GVLst_f_m_eStat_out, R_NamesSymbol, sppListStat);
    SET_VECTOR_ELT(out_EcoDCF, 3, GVLst_f_m_eStat_out);//Rprintf("Eco 20\n");

    PROTECT(GVL_f_m_e_out = allocVector(VECSXP, nbE));
    setAttrib(GVL_f_m_e_out, R_NamesSymbol, sppList);
    SET_VECTOR_ELT(out_EcoDCF, 4, GVL_f_m_e_out);//Rprintf("Eco 20\n");

    PROTECT(GVL_f_m_eStat_out = allocVector(VECSXP, nbEstat));
    setAttrib(GVL_f_m_eStat_out, R_NamesSymbol, sppListStat);
    SET_VECTOR_ELT(out_EcoDCF, 5, GVL_f_m_eStat_out);//Rprintf("Eco 20\n");

    PROTECT(GVLtot_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(GVLtot_f_m_out, R_DimSymbol, DimFM);
    setAttrib(GVLtot_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(GVLtot_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 6, GVLtot_f_m_out);//Rprintf("Eco 20\n");

    PROTECT(GVLav_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(GVLav_f_m_out, R_DimSymbol, DimFM);
    setAttrib(GVLav_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(GVLav_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 7, GVLav_f_m_out);//Rprintf("Eco 20\n");

    PROTECT(GVLtot_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(GVLtot_f_out, R_DimSymbol, DimF);
    setAttrib(GVLtot_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(GVLtot_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 8, GVLtot_f_out);//Rprintf("Eco 20\n");

    PROTECT(GVLav_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(GVLav_f_out, R_DimSymbol, DimF);
    setAttrib(GVLav_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(GVLav_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 9, GVLav_f_out);//Rprintf("Eco 20\n");

    PROTECT(NGVLav_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(NGVLav_f_m_out, R_DimSymbol, DimFM);
    setAttrib(NGVLav_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(NGVLav_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 10, NGVLav_f_m_out);//Rprintf("Eco 20\n");

    PROTECT(NGVLav_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(NGVLav_f_out, R_DimSymbol, DimF);
    setAttrib(NGVLav_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(NGVLav_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 11, NGVLav_f_out);//Rprintf("Eco 20\n");

    PROTECT(ET_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(ET_f_m_out, R_DimSymbol, DimFM);
    setAttrib(ET_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(ET_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 12, ET_f_m_out);//Rprintf("Eco 20\n");

    PROTECT(cnb_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(cnb_f_m_out, R_DimSymbol, DimFM);
    setAttrib(cnb_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(cnb_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 13, cnb_f_m_out);//Rprintf("Eco 20\n");

    PROTECT(cnb_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(cnb_f_out, R_DimSymbol, DimF);
    setAttrib(cnb_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(cnb_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 14, cnb_f_out);//Rprintf("Eco 20\n");

    PROTECT(rtbs_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(rtbs_f_m_out, R_DimSymbol, DimFM);
    setAttrib(rtbs_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(rtbs_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 15, rtbs_f_m_out);

    PROTECT(rtbs_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(rtbs_f_out, R_DimSymbol, DimF);
    setAttrib(rtbs_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(rtbs_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 16, rtbs_f_out);//Rprintf("Eco 20\n");

    PROTECT(rtbsAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(rtbsAct_f_out, R_DimSymbol, DimF);
    setAttrib(rtbsAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(rtbsAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 17, rtbsAct_f_out);

    PROTECT(cshrT_f_m_out = NEW_NUMERIC(nbF*nbMe*nbT));
    setAttrib(cshrT_f_m_out, R_DimSymbol, DimFM);
    setAttrib(cshrT_f_m_out, R_DimNamesSymbol, dimnamesFM);
    setAttrib(cshrT_f_m_out, install("DimCst"), dimCstFM);
    SET_VECTOR_ELT(out_EcoDCF, 18, cshrT_f_m_out);

    PROTECT(cshrT_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(cshrT_f_out, R_DimSymbol, DimF);
    setAttrib(cshrT_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(cshrT_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 19, cshrT_f_out);//Rprintf("Eco 20\n");

    PROTECT(ncshr_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ncshr_f_out, R_DimSymbol, DimF);
    setAttrib(ncshr_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ncshr_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 20, ncshr_f_out);//Rprintf("Eco 20\n");

    PROTECT(ocl_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ocl_f_out, R_DimSymbol, DimF);
    setAttrib(ocl_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ocl_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 21, ocl_f_out);//Rprintf("Eco 20\n");

    PROTECT(cs_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(cs_f_out, R_DimSymbol, DimF);
    setAttrib(cs_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(cs_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 22, cs_f_out);//Rprintf("Eco 20\n");

    PROTECT(csAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(csAct_f_out, R_DimSymbol, DimF);
    setAttrib(csAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(csAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 23, csAct_f_out);

    PROTECT(csTot_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(csTot_f_out, R_DimSymbol, DimF);
    setAttrib(csTot_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(csTot_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 24, csTot_f_out);

    PROTECT(gva_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gva_f_out, R_DimSymbol, DimF);
    setAttrib(gva_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gva_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 25, gva_f_out);//Rprintf("Eco 20\n");

    PROTECT(gvaAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gvaAct_f_out, R_DimSymbol, DimF);
    setAttrib(gvaAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gvaAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 26, gvaAct_f_out);//Rprintf("Eco 20\n");

    PROTECT(gvamargin_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gvamargin_f_out, R_DimSymbol, DimF);
    setAttrib(gvamargin_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gvamargin_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 27, gvamargin_f_out);//Rprintf("Eco 20\n");

    PROTECT(gva_FTE_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gva_FTE_f_out, R_DimSymbol, DimF);
    setAttrib(gva_FTE_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gva_FTE_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 28, gva_FTE_f_out);//Rprintf("Eco 20\n");

    PROTECT(ccw_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ccw_f_out, R_DimSymbol, DimF);
    setAttrib(ccw_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ccw_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 29, ccw_f_out);//Rprintf("Eco 20\n");

    PROTECT(ccwCr_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ccwCr_f_out, R_DimSymbol, DimF);
    setAttrib(ccwCr_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ccwCr_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 30, ccwCr_f_out);//Rprintf("Eco 20\n");

    PROTECT(wageg_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(wageg_f_out, R_DimSymbol, DimF);
    setAttrib(wageg_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(wageg_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 31, wageg_f_out);//Rprintf("Eco 20\n");

    PROTECT(wagen_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(wagen_f_out, R_DimSymbol, DimF);
    setAttrib(wagen_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(wagen_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 32, wagen_f_out);//Rprintf("Eco 20\n");

    PROTECT(wageg_FTE_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(wageg_FTE_f_out, R_DimSymbol, DimF);
    setAttrib(wageg_FTE_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(wageg_FTE_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 33, wageg_FTE_f_out);//Rprintf("Eco 20\n");

    PROTECT(wageg_h_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(wageg_h_f_out, R_DimSymbol, DimF);
    setAttrib(wageg_h_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(wageg_h_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 34, wageg_h_f_out);//Rprintf("Eco 20\n");

    PROTECT(gp_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gp_f_out, R_DimSymbol, DimF);
    setAttrib(gp_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gp_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 35, gp_f_out);//Rprintf("Eco 20\n");

    PROTECT(gpAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gpAct_f_out, R_DimSymbol, DimF);
    setAttrib(gpAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gpAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 36, gpAct_f_out);//Rprintf("Eco 20\n");

    PROTECT(gpmargin_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(gpmargin_f_out, R_DimSymbol, DimF);
    setAttrib(gpmargin_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(gpmargin_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 37, gpmargin_f_out);//Rprintf("Eco 20\n");

    PROTECT(ncf_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ncf_f_out, R_DimSymbol, DimF);
    setAttrib(ncf_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ncf_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 38, ncf_f_out);//Rprintf("Eco 20\n");

    PROTECT(np_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(np_f_out, R_DimSymbol, DimF);
    setAttrib(np_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(np_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 39, np_f_out);//Rprintf("Eco 20\n");

    PROTECT(npmargin_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(npmargin_f_out, R_DimSymbol, DimF);
    setAttrib(npmargin_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(npmargin_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 40, npmargin_f_out);//Rprintf("Eco 20\n");

    PROTECT(prof_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(prof_f_out, R_DimSymbol, DimF);
    setAttrib(prof_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(prof_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 41, prof_f_out);//Rprintf("Eco 20\n");

    PROTECT(npmargin_trend_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(npmargin_trend_f_out, R_DimSymbol, DimF);
    setAttrib(npmargin_trend_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(npmargin_trend_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 42, npmargin_trend_f_out);//Rprintf("Eco 20\n");

    PROTECT(ssTot_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ssTot_f_out, R_DimSymbol, DimF);
    setAttrib(ssTot_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ssTot_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 43, ssTot_f_out);

    PROTECT(ps_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ps_f_out, R_DimSymbol, DimF);
    setAttrib(ps_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ps_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 44, ps_f_out);

    PROTECT(psAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(psAct_f_out, R_DimSymbol, DimF);
    setAttrib(psAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(psAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 45, psAct_f_out);

    PROTECT(sts_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(sts_f_out, R_DimSymbol, DimF);
    setAttrib(sts_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(sts_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 46, sts_f_out);

    PROTECT(stsAct_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(stsAct_f_out, R_DimSymbol, DimF);
    setAttrib(stsAct_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(stsAct_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 47, stsAct_f_out);

    PROTECT(BER_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(BER_f_out, R_DimSymbol, DimF);
    setAttrib(BER_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(BER_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 48, BER_f_out);

    PROTECT(CR_BER_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(CR_BER_f_out, R_DimSymbol, DimF);
    setAttrib(CR_BER_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(CR_BER_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 49, CR_BER_f_out);

    PROTECT(fuelEff_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(fuelEff_f_out, R_DimSymbol, DimF);
    setAttrib(fuelEff_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(fuelEff_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 50, fuelEff_f_out);

    PROTECT(ratio_fvol_gva_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_fvol_gva_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_fvol_gva_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_fvol_gva_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 51, ratio_fvol_gva_f_out);

    PROTECT(ratio_gp_gva_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_gp_gva_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_gp_gva_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_gp_gva_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 52, ratio_gp_gva_f_out);

    PROTECT(ratio_GVL_K_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_GVL_K_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_GVL_K_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_GVL_K_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 53, ratio_GVL_K_f_out);

    PROTECT(ratio_gp_K_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_gp_K_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_gp_K_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_gp_K_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 54, ratio_gp_K_f_out);

    PROTECT(RoFTA_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(RoFTA_f_out, R_DimSymbol, DimF);
    setAttrib(RoFTA_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(RoFTA_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 55, RoFTA_f_out);

    PROTECT(ROI_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ROI_f_out, R_DimSymbol, DimF);
    setAttrib(ROI_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ROI_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 56, ROI_f_out);

    PROTECT(ratio_np_K_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_np_K_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_np_K_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_np_K_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 57, ratio_np_K_f_out);

    PROTECT(ratio_GVL_cnb_ue_f_out = NEW_NUMERIC(nbF*nbT));
    setAttrib(ratio_GVL_cnb_ue_f_out, R_DimSymbol, DimF);
    setAttrib(ratio_GVL_cnb_ue_f_out, R_DimNamesSymbol, dimnamesF);
    setAttrib(ratio_GVL_cnb_ue_f_out, install("DimCst"), dimCstF);
    SET_VECTOR_ELT(out_EcoDCF, 58, ratio_GVL_cnb_ue_f_out);

//Rprintf("Eco 20.8\n");fichier << "Eco 20.8" << endl;
    //on nomme les éléments de out_EcoDCF




    const char *namesEco[59] = {"GVLcom_f_m_e_out","GVLcom_f_m_eStat_out","GVLst_f_m_e_out","GVLst_f_m_eStat_out","GVL_f_m_e_out","GVL_f_m_eStat_out","GVLtot_f_m_out",
                                "GVLav_f_m_out","GVLtot_f_out","GVLav_f_out","NGVLav_f_m_out","NGVLav_f_out","ET_f_m_out","cnb_f_m_out","cnb_f_out","rtbs_f_m_out","rtbs_f_out",
                                "rtbsAct_f_out","cshrT_f_m_out","cshrT_f_out","ncshr_f_out","ocl_f_out","cs_f_out","csAct_f_out","csTot_f_out","gva_f_out","gvaAct_f_out",
                                "gvamargin_f_out","gva_FTE_f_out","ccw_f_out","ccwCr_f_out","wageg_f_out","wagen_f_out","wageg_FTE_f_out","wageg_h_f_out","gp_f_out",
                                "gpAct_f_out","gpmargin_f_out","ncf_f_out","np_f_out","npmargin_f_out","prof_f_out","npmargin_trend_f_out","ssTot_f_out","ps_f_out",
                                "psAct_f_out","sts_f_out","stsAct_f_out","BER_f_out","CR_BER_f_out","fuelEff_f_out","ratio_fvol_gva_f_out","ratio_gp_gva_f_out",
                                "ratio_GVL_K_f_out","ratio_gp_K_f_out","RoFTA_f_out","ROI_f_out","ratio_np_K_f_out","ratio_GVL_cnb_ue_f_out"};

//Rprintf("Eco 20.9\n");fichier << "Eco 20.9" << endl;
    PROTECT(eco_names = allocVector(STRSXP, 59));

    for(int ct = 0; ct < 59; ct++) SET_STRING_ELT(eco_names, ct, mkChar(namesEco[ct])); //PrintValue(out_EcoDCF);
//Rprintf("Eco 20.95\n");fichier << "Eco20.95" << endl;
    setAttrib(out_EcoDCF, R_NamesSymbol, eco_names);
//Rprintf("Eco 21\n");fichier << "Eco21" << endl;

// ---> P(t0) = 6 + 60 = 66
}


//on importe les outputs afin de les mettre à jour à l'instant ind_t

//    r_GVLcom_f_m_e_out = REAL(VECTOR_ELT(out_EcoDCF, 0));//Rprintf("Eco 20\n");
//    r_GVLcom_f_m_eStat_out = REAL(VECTOR_ELT(out_EcoDCF, 1));//Rprintf("Eco 20\n");
//    r_GVLst_f_m_e_out = REAL(VECTOR_ELT(out_EcoDCF, 2));//Rprintf("Eco 20\n");
//    r_GVLst_f_m_eStat_out = REAL(VECTOR_ELT(out_EcoDCF, 3));//Rprintf("Eco 20\n");
//    r_GVL_f_m_e_out = REAL(VECTOR_ELT(out_EcoDCF, 4));//Rprintf("Eco 20\n");
//    r_GVL_f_m_eStat_out = REAL(VECTOR_ELT(out_EcoDCF, 5));//Rprintf("Eco 20\n");
    r_GVLtot_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 6));//Rprintf("Eco 20\n");
    r_GVLav_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 7));//Rprintf("Eco 20\n");
    r_GVLtot_f_out = REAL(VECTOR_ELT(out_EcoDCF, 8));//Rprintf("Eco 20\n");
    r_GVLav_f_out = REAL(VECTOR_ELT(out_EcoDCF, 9));//Rprintf("Eco 20\n");
    r_NGVLav_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 10));//Rprintf("Eco 20\n");
    r_NGVLav_f_out = REAL(VECTOR_ELT(out_EcoDCF, 11));//Rprintf("Eco 20\n");
    r_ET_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 12));//Rprintf("Eco 20\n");
    r_cnb_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 13));//Rprintf("Eco 20\n");
    r_cnb_f_out = REAL(VECTOR_ELT(out_EcoDCF, 14));//Rprintf("Eco 20\n");
    r_rtbs_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 15));
    r_rtbs_f_out = REAL(VECTOR_ELT(out_EcoDCF, 16));//Rprintf("Eco 20\n");
    r_rtbsAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 17));
    r_cshrT_f_m_out = REAL(VECTOR_ELT(out_EcoDCF, 18));
    r_cshrT_f_out = REAL(VECTOR_ELT(out_EcoDCF, 19));//Rprintf("Eco 20\n");
    r_ncshr_f_out = REAL(VECTOR_ELT(out_EcoDCF, 20));//Rprintf("Eco 20\n");
    r_ocl_f_out = REAL(VECTOR_ELT(out_EcoDCF, 21));//Rprintf("Eco 20\n");
    r_cs_f_out = REAL(VECTOR_ELT(out_EcoDCF, 22));//Rprintf("Eco 20\n");
    r_csAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 23));
    r_csTot_f_out = REAL(VECTOR_ELT(out_EcoDCF, 24));
    r_gva_f_out = REAL(VECTOR_ELT(out_EcoDCF, 25));//Rprintf("Eco 20\n");
    r_gvaAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 26));//Rprintf("Eco 20\n");
    r_gvamargin_f_out = REAL(VECTOR_ELT(out_EcoDCF, 27));//Rprintf("Eco 20\n");
    r_gva_FTE_f_out = REAL(VECTOR_ELT(out_EcoDCF, 28));//Rprintf("Eco 20\n");
    r_ccw_f_out = REAL(VECTOR_ELT(out_EcoDCF, 29));//Rprintf("Eco 20\n");
    r_ccwCr_f_out = REAL(VECTOR_ELT(out_EcoDCF, 30));//Rprintf("Eco 20\n");
    r_wageg_f_out = REAL(VECTOR_ELT(out_EcoDCF, 31));//Rprintf("Eco 20\n");
    r_wagen_f_out = REAL(VECTOR_ELT(out_EcoDCF, 32));//Rprintf("Eco 20\n");
    r_wageg_FTE_f_out = REAL(VECTOR_ELT(out_EcoDCF, 33));//Rprintf("Eco 20\n");
    r_wageg_h_f_out = REAL(VECTOR_ELT(out_EcoDCF, 34));//Rprintf("Eco 20\n");
    r_gp_f_out = REAL(VECTOR_ELT(out_EcoDCF, 35));//Rprintf("Eco 20\n");
    r_gpAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 36));//Rprintf("Eco 20\n");
    r_gpmargin_f_out = REAL(VECTOR_ELT(out_EcoDCF, 37));//Rprintf("Eco 20\n");
    r_ncf_f_out = REAL(VECTOR_ELT(out_EcoDCF, 38));//Rprintf("Eco 20\n");
    r_np_f_out = REAL(VECTOR_ELT(out_EcoDCF, 39));//Rprintf("Eco 20\n");
    r_npmargin_f_out = REAL(VECTOR_ELT(out_EcoDCF, 40));//Rprintf("Eco 20\n");
    r_prof_f_out = REAL(VECTOR_ELT(out_EcoDCF, 41));//Rprintf("Eco 20\n");
    r_npmargin_trend_f_out = REAL(VECTOR_ELT(out_EcoDCF, 42));//Rprintf("Eco 20\n");
    r_ssTot_f_out = REAL(VECTOR_ELT(out_EcoDCF, 43));
    r_ps_f_out = REAL(VECTOR_ELT(out_EcoDCF, 44));
    r_psAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 45));
    r_sts_f_out = REAL(VECTOR_ELT(out_EcoDCF, 46));
    r_stsAct_f_out = REAL(VECTOR_ELT(out_EcoDCF, 47));
    r_BER_f_out = REAL(VECTOR_ELT(out_EcoDCF, 48));
    r_CR_BER_f_out = REAL(VECTOR_ELT(out_EcoDCF, 49));
    r_fuelEff_f_out = REAL(VECTOR_ELT(out_EcoDCF, 50));
    r_ratio_fvol_gva_f_out = REAL(VECTOR_ELT(out_EcoDCF, 51));
    r_ratio_gp_gva_f_out = REAL(VECTOR_ELT(out_EcoDCF, 52));
    r_ratio_GVL_K_f_out = REAL(VECTOR_ELT(out_EcoDCF, 53));
    r_ratio_gp_K_f_out = REAL(VECTOR_ELT(out_EcoDCF, 54));
    r_RoFTA_f_out = REAL(VECTOR_ELT(out_EcoDCF, 55));
    r_ROI_f_out = REAL(VECTOR_ELT(out_EcoDCF, 56));
    r_ratio_np_K_f_out = REAL(VECTOR_ELT(out_EcoDCF, 57));
    r_ratio_GVL_cnb_ue_f_out = REAL(VECTOR_ELT(out_EcoDCF, 58));

//Rprintf("Eco 22\n");fichier << "Eco22" << endl;

    double *r_fvolue_f_m2 = REAL(VECTOR_ELT(fVar,4));
    double *r_ovcDCFue_f_m2 = REAL(VECTOR_ELT(fVar,10));
    double *r_ccwr_f2 = REAL(VECTOR_ELT(fVar,27));
    double *r_opersc_f2 = REAL(VECTOR_ELT(fVar,28));

    SEXP countLf;
    PROTECT(countLf = NEW_NUMERIC(nbF)); // --> 67
    double *r_countLf = REAL(countLf);
    for (int INd_f = 0 ; INd_f < nbF ; INd_f++) r_countLf[INd_f] = 0.0; // pour le calcul de 'fuelEff'

// ---> P = 88 + 1 = 89



double *rnbv = REAL(getListElement(Flist, "nbv_f_m"));
double *rnbv_f = REAL(getListElement(Flist, "nbv_f"));
double *rnbTrip = REAL(getListElement(Flist, "nbTrip_f_m"));
double *rtripLgth = REAL(getListElement(Flist, "tripLgth_f_m"));
double *rnbTrip_f = REAL(getListElement(Flist, "nbTrip_f"));
double *rtripLgth_f = REAL(getListElement(Flist, "tripLgth_f"));


//Rprintf("Eco 23\n");fichier << "Eco23" << endl;


//initialisation de cnb, GVLtot et NGVLav, et remplissage de ET


    for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        r_cnb_f_out[ind_f + nbF*ind_t] = 0.0;

        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

            if (ind_t==0) {
              r_ET_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = REAL(VECTOR_ELT(fVar,33))[ind_f + nbF*ind_m];
            } else {
              r_ET_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = r_ET_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*(ind_t-1)];
            }

            r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = 0.001;

            r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = 0.0;

            r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = 0.0;
        }
    }



// indicateurs espèces ---------------------------------------------------------

for (int e = 0 ; e < nbE+nbEstat ; e++) {

        if (e<nbE) {
         PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppList,e)))); //espèce dynamique
        } else {
         PROTECT(elmt = getListElement(list, CHAR(STRING_ELT(sppListStat,e-nbE)))); //espèce statique
        }
//Rprintf("Eco X10\n");fichier << "EcoX10" << endl;
        //if (e<nbE) nbI = length(getListElement(elmt, "modI"));
        if (e<nbE) nbC = length(getListElement(elmt, "modC"));

        double *r_Lbio_f_sum_t_e=&NA_REAL, *r_GVLtot_f_m_e2=&NA_REAL, *r_Lbio_f_m_e=&NA_REAL, *r_P_f_m_e=&NA_REAL, *r_LD_efmc=&NA_REAL, r_theta_e, *r_statLDor_efm=&NA_REAL,
               *r_statLDst_efm=&NA_REAL, r_Pst_e=NA_REAL, *r_LD_f_sum_t_e=&NA_REAL, *r_statLDor_f_sum_t_e=&NA_REAL, *r_statLDst_f_sum_t_e=&NA_REAL;
        int *dim_Lbio_e, *dim_P_e;

//Rprintf("Eco X11\n");fichier << "EcoX11" << endl;
       if (e<nbE) {

            r_GVLtot_f_m_e2 = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e),41));
            r_GVLcom_f_m_e_out = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e),228));
            r_GVLst_f_m_e_out = REAL(VECTOR_ELT(VECTOR_ELT(eVar, e),229));
            r_Lbio_f_m_e = REAL(VECTOR_ELT(out_L_efmct, e));
            r_Lbio_f_sum_t_e = REAL(aggregObj(VECTOR_ELT(out_L_efmct, e),dimCstF));
            r_LD_efmc = REAL(VECTOR_ELT(out_LD_efmc, e));
            r_LD_f_sum_t_e = REAL(aggregObj(VECTOR_ELT(out_LD_efmc, e),dimCstF));
            r_theta_e = REAL(getListElement(elmt, "theta_e"))[0];
            //r_Lref_f_e = REAL(getListElement(elmt, "Lref_f_e"));
            r_P_f_m_e = REAL(VECTOR_ELT(out_P_t, e));
            dim_Lbio_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_L_efmct, e), install("DimCst")))));
            dim_P_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_P_t, e), install("DimCst")))));
//Rprintf("Eco X12\n");fichier << "EcoX12" << endl;
        } else {

            r_GVLtot_f_m_e2 = REAL(VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),1));
            r_GVLcom_f_m_e_out = REAL(VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),8));
            r_GVLst_f_m_e_out = REAL(VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),9));
            r_Lbio_f_m_e = REAL(VECTOR_ELT(out_Lstat, e-nbE));
            r_Lbio_f_sum_t_e = REAL(aggregObj(VECTOR_ELT(out_Lstat, e-nbE),dimCstF));
            r_statLDor_efm = REAL(VECTOR_ELT(out_statLDor_efm, e-nbE));
            r_statLDor_f_sum_t_e = REAL(aggregObj(VECTOR_ELT(out_statLDor_efm, e-nbE),dimCstF));
            r_statLDst_efm = REAL(VECTOR_ELT(out_statLDst_efm, e-nbE));
            r_statLDst_f_sum_t_e = REAL(aggregObj(VECTOR_ELT(out_statLDst_efm, e-nbE),dimCstF));
            r_theta_e = REAL(getListElement(elmt, "theta_e"))[0];
            //r_Lref_f_e = REAL(getListElement(elmt, "Lref_f_e"));
            r_P_f_m_e = REAL(VECTOR_ELT(out_Pstat, e-nbE));
            dim_Lbio_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_Lstat, e-nbE), install("DimCst")))));
            dim_P_e = INTEGER(iDim(INTEGER(getAttrib(VECTOR_ELT(out_Pstat, e-nbE), install("DimCst")))));
            r_Pst_e = REAL(getListElement(elmt, "Pst_e"))[0];
//Rprintf("Eco X13\n");fichier << "EcoX13" << endl;
        }



        //---------------------
        //équations de la table "t"
        //---------------------

  for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

        if (e<nbE) {

          r_countLf[ind_f] = r_countLf[ind_f] + finite(r_Lbio_f_sum_t_e[ind_f]) + finite(r_LD_f_sum_t_e[ind_f]);

        } else {

          r_countLf[ind_f] = r_countLf[ind_f] + finite(r_Lbio_f_sum_t_e[ind_f]) + finite(r_statLDor_f_sum_t_e[ind_f]) + finite(r_statLDst_f_sum_t_e[ind_f]);

        }
////Rprintf("Eco X131\n");fichier << "EcoX131" << endl;
        for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

        //-- 1. GVL_f_m_e

        double countCom = 0.0;
////Rprintf("Eco X132\n");fichier << "EcoX132" << endl;

    if (e<nbE) {

             if (ISNA(r_theta_e)) r_theta_e = 1.0;

             for (int ind_c = 0 ; ind_c < (nbC-1) ; ind_c++){ //sur les classes non sous-tailles

                if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]]))
                        r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;

                if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {

               countCom = countCom +
                  r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                  r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + ind_c*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  finite(r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);

               r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] +
                r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                finite(r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + ind_c*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);

                }

             }

////Rprintf("Eco X133\n");fichier << "EcoX133" << endl;
             if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]]))
                        r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;

////Rprintf("Eco X1331\n");fichier << "EcoX1331" << endl;
             if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])) {
////Rprintf("Eco X1332\n");fichier << "EcoX1332" << endl;
                  r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                   r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                   r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                   r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + (nbC-1)*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                   finite(r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);

                  r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] +
                    r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                    finite(r_LD_efmc[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + (nbC-1)*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);
////Rprintf("Eco X1333\n");fichier << "EcoX1333" << endl;
             } else {
////Rprintf("Eco X1334\n");fichier << "EcoX1334" << endl;
                  r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = 0.0;
////Rprintf("Eco X1335\n");fichier << "EcoX1335" << endl;
             }

    } else {

////Rprintf("Eco X134\n");fichier << "EcoX134" << endl;

       if (ISNA(r_theta_e)) r_theta_e = 1.0;

       if (ISNA(r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]]))
                        r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] = 0.0;


       if (!ISNA(r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])){

            countCom = r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 * //prix au kg
                  r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                  r_theta_e * r_P_f_m_e[ind_f*dim_P_e[0] + ind_m*dim_P_e[1] + 0*dim_P_e[2] + ind_t*dim_P_e[3]] * 1000 *
                  finite(r_statLDor_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]) ;

            r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] +
                r_Lbio_f_m_e[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]] +
                finite(r_statLDor_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);
        }

        if (!ISNA(r_statLDst_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]])){

            if (ISNA(r_Pst_e)) r_Pst_e = 0.0;

            r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                  r_Pst_e * 1000 * finite(r_statLDst_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);

            r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] +
                finite(r_statLDst_efm[ind_f*dim_Lbio_e[0] + ind_m*dim_Lbio_e[1] + 0*dim_Lbio_e[2] + ind_t*dim_Lbio_e[3]]);

        } else {

           r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = 0.0;

        }
////Rprintf("Eco X135\n");fichier << "EcoX135" << endl;

    }

////Rprintf("Eco X1338\n");fichier << "EcoX1338" << endl;
    r_GVLcom_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = countCom;
////Rprintf("Eco X1339\n");fichier << "EcoX1339" << endl;
    r_GVLtot_f_m_e2[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
       r_GVLcom_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] + r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]];
////Rprintf("Eco X136\n");fichier << "EcoX136" << endl;

    //-- 2. GVLtot_f_m


    r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
       r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] +
       finite(r_GVLtot_f_m_e2[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]]);

    double LC = 0.0, LCD = 0.0;
    if (!ISNA(r_lc_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]]))
       LC = r_lc_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]];
    if (!ISNA(r_lcd_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]]))
       LCD = r_lcd_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]];
////Rprintf("Eco X137\n");fichier << "EcoX137" << endl;
    r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
       r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] +
       finite(r_GVLcom_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]]) * (1 - 0.01*LC) +
       finite(r_GVLst_f_m_e_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]]) * (1 - 0.01*LCD);


   }
  }
  ////Rprintf("Eco X14\n");fichier << "EcoX14" << endl;

////Rprintf("aa1"); fichier << "aa1" << endl;
//if (ind_t==4 & e==26) PrintValue(VECTOR_ELT(out_EcoDCF, 13));
////Rprintf("aa1");


  if (e<nbE) {
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,4), e, VECTOR_ELT(VECTOR_ELT(eVar, e),41));//Rprintf("Eco X1\n");
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,0), e, VECTOR_ELT(VECTOR_ELT(eVar, e),228));//Rprintf("Eco X2\n");
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,2), e, VECTOR_ELT(VECTOR_ELT(eVar, e),229));//Rprintf("Eco X3\n");
  } else {
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,5), e-nbE, VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),1));//Rprintf("Eco X4\n");
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,1), e-nbE, VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),8));//Rprintf("Eco X5\n");
    SET_VECTOR_ELT(VECTOR_ELT(out_EcoDCF,3), e-nbE, VECTOR_ELT(VECTOR_ELT(eStatVar, e-nbE),9));//Rprintf("Eco X6\n");
  }

  UNPROTECT(1);

  //Rprintf("\nJ3\n");fichier << "J3" << endl;

////Rprintf("aa1"); fichier << "aa1" << endl;
//if (ind_t==4 & e==26) PrintValue(VECTOR_ELT(out_EcoDCF, 13));
////Rprintf("aa1");
//if (ind_t==4) PrintValue(VECTOR_ELT(out_EcoDCF, 13));


}


//Rprintf("aa");
//if (ind_t==4) PrintValue(VECTOR_ELT(out_EcoDCF, 13));
//Rprintf("bb");//Rprintf("%f\n",r_cnb_f_m_out[0 + nbF*7 + nbF*nbMe*4]);//Rprintf("%f\n",r_ET_f_m_out[0 + nbF*7 + nbF*nbMe*4]);
////Rprintf("%f\n",rnbv[0 + nbF*7]);//Rprintf("%f\n",rnbTrip[0 + nbF*7]);//Rprintf("%f\n",rtripLgth[0 + nbF*7]);
//if (ind_t==1) PrintValue(VECTOR_ELT(out_EcoDCF, 12));
//Rprintf("cc");

for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

    for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

////Rprintf("Eco X1336\n");fichier << "EcoX1336" << endl; //à ce moment, cnb contient les débarquements totaux par flottille et métier
    r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] = finite(r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] /
        (r_ET_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * rnbv[ind_f + nbF*ind_m] *
         rnbTrip[ind_f + nbF*ind_m] * rtripLgth[ind_f + nbF*ind_m]));

////Rprintf("Eco X1337\n");fichier << "EcoX1337" << endl;//calcul du numérateur de cnb_f

    r_cnb_f_out[ind_f + nbF*ind_t] = r_cnb_f_out[ind_f + nbF*ind_t] +
             finite(r_cnb_f_m_out[ind_f + nbF*ind_m + nbF*nbMe*ind_t] * rnbv[ind_f + nbF*ind_m] *
             rnbTrip[ind_f + nbF*ind_m] * rtripLgth[ind_f + nbF*ind_m]);


}}

//if (ind_t==1) PrintValue(VECTOR_ELT(out_EcoDCF, 13));

// --------------------------------------------------------------------------------------




    // à ce stade, plus de considération d'espèce pour les indicateurs

        for (int ind_f = 0 ; ind_f < nbF ; ind_f++){

          double NGVLtot_f = 0.0, RTBStot_f = 0.0;

            for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

            //-- 5. GVLav_f_m

                r_GVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                    r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] /
                    r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]];

             //-- 6. GVLtot_f & NGVLav_f_m

                if (ind_m==0) {

                    if (!ISNA(r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]])) {

                                r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                                    r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]];

                    } else {

                                r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 0.0;
                    }

                } else {

                    if (!ISNA(r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]])) {

                                r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                                    r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] +
                                    r_GVLtot_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]];

                    }
                }


                    if (!ISNA(r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]])) {

                        NGVLtot_f = NGVLtot_f +
                         r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] *
                         r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]];

                    }

                        r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                        r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] /
                        r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]];



            //-- 11. rtbs_f_m

                    r_rtbs_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                        r_NGVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] -
                        ((finite(r_ovcDCFue_f_m2[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + 0*eF_fm[3]]) +
                        finite(r_fvolue_f_m2[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + 0*eF_fm[3]]) *
                        r_vf_f_m[ind_f*dim_vf_f_m[0] + ind_m*dim_vf_f_m[1] + 0*dim_vf_f_m[2] + ind_t*dim_vf_f_m[3]]) *
                        r_ue_f_m[ind_f*dim_ue_f_m[0] + ind_m*dim_ue_f_m[1] + 0*dim_ue_f_m[2] + ind_t*dim_ue_f_m[3]] / pow(1+0.0,ind_t));

                   if (!ISNA(r_rtbs_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]])) {

                        RTBStot_f = RTBStot_f +
                         r_rtbs_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] *
                         r_nbv_f_m[ind_f*dim_nbv_f_m[0] + ind_m*dim_nbv_f_m[1] + 0*dim_nbv_f_m[2] + ind_t*dim_nbv_f_m[3]];

                    }

                   if (perscCalc<2) {

                    r_cshrT_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] =
                        0.01 * r_cshr_f_m[ind_f*dim_cshr_f_m[0] + ind_m*dim_cshr_f_m[1] + 0*dim_cshr_f_m[2] + ind_t*dim_cshr_f_m[3]] *
                        r_rtbs_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]];

                   } else {

                    r_cshrT_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] = NA_REAL;

                   }

            } //on sort de la boucle sur les niveaux métiers


            //-- 7. GVLav_f

                r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    r_nbv_f[ind_f*dim_nbv_f[0] + 0*dim_nbv_f[1] + 0*dim_nbv_f[2] + ind_t*dim_nbv_f[3]];


            //-- 8.5. NGVLav_f

                r_NGVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    NGVLtot_f / r_nbv_f[ind_f*dim_nbv_f[0] + 0*dim_nbv_f[1] + 0*dim_nbv_f[2] + ind_t*dim_nbv_f[3]];

            //-- 10. cnb_f

                r_cnb_f_out[ind_f + nbF*ind_t] =
                    finite(r_cnb_f_out[ind_f + nbF*ind_t] / (rnbv_f[ind_f] * rtripLgth_f[ind_f] * rnbTrip_f[ind_f]));


            //-- 12. rtbs_f

                r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                        RTBStot_f / r_nbv_f[ind_f*dim_nbv_f[0] + 0*dim_nbv_f[1] + 0*dim_nbv_f[2] + ind_t*dim_nbv_f[3]];



                //version actualisée
                r_rtbsAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);


            //-- 14. cshrT_f


        if (perscCalc==0) {  //salaires par marin fixés

            r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                0.01*r_cshr_f[ind_f*dim_cshr_f[0] + 0*dim_cshr_f[1] + 0*dim_cshr_f[2] + ind_t*dim_cshr_f[3]] *
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + 0*eF_f[3]] *
                    r_cnb_f_out[ind_f + nbF*ind_t] / r_cnb_f_out[ind_f + nbF*0];

        }

        if (perscCalc==1) {  //part équipage constante

            r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                0.01*r_cshr_f[ind_f*dim_cshr_f[0] + 0*dim_cshr_f[1] + 0*dim_cshr_f[2] + ind_t*dim_cshr_f[3]] *
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

        }

        if (perscCalc==2) {  //part équipage constante calculée - ccwr

            r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                0.01*r_ccwr_f2[ind_f] *
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

        }


        if (perscCalc==3) {  //part équipage constante + salaire marin supplémentaire fixé

            r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                0.01*r_cshr_f[ind_f*dim_cshr_f[0] + 0*dim_cshr_f[1] + 0*dim_cshr_f[2] + ind_t*dim_cshr_f[3]] *
                    (r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] +
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + 0*eF_f[3]] *
                    (r_cnb_f_out[ind_f + nbF*0 + nbF*ind_t] - r_cnb_f_out[ind_f + nbF*0 + nbF*0]) /
                    r_cnb_f_out[ind_f + nbF*0 + nbF*0]);

        }


        if (perscCalc==4) {  //part équipage constante calculée salaires marin supplémentaire fixé

            r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                r_ccwr_f2[ind_f] *
                    (r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] +
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + 0*eF_f[3]] *
                    (r_cnb_f_out[ind_f + nbF*0 + nbF*ind_t] - r_cnb_f_out[ind_f + nbF*0 + nbF*0]) /
                    r_cnb_f_out[ind_f + nbF*0 + nbF*0]);

        }


             //-- 15. ncshr_f

                r_ncshr_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] -
                    r_eec_f[ind_f*dim_eec_f[0] + 0*dim_eec_f[1] + 0*dim_eec_f[2] + ind_t*dim_eec_f[3]];

             //-- 16. ocl_f

                r_ocl_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_mwh_f[ind_f*dim_mwh_f[0] + 0*dim_mwh_f[1] + 0*dim_mwh_f[2] + 0*dim_mwh_f[3]] *
                    r_cnb_f_out[ind_f + nbF*0 + nbF*ind_t] * rtripLgth_f[ind_f] * rnbTrip_f[ind_f];


             //-- 17. cs_f

                r_cs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_ncshr_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] -
                    r_ocl_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

                //version actualisée
                r_csAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_cs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);


            //-- 18. csTot_f

                r_csTot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_cs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] * rnbv_f[ind_f];


             //-- 19. gva_f

                r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] -
                    (r_rep_f[ind_f*dim_rep_f[0] + 0*dim_rep_f[1] + 0*dim_rep_f[2] + ind_t*dim_rep_f[3]] +
                    r_fixc_f[ind_f*dim_fixc_f[0] + 0*dim_fixc_f[1] + 0*dim_fixc_f[2] + ind_t*dim_fixc_f[3]] +
                    r_gc_f[ind_f*dim_gc_f[0] + 0*dim_gc_f[1] + 0*dim_gc_f[2] + ind_t*dim_gc_f[3]]) / pow(1+0.0,ind_t) ;


                //version actualisée
                r_gvaAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);


            //-- 20. gvamargin_f

            r_gvamargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
               r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];


            //-- 21. gva_FTE_f

            r_gva_FTE_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
               r_FTE_f[ind_f*dim_FTE_f[0] + 0*dim_FTE_f[1] + 0*dim_FTE_f[2] + ind_t*dim_FTE_f[3]];


            //-- 22. ccw_f

            r_ccw_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

            if ( (perscCalc==0) | (perscCalc==1) | (perscCalc==3) ) {

            r_ccw_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                r_ccw_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] + r_opersc_f2[ind_f];
            }


            //-- 23. ccwCr_f

             r_ccwCr_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_ccw_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_cnb_f_out[ind_f + nbF*ind_t];


            //-- 24. wageg_f

             r_wageg_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_cnb_f_out[ind_f + nbF*ind_t];


            //-- 25. wagen_f

             r_wagen_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_ncshr_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_cnb_f_out[ind_f + nbF*ind_t];

            //-- 26. wageg_FTE_f

             r_wageg_FTE_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
               r_cshrT_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_FTE_f[ind_f*dim_FTE_f[0] + 0*dim_FTE_f[1] + 0*dim_FTE_f[2] + ind_t*dim_FTE_f[3]];
               //r_wageg_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_FTE_f[ind_f*dim_FTE_f[0] + 0*dim_FTE_f[1] + 0*dim_FTE_f[2] + ind_t*dim_FTE_f[3]];


            //-- 27. wageg_h_f

             r_wageg_h_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                r_wageg_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / (rtripLgth_f[ind_f] * rnbTrip_f[ind_f]);
               //r_wageg_FTE_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / (rtripLgth_f[ind_f] * rnbTrip_f[ind_f]);

            //-- 28. gp_f

                r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] - r_ccw_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];


              //version actualisée
                r_gpAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);


             //-- 29. gpmargin_f

                r_gpmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

             //-- 30. ncf_f

                r_ncf_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] - r_dep_f[ind_f*dim_dep_f[0] + 0*dim_dep_f[1] + 0*dim_dep_f[2] + ind_t*dim_dep_f[3]];


             //-- 31. np_f

                r_np_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_ncf_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] - r_ic_f[ind_f*dim_ic_f[0] + 0*dim_ic_f[1] + 0*dim_ic_f[2] + ind_t*dim_ic_f[3]];

             //-- 32. npmargin_f

                r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_np_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];


             //-- 33. prof_f

                r_prof_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = -1.0;
                if (r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]]>=0) r_prof_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 0.0;
                if (r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]]>0.1) r_prof_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 1.0;


             //-- 34. npmargin_trend_f

                r_npmargin_trend_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = -1.0;
                if (ind_t>=5) {
                     double devTrend;
                     devTrend = r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                                (0.2 * (r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + (ind_t-5)*eF_f[3]] +
                                        r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + (ind_t-4)*eF_f[3]] +
                                        r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + (ind_t-3)*eF_f[3]] +
                                        r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + (ind_t-2)*eF_f[3]] +
                                        r_npmargin_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + (ind_t-1)*eF_f[3]]));
                     if (devTrend>(-0.05)) r_npmargin_trend_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 0.0;
                     if (devTrend>0.05) r_npmargin_trend_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 1.0;
                }

             //-- 35. ssTot_f

                r_ssTot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] * rnbv_f[ind_f];

             //-- 36. ps_f

                r_ps_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    rnbv_f[ind_f] * (r_cs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] + r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]]);

              //version actualisée
                r_psAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_ps_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);


             //-- 37. sts_f

                r_sts_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = 0.0;

                for (int ind_m = 0 ; ind_m < nbMe ; ind_m++){

                  r_sts_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = r_sts_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] +
                        (finite(r_lc_f_m[ind_f*dim_lc_f_m[0] + ind_m*dim_lc_f_m[1] + 0*dim_lc_f_m[2] + ind_t*dim_lc_f_m[3]]) *
                         r_GVLav_f_m_out[ind_f*eF_fm[0] + ind_m*eF_fm[1] + 0*eF_fm[2] + ind_t*eF_fm[3]] * rnbv[ind_f + ind_m*nbF]);

                }

               //version actualisée
                 r_stsAct_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                       r_sts_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] / pow(1+dr,ind_t);



             //-- 38. ber_f

                r_BER_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_GVLtot_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] *
                    (r_fixc_f[ind_f*dim_fixc_f[0] + 0*dim_fixc_f[1] + 0*dim_fixc_f[2] + ind_t*dim_fixc_f[3]] +
                    r_dep_f[ind_f*dim_dep_f[0] + 0*dim_dep_f[1] + 0*dim_dep_f[2] + ind_t*dim_dep_f[3]] +
                    r_ic_f[ind_f*dim_ic_f[0] + 0*dim_ic_f[1] + 0*dim_ic_f[2] + ind_t*dim_ic_f[3]]) /
                    r_rtbs_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] ;

             //-- 39. CR_BER_f

                r_CR_BER_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    r_BER_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];


             //-- 40. fuelEff_f
                double numFuelEff = 0.0;
                for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) numFuelEff = numFuelEff + finite(r_fvolue_f_m2[ind_f + ind_m*nbF] * r_ue_f_m[ind_f+ ind_m*nbF] * r_nbv_f_m[ind_f+ ind_m*nbF]);
                r_fuelEff_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = numFuelEff / r_countLf[ind_f];


            //-- 41. ratio_fvol_GVA_f
                double numFvolGVA = 0.0;
                for (int ind_m = 0 ; ind_m < nbMe ; ind_m++) numFvolGVA = numFvolGVA + finite(r_fvolue_f_m2[ind_f + ind_m*nbF] * r_ue_f_m[ind_f+ ind_m*nbF]);
                r_ratio_fvol_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = numFvolGVA / r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

            //-- 42. ratio_gp_GVA_f

                r_ratio_gp_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    r_gva_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]];

            //-- 43. ratio_GVL_K_f

                r_ratio_GVL_K_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    (r_K_f[ind_f*dim_K_f[0] + 0*dim_K_f[1] + 0*dim_K_f[2] + ind_t*dim_K_f[3]] / pow(1+0.0,ind_t) );

            //-- 44. ratio_gp_K_f

                r_ratio_gp_K_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    (r_K_f[ind_f*dim_K_f[0] + 0*dim_K_f[1] + 0*dim_K_f[2] + ind_t*dim_K_f[3]] / pow(1+0.0,ind_t) );

            //-- 45. RoFTA_f

                r_RoFTA_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_ncf_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    (r_K_f[ind_f*dim_K_f[0] + 0*dim_K_f[1] + 0*dim_K_f[2] + ind_t*dim_K_f[3]] / pow(1+0.0,ind_t) );

            //-- 46. ROI_f
                r_ROI_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] = NA_REAL;
                if (finite(r_inv_f[ind_f*dim_inv_f[0] + 0*dim_inv_f[1] + 0*dim_inv_f[2] + ind_t*dim_inv_f[3]])>0) {
                    r_ROI_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                      (r_gp_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] - r_inv_f[ind_f*dim_inv_f[0] + 0*dim_inv_f[1] + 0*dim_inv_f[2] + ind_t*dim_inv_f[3]]) /
                      finite(r_inv_f[ind_f*dim_inv_f[0] + 0*dim_inv_f[1] + 0*dim_inv_f[2] + ind_t*dim_inv_f[3]]);
                }

            //-- 47. ratio_np_K_f

                r_ratio_np_K_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_np_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    r_K_f[ind_f*dim_K_f[0] + 0*dim_K_f[1] + 0*dim_K_f[2] + ind_t*dim_K_f[3]];



            //-- 48. ratio_GVL_cnb_ue_f

                r_ratio_GVL_cnb_ue_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] =
                    r_GVLav_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] /
                    (r_cnb_f_out[ind_f*eF_f[0] + 0*eF_f[1] + 0*eF_f[2] + ind_t*eF_f[3]] * r_ue_f[ind_f] );


        }

if (ind_t==0) UNPROTECT(66);
UNPROTECT(89);

//Rprintf("\nJ2\n");fichier << "J2" << endl;

//if (ind_t>10) //PrintValue(VECTOR_ELT(out_EcoDCF, 44));
//if (ind_t>10) //PrintValue(VECTOR_ELT(out_EcoDCF, 2));
//if (ind_t>10) //PrintValue(VECTOR_ELT(fVar, 10));
//if (ind_t>10) //PrintValue(VECTOR_ELT(fVar, 4));
//if (ind_t>10) //PrintValue(vf_f_m);
//if (ind_t>10) //PrintValue(ue_f_m);
//if (ind_t==(nbT-1)) {//PrintValue(VECTOR_ELT(fVar,4));//PrintValue(VECTOR_ELT(fVar,10));}

//fichier.close();

}}



//détection d'un caractère donné dans un objet SEXP de type SXPSTR

extern "C" {

bool isCharIn(SEXP names, const char *str)
{

    int i;
    bool test = false;

    for (i = 0; i < length(names); i++)
        if (strcmp(CHAR(STRING_ELT(names,i)), str) == 0) {
            test = true;
            break;
        }

    return test;
}

}


extern "C" {
SEXP IAM(SEXP listInput, SEXP listSpec, SEXP listStochastic, SEXP listScen,
            SEXP RecType1, SEXP RecType2, SEXP RecType3, SEXP Scenarii, SEXP Bootstrp, SEXP nbBoot,
            SEXP GestInd, SEXP mOth, SEXP bounds, SEXP TAC, SEXP FBAR, SEXP othSpSup, SEXP effSup, SEXP GestParam, SEXP EcoDcf,
            SEXP EcoInd, SEXP dr, SEXP SRind, SEXP listSR, SEXP TypeSR, SEXP mFM, SEXP TACbyF, SEXP Ftarg, SEXP W_Ftarg, SEXP MeanRec_Ftarg,
            SEXP parBHV, SEXP parQEX,
            SEXP tacCTRL, SEXP stochPrice, SEXP updateE, SEXP parOQD, SEXP bootVar = R_NilValue)
{
//Rprintf("OO");
    if (INTEGER(Bootstrp)[0]==0) {

        BioEcoPar *object = new BioEcoPar(listInput, listSpec, listStochastic, listScen,
                                            RecType1, RecType2, RecType3, Scenarii, Bootstrp, nbBoot,
                                            GestInd, mOth, bounds, TAC, FBAR, othSpSup, effSup, GestParam, EcoDcf,
                                            EcoInd, dr, SRind, listSR, TypeSR, mFM, TACbyF, Ftarg, W_Ftarg, MeanRec_Ftarg,
                                            parBHV, parQEX, tacCTRL, stochPrice, updateE, parOQD);


        SEXP output, out_names, out_Foth;
        PROTECT(output = allocVector(VECSXP, 107)); //11/04/18 rajout de l'élément reconcilSPP
        SET_VECTOR_ELT(output, 0, object->out_F_fmi);
        SET_VECTOR_ELT(output, 1, object->out_Z_eit);
        SET_VECTOR_ELT(output, 2, object->out_Fbar_et);
        SET_VECTOR_ELT(output, 3, object->out_N_eit);
        SET_VECTOR_ELT(output, 4, object->out_B_et);
        SET_VECTOR_ELT(output, 5, object->out_SSB_et);
        SET_VECTOR_ELT(output, 6, object->out_C_efmit);
        SET_VECTOR_ELT(output, 7, object->out_C_eit);
        SET_VECTOR_ELT(output, 8, object->out_Y_efmit);
        SET_VECTOR_ELT(output, 9, object->out_Y_eit);
        SET_VECTOR_ELT(output, 10, object->out_D_efmit);
        SET_VECTOR_ELT(output, 11, object->out_L_efmit);
        SET_VECTOR_ELT(output, 12, object->out_L_efmct);
        SET_VECTOR_ELT(output, 13, object->out_L_eit);
        SET_VECTOR_ELT(output, 14, object->out_P_t);
        //if (INTEGER(EcoDcf)[0]==0) SET_VECTOR_ELT(output, 15, object->out_Eco); else SET_VECTOR_ELT(output, 15, object->out_EcoDCF);
        SET_VECTOR_ELT(output, 15, object->out_EcoDCF);
        PROTECT(out_Foth = allocVector(VECSXP, object->nbE));
        setAttrib(out_Foth, R_NamesSymbol, object->sppList);
        if (object->nbE>0) {for (int i = 0; i < object->nbE; i++) SET_VECTOR_ELT(out_Foth, i, VECTOR_ELT(VECTOR_ELT(object->eVar, i), 44));}
        SET_VECTOR_ELT(output, 16, out_Foth);
        SET_VECTOR_ELT(output, 17, object->mu_nbds);
        SET_VECTOR_ELT(output, 18, object->mu_nbv);
        SET_VECTOR_ELT(output, 19, object->out_effort);
        SET_VECTOR_ELT(output, 20, object->out_Fr_fmi);
        SET_VECTOR_ELT(output, 21, VECTOR_ELT(object->fVar, 29));
        SET_VECTOR_ELT(output, 22, object->out_PQuot_et);
        SET_VECTOR_ELT(output, 23, object->out_typeGest);
        SET_VECTOR_ELT(output, 24, object->out_Ystat);
        SET_VECTOR_ELT(output, 25, object->out_Lstat);
        SET_VECTOR_ELT(output, 26, object->out_Dstat);
        SET_VECTOR_ELT(output, 27, object->out_Pstat);


        //peut-être à retirer ensuite --> export des indicateurs par morph/trimestre -------------------------------

        SET_VECTOR_ELT(output, 28, object->out_F_fmi_S1M1);
        SET_VECTOR_ELT(output, 29, object->out_F_fmi_S1M2);
        SET_VECTOR_ELT(output, 30, object->out_F_fmi_S1M3);
        SET_VECTOR_ELT(output, 31, object->out_F_fmi_S1M4);
        SET_VECTOR_ELT(output, 32, object->out_F_fmi_S2M1);
        SET_VECTOR_ELT(output, 33, object->out_F_fmi_S2M2);
        SET_VECTOR_ELT(output, 34, object->out_F_fmi_S2M3);
        SET_VECTOR_ELT(output, 35, object->out_F_fmi_S2M4);
        SET_VECTOR_ELT(output, 36, object->out_F_fmi_S3M1);
        SET_VECTOR_ELT(output, 37, object->out_F_fmi_S3M2);
        SET_VECTOR_ELT(output, 38, object->out_F_fmi_S3M3);
        SET_VECTOR_ELT(output, 39, object->out_F_fmi_S3M4);
        SET_VECTOR_ELT(output, 40, object->out_F_fmi_S4M1);
        SET_VECTOR_ELT(output, 41, object->out_F_fmi_S4M2);
        SET_VECTOR_ELT(output, 42, object->out_F_fmi_S4M3);
        SET_VECTOR_ELT(output, 43, object->out_F_fmi_S4M4);
        SET_VECTOR_ELT(output, 44, object->out_Fr_fmi_S1M1);
        SET_VECTOR_ELT(output, 45, object->out_Fr_fmi_S1M2);
        SET_VECTOR_ELT(output, 46, object->out_Fr_fmi_S1M3);
        SET_VECTOR_ELT(output, 47, object->out_Fr_fmi_S1M4);
        SET_VECTOR_ELT(output, 48, object->out_Fr_fmi_S2M1);
        SET_VECTOR_ELT(output, 49, object->out_Fr_fmi_S2M2);
        SET_VECTOR_ELT(output, 50, object->out_Fr_fmi_S2M3);
        SET_VECTOR_ELT(output, 51, object->out_Fr_fmi_S2M4);
        SET_VECTOR_ELT(output, 52, object->out_Fr_fmi_S3M1);
        SET_VECTOR_ELT(output, 53, object->out_Fr_fmi_S3M2);
        SET_VECTOR_ELT(output, 54, object->out_Fr_fmi_S3M3);
        SET_VECTOR_ELT(output, 55, object->out_Fr_fmi_S3M4);
        SET_VECTOR_ELT(output, 56, object->out_Fr_fmi_S4M1);
        SET_VECTOR_ELT(output, 57, object->out_Fr_fmi_S4M2);
        SET_VECTOR_ELT(output, 58, object->out_Fr_fmi_S4M3);
        SET_VECTOR_ELT(output, 59, object->out_Fr_fmi_S4M4);
        SET_VECTOR_ELT(output, 60, object->out_Z_eit_S1M1);
        SET_VECTOR_ELT(output, 61, object->out_Z_eit_S1M2);
        SET_VECTOR_ELT(output, 62, object->out_Z_eit_S1M3);
        SET_VECTOR_ELT(output, 63, object->out_Z_eit_S1M4);
        SET_VECTOR_ELT(output, 64, object->out_Z_eit_S2M1);
        SET_VECTOR_ELT(output, 65, object->out_Z_eit_S2M2);
        SET_VECTOR_ELT(output, 66, object->out_Z_eit_S2M3);
        SET_VECTOR_ELT(output, 67, object->out_Z_eit_S2M4);
        SET_VECTOR_ELT(output, 68, object->out_Z_eit_S3M1);
        SET_VECTOR_ELT(output, 69, object->out_Z_eit_S3M2);
        SET_VECTOR_ELT(output, 70, object->out_Z_eit_S3M3);
        SET_VECTOR_ELT(output, 71, object->out_Z_eit_S3M4);
        SET_VECTOR_ELT(output, 72, object->out_Z_eit_S4M1);
        SET_VECTOR_ELT(output, 73, object->out_Z_eit_S4M2);
        SET_VECTOR_ELT(output, 74, object->out_Z_eit_S4M3);
        SET_VECTOR_ELT(output, 75, object->out_Z_eit_S4M4);
        SET_VECTOR_ELT(output, 76, object->out_N_eit_S1M1);
        SET_VECTOR_ELT(output, 77, object->out_N_eit_S1M2);
        SET_VECTOR_ELT(output, 78, object->out_N_eit_S1M3);
        SET_VECTOR_ELT(output, 79, object->out_N_eit_S1M4);
        SET_VECTOR_ELT(output, 80, object->out_N_eit_S2M1);
        SET_VECTOR_ELT(output, 81, object->out_N_eit_S2M2);
        SET_VECTOR_ELT(output, 82, object->out_N_eit_S2M3);
        SET_VECTOR_ELT(output, 83, object->out_N_eit_S2M4);
        SET_VECTOR_ELT(output, 84, object->out_N_eit_S3M1);
        SET_VECTOR_ELT(output, 85, object->out_N_eit_S3M2);
        SET_VECTOR_ELT(output, 86, object->out_N_eit_S3M3);
        SET_VECTOR_ELT(output, 87, object->out_N_eit_S3M4);
        SET_VECTOR_ELT(output, 88, object->out_N_eit_S4M1);
        SET_VECTOR_ELT(output, 89, object->out_N_eit_S4M2);
        SET_VECTOR_ELT(output, 90, object->out_N_eit_S4M3);
        SET_VECTOR_ELT(output, 91, object->out_N_eit_S4M4);

        //01/04/2015 export des indicateurs supplémentaires : out_Ytot_fm, out_DD_efmi, out_DD_efmc, out_LD_efmi, out_LD_efmc,
        //out_statDD_efm, out_statLD_efm, out_statLDst_efm, out_statLDor_efm-------------------------------

        SET_VECTOR_ELT(output, 92, object->out_Ytot_fm);
        SET_VECTOR_ELT(output, 93, object->out_DD_efmi);
        SET_VECTOR_ELT(output, 94, object->out_DD_efmc);
        SET_VECTOR_ELT(output, 95, object->out_LD_efmi);
        SET_VECTOR_ELT(output, 96, object->out_LD_efmc);
        SET_VECTOR_ELT(output, 97, object->out_statDD_efm);
        SET_VECTOR_ELT(output, 98, object->out_statLD_efm);
        SET_VECTOR_ELT(output, 99, object->out_statLDst_efm);
        SET_VECTOR_ELT(output, 100, object->out_statLDor_efm);
        SET_VECTOR_ELT(output, 101, object->out_oqD_eft);
        SET_VECTOR_ELT(output, 102, object->out_oqD_et);
        SET_VECTOR_ELT(output, 103, object->out_oqDstat);
        SET_VECTOR_ELT(output, 104, object->reconcilSPP);
        SET_VECTOR_ELT(output, 105, object->TAC);
        SET_VECTOR_ELT(output, 106, object->TACbyF);


//PrintValue(object->reconcilSPP);
        //----------------------------------------------------------------------------------------------------------

        //on nomme les éléments de output
        const char *namesOut[107] = {"F","Z","Fbar","N","B","SSB","C","Ctot","Y","Ytot","D","Li","Lc","Ltot","P","E","Fothi","mu_nbds","mu_nbv","Eff","Fr","GVLoths_f","PQuot","typeGest","Ystat","Lstat","Dstat","Pstat",//};
                                    "F_S1M1","F_S1M2","F_S1M3","F_S1M4","F_S2M1","F_S2M2","F_S2M3","F_S2M4","F_S3M1","F_S3M2","F_S3M3","F_S3M4","F_S4M1","F_S4M2","F_S4M3","F_S4M4",
                                    "Fr_S1M1","Fr_S1M2","Fr_S1M3","Fr_S1M4","Fr_S2M1","Fr_S2M2","Fr_S2M3","Fr_S2M4","Fr_S3M1","Fr_S3M2","Fr_S3M3","Fr_S3M4","Fr_S4M1","Fr_S4M2","Fr_S4M3","Fr_S4M4",
                                    "Z_S1M1","Z_S1M2","Z_S1M3","Z_S1M4","Z_S2M1","Z_S2M2","Z_S2M3","Z_S2M4","Z_S3M1","Z_S3M2","Z_S3M3","Z_S3M4","Z_S4M1","Z_S4M2","Z_S4M3","Z_S4M4",
                                    "N_S1M1","N_S1M2","N_S1M3","N_S1M4","N_S2M1","N_S2M2","N_S2M3","N_S2M4","N_S3M1","N_S3M2","N_S3M3","N_S3M4","N_S4M1","N_S4M2","N_S4M3","N_S4M4",
                                    "YTOT_fm", "DD_efmi", "DD_efmc", "LD_efmi", "LD_efmc", "statDD_efm", "statLD_efm", "statLDst_efm", "statLDor_efm",
                                    "oqD_ef","oqD_e","oqDstat_ef","reconcilSPP","TACtot","TACbyF"};
        PROTECT(out_names = allocVector(STRSXP, 107));

        for(int ct = 0; ct < 107; ct++) SET_STRING_ELT(out_names, ct, mkChar(namesOut[ct]));

        setAttrib(output, R_NamesSymbol, out_names);

        UNPROTECT(3);
        return(output);
        delete object;


    } else {

        //on n'oublie pas d'activer les parties stochastiques pour que ça ait un sens

        //on commence par créer l'objet qui va accueillir la donnée  (3 outputs pour l'instant : biomasse, SSB, captures --> à développer selon les besoins)
        SEXP output, out_names, out_Foth, emptyObj;
        PROTECT(output = allocVector(VECSXP, 44)); //36
        SEXP eBoot;

        for (int ind = 0 ; ind < 44 ; ind++) { //36

            PROTECT(eBoot = allocVector(VECSXP, INTEGER(nbBoot)[0]));
            SET_VECTOR_ELT(output, ind, eBoot);

        }

        //on commence le bootstrap

        BioEcoPar *object = new BioEcoPar(listInput, listSpec, listStochastic, listScen,
                                    RecType1, RecType2, RecType3, Scenarii, Bootstrp, nbBoot,
                                    GestInd, mOth, bounds, TAC, FBAR, othSpSup, effSup, GestParam, EcoDcf,
                                    EcoInd, dr, SRind, listSR, TypeSR, mFM, TACbyF, Ftarg, W_Ftarg, MeanRec_Ftarg, parBHV, parQEX, tacCTRL, stochPrice, updateE, parOQD);

        for (int it = 0 ; it < INTEGER(nbBoot)[0] ; it++) {

            if (it>0) object = new BioEcoPar(listInput, listSpec, listStochastic, listScen,
                                    RecType1, RecType2, RecType3, Scenarii, Bootstrp, nbBoot,
                                    GestInd, mOth, bounds, TAC, FBAR, othSpSup, effSup, GestParam, EcoDcf,
                                    EcoInd, dr, SRind, listSR, TypeSR, mFM, TACbyF, Ftarg, W_Ftarg, MeanRec_Ftarg, parBHV, parQEX, tacCTRL, stochPrice, updateE, parOQD);

            //objet vide pour garder la structuration malgré la non-sélection de la variable en question
            PROTECT(emptyObj = allocVector(VECSXP, object->nbE));
            setAttrib(emptyObj, R_NamesSymbol, object->sppList);

            if (isCharIn(bootVar, "B")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 0), it, object->out_B_et);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 0), it, emptyObj);
            }

            if (isCharIn(bootVar, "SSB")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 1), it, object->out_SSB_et);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 1), it, emptyObj);
            }

            if (isCharIn(bootVar, "Ctot")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 2), it, object->out_C_eit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 2), it, emptyObj);
            }

            if (isCharIn(bootVar, "Ytot")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 3), it, object->out_Y_eit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 3), it, emptyObj);
            }

            if (isCharIn(bootVar, "Yfmi")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 4), it, object->out_Y_efmit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 4), it, emptyObj);
            }

            if (isCharIn(bootVar, "Ffmi")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 5), it, object->out_F_fmi);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 5), it, emptyObj);
            }

            if (isCharIn(bootVar, "Zeit")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 6), it, object->out_Z_eit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 6), it, emptyObj);
            }

            if (isCharIn(bootVar, "Fbar")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 7), it, object->out_Fbar_et);
                } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 7), it, emptyObj);
            }

            PROTECT(out_Foth = allocVector(VECSXP, object->nbE));
            setAttrib(out_Foth, R_NamesSymbol, object->sppList);
            if (object->nbE>0) {for (int i = 0; i < object->nbE; i++) SET_VECTOR_ELT(out_Foth, i, VECTOR_ELT(VECTOR_ELT(object->eVar, i), 44));}
            if (isCharIn(bootVar, "Foth")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 8), it, out_Foth);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 8), it, emptyObj);
            }

            if (isCharIn(bootVar, "mu_nbds")) SET_VECTOR_ELT(VECTOR_ELT(output, 9), it, object->mu_nbds);
            if (isCharIn(bootVar, "mu_nbv")) SET_VECTOR_ELT(VECTOR_ELT(output, 10), it, object->mu_nbv);

            if (isCharIn(bootVar, "N")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 11), it, object->out_N_eit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 11), it, emptyObj);
            }

            if (isCharIn(bootVar, "Eff")) SET_VECTOR_ELT(VECTOR_ELT(output, 12), it, object->out_effort);

            if (INTEGER(EcoDcf)[0]==0) {
                if (isCharIn(bootVar, "GVL_fme")) {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 13), it, VECTOR_ELT(object->out_Eco,1));
                } else {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 13), it, emptyObj);
                }

                if (isCharIn(bootVar, "GVLtot_fm")) SET_VECTOR_ELT(VECTOR_ELT(output, 14), it, VECTOR_ELT(object->out_Eco,2));
                if (isCharIn(bootVar, "GVLav_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 15), it, VECTOR_ELT(object->out_Eco,5));
                if (isCharIn(bootVar, "rtbs_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 16), it, VECTOR_ELT(object->out_Eco,11));
                if (isCharIn(bootVar, "gp_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 17), it, VECTOR_ELT(object->out_Eco,27));
                if (isCharIn(bootVar, "ps_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 18), it, VECTOR_ELT(object->out_Eco,29));
                if (isCharIn(bootVar, "gcf_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 19), it, VECTOR_ELT(object->out_Eco,25));
                if (isCharIn(bootVar, "gva_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 20), it, VECTOR_ELT(object->out_Eco,20));
                if (isCharIn(bootVar, "cs_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 21), it, VECTOR_ELT(object->out_Eco,18));
                if (isCharIn(bootVar, "sts_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 22), it, VECTOR_ELT(object->out_Eco,30));
                if (isCharIn(bootVar, "rtbsAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 23), it, VECTOR_ELT(object->out_Eco,54));
                if (isCharIn(bootVar, "csAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 24), it, VECTOR_ELT(object->out_Eco,55));
                if (isCharIn(bootVar, "gvaAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 25), it, VECTOR_ELT(object->out_Eco,56));
                if (isCharIn(bootVar, "gcfAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 26), it, VECTOR_ELT(object->out_Eco,57));
                if (isCharIn(bootVar, "psAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 27), it, VECTOR_ELT(object->out_Eco,58));
                if (isCharIn(bootVar, "stsAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 28), it, VECTOR_ELT(object->out_Eco,59));
                if (isCharIn(bootVar, "ccwCr_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 29), it, VECTOR_ELT(object->out_Eco,22));
                if (isCharIn(bootVar, "GVLtot_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 30), it, VECTOR_ELT(object->out_Eco,4));
                if (isCharIn(bootVar, "wagen_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 31), it, VECTOR_ELT(object->out_Eco,24));
                if (isCharIn(bootVar, "vcst_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 36), it, VECTOR_ELT(object->out_Eco,9));
                if (isCharIn(bootVar, "vcst_fm")) SET_VECTOR_ELT(VECTOR_ELT(output, 37), it, VECTOR_ELT(object->out_Eco,8));

                if (isCharIn(bootVar, "StatGVL_fme")) {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 43), it, VECTOR_ELT(object->out_Eco,60));
                } else {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 43), it, emptyObj);
                }



            } else {

                if (isCharIn(bootVar, "GVL_fme")) {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 13), it, VECTOR_ELT(object->out_EcoDCF,0));
                } else {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 13), it, emptyObj);
                }

                if (isCharIn(bootVar, "GVLtot_fm")) SET_VECTOR_ELT(VECTOR_ELT(output, 14), it, VECTOR_ELT(object->out_EcoDCF,1));
                if (isCharIn(bootVar, "GVLav_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 15), it, VECTOR_ELT(object->out_EcoDCF,4));
                if (isCharIn(bootVar, "rtbs_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 16), it, VECTOR_ELT(object->out_EcoDCF,7));
                if (isCharIn(bootVar, "gp_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 17), it, VECTOR_ELT(object->out_EcoDCF,22));
                if (isCharIn(bootVar, "ps_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 18), it, VECTOR_ELT(object->out_EcoDCF,23));
                if (isCharIn(bootVar, "gcf_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 19), it, VECTOR_ELT(object->out_EcoDCF,20));
                if (isCharIn(bootVar, "gva_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 20), it, VECTOR_ELT(object->out_EcoDCF,15));
                if (isCharIn(bootVar, "cs_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 21), it, VECTOR_ELT(object->out_EcoDCF,14));
                if (isCharIn(bootVar, "sts_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 22), it, VECTOR_ELT(object->out_EcoDCF,24));
                if (isCharIn(bootVar, "rtbsAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 23), it, VECTOR_ELT(object->out_EcoDCF,38));
                if (isCharIn(bootVar, "csAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 24), it, VECTOR_ELT(object->out_EcoDCF,39));
                if (isCharIn(bootVar, "gvaAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 25), it, VECTOR_ELT(object->out_EcoDCF,40));
                if (isCharIn(bootVar, "gcfAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 26), it, VECTOR_ELT(object->out_EcoDCF,41));
                if (isCharIn(bootVar, "psAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 27), it, VECTOR_ELT(object->out_EcoDCF,42));
                if (isCharIn(bootVar, "stsAct_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 28), it, VECTOR_ELT(object->out_EcoDCF,43));
                if (isCharIn(bootVar, "ccwCr_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 29), it, VECTOR_ELT(object->out_EcoDCF,17));
                if (isCharIn(bootVar, "GVLtot_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 30), it, VECTOR_ELT(object->out_EcoDCF,3));
                if (isCharIn(bootVar, "wagen_f")) SET_VECTOR_ELT(VECTOR_ELT(output, 31), it, VECTOR_ELT(object->out_EcoDCF,19));

                if (isCharIn(bootVar, "StatGVL_fme")) {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 43), it, VECTOR_ELT(object->out_EcoDCF,45));
                } else {
                    SET_VECTOR_ELT(VECTOR_ELT(output, 43), it, emptyObj);
                }


            }

            if (isCharIn(bootVar, "L_efmit")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 32), it, object->out_L_efmit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 32), it, emptyObj);
            }

            if (isCharIn(bootVar, "D_efmit")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 33), it, object->out_D_efmit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 33), it, emptyObj);
            }

            if (isCharIn(bootVar, "Fr_fmi")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 34), it, object->out_Fr_fmi);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 34), it, emptyObj);
            }

            if (isCharIn(bootVar, "C_efmit")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 35), it, object->out_C_efmit);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 35), it, emptyObj);
            }

            if (isCharIn(bootVar, "P")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 38), it, object->out_P_t);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 38), it, emptyObj);
            }

            if (isCharIn(bootVar, "Ystat")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 39), it, object->out_Ystat);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 39), it, emptyObj);
            }

           if (isCharIn(bootVar, "Lstat")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 40), it, object->out_Lstat);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 40), it, emptyObj);
            }

           if (isCharIn(bootVar, "Dstat")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 41), it, object->out_Dstat);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 41), it, emptyObj);
            }

           if (isCharIn(bootVar, "Pstat")) {
                SET_VECTOR_ELT(VECTOR_ELT(output, 42), it, object->out_Pstat);
            } else {
                SET_VECTOR_ELT(VECTOR_ELT(output, 42), it, emptyObj);
            }


            UNPROTECT(2);

        }

        //on nomme les éléments de output
        const char *namesOut[44] = {"B","SSB","Ctot","Ytot","Yfmi","Ffmi","Zeit","Fbar","Foth","mu_nbds","mu_nbv","N","Eff",
                                    "GVL_fme","GVLtot_fm","GVLav_f","rtbs_f","gp_f","ps_f","gcf_f","gva_f","cs_f","sts_f","rtbsAct_f",
                                    "csAct_f","gvaAct_f","gcfAct_f","psAct_f","stsAct_f","ccwCr_f","GVLtot_f","wagen_f","L_efmit","D_efmit","Fr_fmi","C_efmit","vcst_f","vcst_fm","P",
                                    "Ystat","Lstat","Dstat","Pstat","StatGVL_fme"};

        PROTECT(out_names = allocVector(STRSXP, 44));

        for(int ct = 0; ct < 44; ct++) SET_STRING_ELT(out_names, ct, mkChar(namesOut[ct]));

        setAttrib(output, R_NamesSymbol, out_names);

        UNPROTECT(2+44);
        return(output);
        delete object;

    }



}
}



////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
////------------------------------------------------------------------------------------------------
//
//
//using namespace boost;
//
//
////------------------------------------------
//// accesseur à un élément d'une liste donnée (list = liste en question , str {caractère} = intitulé de l'élément de la liste)
////------------------------------------------
//extern "C" {
//
//SEXP getListElt(SEXP list, const char *str)
//{
//    SEXP elmt = R_NilValue, names = getAttrib(list, R_NamesSymbol);
//    int i;
//
//    for (i = 0; i < length(list); i++)
//        if (strcmp(CHAR(STRING_ELT(names,i)), str) == 0) {
//            elmt = VECTOR_ELT(list, i);
//            break;
//        }
//
//    return elmt;
//}
//
//}
//
//
////------------------------------------------
//// Transcripteur des sorties .txt de la fonction de conversion du fichier IN_IAM.r
//// Renvoie les paramètres au format IAM sous R (listes imbriquées)
//// Format standard des fichiers .txt input (séparateur "\t") :
//
//    // list	character	NA	NA	NA	NA	NA	NA	Langoustine	Merlu_commun	Sole_commune	Fleet
//    // list	character	NA	NA	NA	NA	NA	NA	modI	modL	modC	icat	alk	fm	mm	M_i	mat_i	wStock_i	wL_i	wD_i	N_it0	N_i0t	F_fmi	B_i	Y_mi	C_mi	Y_i	C_i	d_i	doth_i	sr	SelRef	P_fmce	alpha_fmce	beta_fmce	gamma_fmce	TAC	Fbar	FmaxTarget	Lref_f_e	Lref_f_m_e	GVLref_f_e	GVLref_f_m_e
//    // var	character	NA	NA	NA	NA	NA	NA	1	2	3	4	5	6	7	8	+gp
//    // var	double	0	0	0	0	NA	NA	NA
//    // var	character	NA	NA	NA	NA	NA	NA	10	20	30	40
//    // var	double	NA	NA	NA	NA	9	4	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1	1	0	0	0	1	1	1	1	0	0	0	1	1	0	0	0	0	0	0	0
//    // var	double	0	0	0	0	NA	NA	NA
//
//// Descriptif :
//
//    // variable ou nouvelle liste imbriquée -- type de variable -- attributs DimCst (dim n°1 -- dim n°2 -- dim n°3 -- dim n°4) -- Codage Métier -- Dim Age ou Catégorie -- Elements énumérés de la variable ou des noms des éléments de la liste -- -- -- -- ...
//
////------------------------------------------
//
//
//
//extern "C" {
//SEXP Fun(SEXP File, SEXP Specific = R_NilValue) //file : character décrivant le path du fichier à transcrire  -----  specific : optionnel, la sortie de Fun appliquée au fichier 'specific.txt'
// {
//
//   SEXP imbricOBJ, file, specific;
//   PROTECT(file = duplicate(File));
//   PROTECT(specific = duplicate(Specific));
//   PROTECT(imbricOBJ = allocVector(VECSXP,5));  //on donne jusqu'à 5 niveaux d'imbrication pour l'objet
//   int IMAX[5]; //nbre d'élément à traiter
//   int I[5]; //élément traité par niveau
//   int n = 0; //niveau en cours de traitement
//
//   string ligne;
//   ifstream fichier(CHAR(STRING_ELT(file,0)));
//   if (!fichier) error("Can't read file !!\n");
//
//    vector< string > vec;
//    SEXP out, names, var, dimcst, Dim, DimNam;
//
//
//    //étape d'initialisation --> 1ère ligne
//
//    typedef boost::tokenizer<boost::char_separator<char> > tokenizer;
//    boost::char_separator<char> sep("\t" );
//
//    getline (fichier, ligne);
//    tokenizer tokens(ligne, sep);
//
//    vec.clear();
//    vec.assign(tokens.begin(),tokens.end());
//    std::vector<char const*> v( vec.size() );
//    for( size_t i = 8; i < v.size(); ++i ) v[i] = vec[i].c_str();
//
//    IMAX[n] = vec.size()-8;
//    I[n] = 0;
//    PROTECT(out = allocVector(VECSXP,IMAX[n]));
//    //on ajoute les noms des éléments
//    PROTECT(names = allocVector(STRSXP,IMAX[n]));
//    int count=0;
//    for( size_t i = 8; i < v.size(); ++i ) {SET_STRING_ELT(names,count,mkChar(v[i]));count++;}
//    setAttrib(out, R_NamesSymbol, names);
//    SET_VECTOR_ELT(imbricOBJ,0,out);
//
//
//
//   while (getline (fichier, ligne))
//   {
//
//     // tokenisation de la ligne courante
//     tokenizer tokens(ligne, sep);
//
//        vec.clear();
//        vec.assign(tokens.begin(),tokens.end());
//
//        std::vector<char const*> v( vec.size() );
//
//        for( size_t i = 8; i < v.size(); ++i ) v[i] = vec[i].c_str();
//
//        //1ère colonne qui détermine si on doit formater ou remplir
//
//        if (strcmp(vec[0].c_str(), "list") == 0) {
//
//            //on monte d'un niveau
//            n++;
//            //on fixe le nouveau imax pour le niveau en cours
//            IMAX[n] = vec.size()-8; //le premier élément de la ligne est seulement descriptif
//            //on initialise le compteur pour ce niveau
//            I[n] = 0;
//            //on crée une copie de l'objet à modifier après l'avoir intégré à l'output
//            SET_VECTOR_ELT(VECTOR_ELT(imbricOBJ,n-1),I[n-1],allocVector(VECSXP,IMAX[n]));
//            SET_VECTOR_ELT(imbricOBJ,n,VECTOR_ELT(VECTOR_ELT(imbricOBJ,n-1),I[n-1]));
//
//            PROTECT(names = allocVector(STRSXP,IMAX[n]));
//            int count=0;
//            for(size_t i = 8; i < v.size(); ++i ) {SET_STRING_ELT(names,count,mkChar(v[i]));count++;}
//            setAttrib(VECTOR_ELT(imbricOBJ,n), R_NamesSymbol, names);
//            UNPROTECT(1);
//
//            //on pointe sur cet élément dorénavant
//            I[n-1]++;
//
//        } else {
//
//            if (strcmp(vec[0].c_str(), "var") == 0) {
//
//            //on acccède à l'objet à modifier et on assigne un vecteur 'character' de taille donnée
//            PROTECT(var = allocVector(STRSXP,vec.size()-8));
//            //et on remplit
//            int count=0;
//            for(size_t i = 8; i < v.size(); ++i ) {SET_STRING_ELT(var,count,mkChar(v[i]));count++;}
//
//            //on prévoit d'ores et déjà le reformatage --> attribut 'DimCst'
//            if (strcmp(vec[2].c_str(), "NA") != 0) {
//
//               if (specific == NULL) error("missing 'specific' input object!!");
//
//               PROTECT(dimcst = allocVector(STRSXP,4)) ;
//               int count=0;
//               for(size_t i = 2; i < 6; ++i ) {SET_STRING_ELT(dimcst,count,mkChar(vec[i].c_str()));count++;}
//               int *dimC = INTEGER(AS_INTEGER(dimcst));
//               setAttrib(var, install("DimCst"),AS_INTEGER(dimcst));
//
//                //dimensions
//                int nbDim = 0; for (int j=0; j<4; j++) if (dimC[j]>0) nbDim++;
//
//                //si nbDim<1, pas de formatage
//
//                //si nbDim>1 formatage matriciel
//                if (nbDim>1) {
//
//                    PROTECT(Dim = allocVector(INTSXP,nbDim));
//                    int *dim = INTEGER(Dim); int index=0;
//                    for (int j=0; j<4; j++) if (dimC[j]>0) {dim[index] = dimC[j];index++;}
//                    setAttrib(var,R_DimSymbol,Dim);
//
//                    //noms de dimensions : si nbDim<1, pas de noms
//                    PROTECT(DimNam = allocVector(VECSXP,nbDim));
//                    //et on remplit en fonction des colonnes Dim et de l'objet Specific en input
//                    int rank=0;
//
//                    if (strcmp(vec[2].c_str(), "0") != 0) {
//                        SET_VECTOR_ELT(DimNam,rank,getListElt(specific, "Fleet"));rank++;
//                    }
//
//                    if (strcmp(vec[3].c_str(), "0") != 0) {
//                        if (strcmp(vec[6].c_str(), "B") == 0) {
//                        SET_VECTOR_ELT(DimNam,rank,getListElt(specific, "Metier"));rank++;
//                        } else {
//                        SET_VECTOR_ELT(DimNam,rank,getListElt(specific, "MetierEco"));rank++;
//                        }
//                    }
//
//                    if (strcmp(vec[4].c_str(), "0") != 0) { //il y a alors une dimension Espèce
//                        //on part du niveau 'n' et on remonte dans imbricObj pour les éléments I pour retrouver une modalité "espèce"
//                        int indSp = length(getListElt(specific, "Ages"));
//                        int flag = -1;
//
//                        for (int ii = n; ii>=0 ; ii--) {
//                            for (int J = 0; J<indSp; J++) {
//                                int val = I[ii]-1;
//                                if (ii==n) val++;
//
//                                if (strcmp( CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),J)) ,
//                                            CHAR(STRING_ELT(getAttrib(VECTOR_ELT(imbricOBJ,ii), R_NamesSymbol),val))) == 0) {
//                                    flag = J;
//                                    break;
//                                }
//                            }
//                            if (flag>=0) break;
//                        }
//
//                        if (strcmp(vec[7].c_str(), "A") == 0) {
//                            SET_VECTOR_ELT(DimNam,rank,
//                                            getListElt(getListElt(specific, "Ages"),
//                                                CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),flag))));
//                            rank++;
//                        } else {
//                            SET_VECTOR_ELT(DimNam,rank,
//                                            getListElt(getListElt(specific, "Cat"),
//                                                CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),flag))));
//                            rank++;
//                        }
//                    }
//
//                    if (strcmp(vec[5].c_str(), "0") != 0) {
//                        SET_VECTOR_ELT(DimNam,rank,AS_CHARACTER(getListElt(specific, "times")));rank++;
//                    }
//
//                    //et on assigne le résultat
//                    setAttrib(var,R_DimNamesSymbol,DimNam);
//
//                    UNPROTECT(2);
//                }
//
//                //si nbDim==1 formatage vectoriel
//                if (nbDim==1) {
//
//                    if (strcmp(vec[2].c_str(), "0") != 0) {
//                        setAttrib(var,R_NamesSymbol,getListElt(specific, "Fleet"));
//                    }
//
//                    if (strcmp(vec[3].c_str(), "0") != 0) {
//                        if (strcmp(vec[6].c_str(), "B") == 0) {
//                            setAttrib(var,R_NamesSymbol,getListElt(specific, "Metier"));
//                        } else {
//                            setAttrib(var,R_NamesSymbol,getListElt(specific, "MetierEco"));
//                        }
//                    }
//
//                    if (strcmp(vec[4].c_str(), "0") != 0) {
//                        //on part du niveau 'n' et on remonte dans imbricObj pour les éléments I pour retrouver une modalité "espèce"
//                        int indSp = length(getListElt(specific, "Ages"));
//                        int flag = -1;
//                        for (int ii = n; ii>=0 ; ii--) {
//                            for (int J = 0; J<indSp; J++) {
//
//                                if (strcmp( CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),J)) ,
//                                            CHAR(STRING_ELT(getAttrib(VECTOR_ELT(imbricOBJ,ii), R_NamesSymbol),I[ii]-1))) == 0) {
//                                    flag = J;
//                                    break;
//                                }
//                            }
//                            if (flag>=0) break;
//                        }
//
//                        if (strcmp(vec[7].c_str(), "A") == 0) {
//                            setAttrib(var,R_NamesSymbol,
//                                            getListElt(getListElt(specific, "Ages"),
//                                                CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),flag))));
//                        } else {
//                            setAttrib(var,R_NamesSymbol,
//                                            getListElt(getListElt(specific, "Cat"),
//                                                CHAR(STRING_ELT(getAttrib(getListElt(specific, "Ages"),R_NamesSymbol),flag))));
//                        }
//                    }
//
//                    if (strcmp(vec[5].c_str(), "0") != 0) {
//                        setAttrib(var,R_NamesSymbol,AS_CHARACTER(getListElt(specific, "times")));
//                    }
//                }
//
//                UNPROTECT(1);
//
//            } else { //matrice icat ou alk
//
//                PROTECT(Dim = allocVector(INTSXP,2));
//                int *dim = INTEGER(Dim);
//                PROTECT(DimNam = allocVector(VECSXP,2));
//
//                if (strcmp( CHAR(STRING_ELT(getAttrib(VECTOR_ELT(imbricOBJ,n), R_NamesSymbol),I[n])), "icat") == 0) {
//
//                    dim[0] = length(getListElt(VECTOR_ELT(imbricOBJ,n), "modI"));
//                    dim[1] = length(getListElt(VECTOR_ELT(imbricOBJ,n), "modC"));
//                    SET_VECTOR_ELT(DimNam,0,getListElt(VECTOR_ELT(imbricOBJ,n), "modI"));
//                    SET_VECTOR_ELT(DimNam,1,getListElt(VECTOR_ELT(imbricOBJ,n), "modC"));
//
//                    setAttrib(var,R_DimSymbol,Dim);
//                    setAttrib(var,R_DimNamesSymbol,DimNam);
//                }
//
//                if (strcmp( CHAR(STRING_ELT(getAttrib(VECTOR_ELT(imbricOBJ,n), R_NamesSymbol),I[n])), "alk") == 0) {
//
//                    dim[0] = length(getListElt(VECTOR_ELT(imbricOBJ,n), "modL"));
//                    dim[1] = length(getListElt(VECTOR_ELT(imbricOBJ,n), "modI"));
//                    SET_VECTOR_ELT(DimNam,0,getListElt(VECTOR_ELT(imbricOBJ,n), "modL"));
//                    SET_VECTOR_ELT(DimNam,1,getListElt(VECTOR_ELT(imbricOBJ,n), "modI"));
//
//                    setAttrib(var,R_DimSymbol,Dim);
//                    setAttrib(var,R_DimNamesSymbol,DimNam);
//                }
//
//                UNPROTECT(2);
//
//            }
//
//            //on insère le résultat dans 'out' en fonction du type de sortie
//            if (strcmp(vec[1].c_str(), "double") == 0) {
//
//                SET_VECTOR_ELT(VECTOR_ELT(imbricOBJ,n),I[n],AS_NUMERIC(var));
//
//            } else {
//
//                if (strcmp(vec[1].c_str(), "integer") == 0) {
//
//                    SET_VECTOR_ELT(VECTOR_ELT(imbricOBJ,n),I[n],AS_INTEGER(var));
//
//                } else {
//
//                    SET_VECTOR_ELT(VECTOR_ELT(imbricOBJ,n),I[n],var);
//
//                }
//            }
//
//            UNPROTECT(1);
//            I[n]++;
//            while (I[n]>=IMAX[n]) n--;
//
//        }
//        }
//
//   }
//    fichier.close();
//    UNPROTECT(5);
//    return out;
//}
//}
//
//
//
////------------------------------------------
//// fonction similaire à IAM, mais appelant des fichiers .txt de paramètres créés à partir des fonctions 'unl'
////------------------------------------------
//
//extern "C" {
//SEXP IAM_txt(SEXP fileParam, SEXP fileSpec, SEXP fileInput, SEXP fileScen /*= R_NilValue*/, SEXP fileStoch /*= R_NilValue*/) {
//
//
//SEXP outp, listInput_txt, listSpec_txt, listStoch_txt, listScen_txt, listParam_txt, inScen;
//
//
//PROTECT(listSpec_txt = Fun(fileSpec));
//PROTECT(listInput_txt = Fun(fileInput,listSpec_txt));
//PROTECT(listParam_txt = Fun(fileParam,listSpec_txt));
//if (fileScen == NULL) {
//        PROTECT(listScen_txt = R_NilValue);
//} else {
//        PROTECT(listScen_txt = Fun(fileScen,listSpec_txt));
//}
//
//if (fileStoch == NULL) {
//        PROTECT(listStoch_txt = R_NilValue);
//} else {
//        PROTECT(listStoch_txt = Fun(fileStoch,listSpec_txt));
//}
//
//
//if (length(getListElt(listParam_txt,"scenario"))==0) {
//    PROTECT(inScen = R_NilValue);
//} else {
//    PROTECT(inScen = getListElt(listScen_txt, CHAR(STRING_ELT(getListElt(listParam_txt,"scenario"),0))));
//}
//
//PROTECT(outp = IAM(listInput_txt,
//                  listSpec_txt,
//                  listStoch_txt,
//                  inScen,
//                  getListElt(listParam_txt,"RecType1"),
//                  getListElt(listParam_txt,"RecType2"),
//                  getListElt(listParam_txt,"RecType3"),
//                  getListElt(listParam_txt,"Scenarii"),
//                  getListElt(listParam_txt,"Bootstrp"),
//                  getListElt(listParam_txt,"nbBoot"),
//                  getListElt(listParam_txt,"GestInd"),
//                  getListElt(listParam_txt,"mF"),
//                  getListElt(listParam_txt,"mOth"),
//                  getListElt(listParam_txt,"bounds"),
//                  getListElt(listParam_txt,"TAC"),
//                  getListElt(listParam_txt,"FBAR"),
//                  getListElt(listParam_txt,"GestParam"),
//                  getListElt(listParam_txt,"EcoDcf"),
//                  getListElt(listParam_txt,"EcoInd"),
//                  getListElt(listParam_txt,"dr"),
//                  getListElt(listParam_txt,"SRind"),
//                  getListElt(listParam_txt,"listSR"),
//                  getListElt(listParam_txt,"TypeSR"),
//                  getListElt(listParam_txt,"mFM"),
//                  getListElt(listParam_txt,"bootVar")
//                  )
//        );
//
//
//UNPROTECT(7);
//
//return(outp);
//
//}
//}
//
//
////------------------------------------------
//// fonction d'exportation d'une variable de sortie au format data.frame, dans un fichier .txt avec séparateurs '\t'
////------------------------------------------
//
//SEXP IDim(int *dimInput) {
//
//    SEXP Tab;
//    PROTECT(Tab = allocVector(INTSXP,4));
//    int *tab = INTEGER(Tab);
//
//    tab[0] = (dimInput[0]>0);
//    tab[1] = (dimInput[1]>0)*(1 + (dimInput[0]-1)*(dimInput[0]>0));
//    tab[2] = (dimInput[2]>0)*(1 + (dimInput[1]-1)*(dimInput[1]>0))*(1 + (dimInput[0]-1)*(dimInput[0]>0));
//    tab[3] = (dimInput[3]>0)*(1 + (dimInput[2]-1)*(dimInput[2]>0))*(1 + (dimInput[1]-1)*(dimInput[1]>0))*(1 + (dimInput[0]-1)*(dimInput[0]>0));
//
//    UNPROTECT(1);
//    return(Tab);
//
//}
//
//
//extern "C" {
//SEXP IAM_export(SEXP vrbl, SEXP fileExp, SEXP replic, SEXP species) { // vrbl : variable de sortie
//                                                             // fileExp : nom du fichier en sortie
//                                                             // rep : 1/0 itérations ou non
//                                                             // spp : 1/0 par espèce ou non
//
//    SEXP vrblType, val = R_NilValue, dimnam = R_NilValue, namSpp = R_NilValue;
//    int nbIter = 0, nbSpp = 0, rep = INTEGER(replic)[0], spp = INTEGER(species)[0];
//    int *dimCst, *ind;
//    int index[4];
//    double *values;
//
//
//    string const fichier(CHAR(STRING_ELT(fileExp,0)));
//    ofstream flux(fichier.c_str());
//    if (!flux) error("Can't open file!!\n");
//
//    if (rep) {
//        nbIter = length(vrbl);
//        if (spp) {
//            nbSpp = length(VECTOR_ELT(vrbl,0));//Rprintf("A1 ");
//            PROTECT(namSpp=getAttrib(VECTOR_ELT(vrbl,0),R_NamesSymbol));//Rprintf("A2 ");
//            PROTECT(vrblType=VECTOR_ELT(VECTOR_ELT(vrbl,0),0));//Rprintf("A3 ");
//        } else {
//            PROTECT(vrblType=VECTOR_ELT(vrbl,0));//Rprintf("A4 ");
//        }
//    } else {
//        if (spp) {
//            nbSpp = length(vrbl);//Rprintf("A5 ");
//            PROTECT(namSpp=getAttrib(vrbl,R_NamesSymbol));//Rprintf("A6 ");
//            PROTECT(vrblType=VECTOR_ELT(vrbl,0));//Rprintf("A7 ");
//        } else {
//            PROTECT(vrblType=vrbl);//Rprintf("A8 \n");
//        }
//    }
////Rprintf("AA\n");
//    dimCst = INTEGER(getAttrib(vrblType, install("DimCst")));
////Rprintf("BB\n");
//
//
////Rprintf("CC\n");
//
//    if (flux)
//    {   //en-têtes
//        if (rep) flux << "iter" << '\t';
//        if (spp) flux << "spp" << '\t';
//        if (dimCst[0]>0) flux << "fleet" << '\t';
//        if (dimCst[1]>0) flux << "metier" << '\t';
//        if (dimCst[2]>0) flux << "age" << '\t';
//        if (dimCst[3]>0) flux << "year" << '\t';
//        flux << "value" << endl;
//
//        for (int it = 0; it < imax2(nbIter,1); it++)
//            for (int sp = 0; sp < imax2(nbSpp,1); sp++) {
//
//                if (rep & spp) PROTECT(val=VECTOR_ELT(VECTOR_ELT(vrbl,it),sp));//Rprintf("DD1 ");
//
//                if (rep & !spp) PROTECT(val=VECTOR_ELT(vrbl,it));//Rprintf("DD2 ");
//
//                if (!rep & spp) PROTECT(val=VECTOR_ELT(vrbl,sp));//Rprintf("DD3 ");
//
//                if (!rep & !spp) PROTECT(val=vrbl);//Rprintf("DD4 \n");
//
//                dimCst = INTEGER(getAttrib(val, install("DimCst")));
//                ind = INTEGER(IDim(dimCst));
//
//                //on veut les indices des dimensions selon l'attribut dimCst
//                int nb = 0;
//                for (int i=0; i<4; i++)  {
//
//                    if (dimCst[i]>0) {
//
//                        index[i] = nb; nb++;
//
//                    } else {
//
//                        index[i] = -1;
//                    }
//                }
//                    //on en déduit les intitulés de la variable
//                if (nb>1) {
//                    PROTECT(dimnam = getAttrib(val,R_DimNamesSymbol));
//                } else {
//                    PROTECT(dimnam = getAttrib(val,R_NamesSymbol));
//                }
//
//                values = REAL(val);
//
//                for (int fl = 0; fl < imax2(dimCst[0],1); fl++)
//                    for (int met = 0; met < imax2(dimCst[1],1); met++)
//                        for (int ag = 0; ag < imax2(dimCst[2],1); ag++)
//                            for (int yr = 0; yr < imax2(dimCst[3],1); yr++) {
//
//                                if (rep & spp) flux << it+1 << '\t' << CHAR(STRING_ELT(namSpp,sp)) << '\t';
//
//                                if (rep & !spp) flux << it+1 << '\t';
//
//                                if (!rep & spp) flux << CHAR(STRING_ELT(namSpp,sp)) << '\t';
//
//                                if (dimCst[0]>0) {
//                                    if (nb>1) {
//                                       flux << CHAR(STRING_ELT(VECTOR_ELT(dimnam,index[0]),fl)) << '\t';
//                                    } else {
//                                       flux << CHAR(STRING_ELT(dimnam,fl)) << '\t';
//                                    }
//                                }
//
//                                if (dimCst[1]>0) {
//                                    if (nb>1) {
//                                       flux << CHAR(STRING_ELT(VECTOR_ELT(dimnam,index[1]),met)) << '\t';
//                                    } else {
//                                       flux << CHAR(STRING_ELT(dimnam,met)) << '\t';
//                                    }
//                                }
//
//                                if (dimCst[2]>0) {
//                                    if (nb>1) {
//                                       flux << CHAR(STRING_ELT(VECTOR_ELT(dimnam,index[2]),ag)) << '\t';
//                                    } else {
//                                       flux << CHAR(STRING_ELT(dimnam,ag)) << '\t';
//                                    }
//                                }
//
//                                if (dimCst[3]>0) {
//                                    if (nb>1) {
//                                       flux << CHAR(STRING_ELT(VECTOR_ELT(dimnam,index[3]),yr)) << '\t';
//                                    } else {
//                                       flux << CHAR(STRING_ELT(dimnam,yr)) << '\t';
//                                    }
//                                }
//
//                                flux << values[fl*ind[0] + met*ind[1] + ag*ind[2] + yr*ind[3]] << endl;
//
//                                }
//
//                     UNPROTECT(2);
//
//                }
//    }
//
//    UNPROTECT(1);
//    if (spp) UNPROTECT(1);
//
//    return(fileExp);
//
//}
//}
//
////------------------------------------------------------------------------------
////-------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////-------------------------------------------------------------------------------
////------------------------------------------------------------------------------
////-------------------------------------------------------------------------------
//
//
//extern "C" {
//
//SEXP IAM_txtIN_txtOUT(){
//
//
//SEXP nmsIN, nmsOUT, result, reP, spP, out;
//SEXP tempIN, tempOUT, spec, args;
//int *sppInt, *repInt;
//bool is_scen, is_sto;
//
//
////const char *inputFiles[5] = {"C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Input\\argsCPP.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Input\\specific.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Input\\input.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Input\\scenario.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Input\\stochastic.txt"};
//
//const char *inputFiles[5] = {"C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Input\\argsCPP.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Input\\specific.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Input\\input.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Input\\scenario.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Input\\stochastic.txt"};
//
//PROTECT(nmsIN = allocVector(VECSXP, 5));
//
//for(int k = 0; k < 5; k++) {
//    PROTECT(tempIN = allocVector(STRSXP,1));
//    SET_STRING_ELT(tempIN, 0, mkChar(inputFiles[k]));
//    SET_VECTOR_ELT(nmsIN,k,tempIN);
//    UNPROTECT(1);
//}
//
//
////const char *outputFiles[11] = {"C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\SSB.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\Fbar.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\Ctot.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\Ytot.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\Y.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\L.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\D.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\GVL.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\GVA.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\GCF.txt",
////                            "C:\\Documents and Settings\\mmerzere\\Bureau\\COST_R\\IAMwdSIAD\\Output\\PS.txt"};
//
//const char *outputFiles[11] = {"C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\SSB.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\Fbar.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\Ctot.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\Ytot.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\Y.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\L.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\D.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\GVL.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\GVA.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\GCF.txt",
//                            "C:\\Documents and Settings\\mmerzere\\Bureau\\SiteSIAD_Report\\Output\\PS.txt"};
//
//
//PROTECT(nmsOUT = allocVector(VECSXP, 11));
//
//for(int k = 0; k < 11; k++) {
//    PROTECT(tempOUT = allocVector(STRSXP,1));
//    SET_STRING_ELT(tempOUT, 0, mkChar(outputFiles[k]));
//    SET_VECTOR_ELT(nmsOUT,k,tempOUT);
//    UNPROTECT(1);
//}
//
//ifstream is_scenar(inputFiles[3]);//est-ce que le fichier 'scenario.txt' existe?
//ifstream is_stochastic(inputFiles[4]);//est-ce que le fichier 'stochastic.txt' existe?
//
//if (is_scenar) is_scen=true; else is_scen=false; is_scenar.close();
//if (is_stochastic) is_sto=true; else is_sto=false; is_stochastic.close();
//
////on doit determiner à partir du fichier 'arguments' si on est en présence de réplicats ou non
//PROTECT(spec = Fun(VECTOR_ELT(nmsIN,1)));
//PROTECT(args = Fun(VECTOR_ELT(nmsIN,0),spec));
//PROTECT(reP = getListElt(args,"Bootstrp")); repInt = INTEGER(reP);
//
//if (is_scen) {
//    if (is_sto) {
//        PROTECT(result = IAM_txt(VECTOR_ELT(nmsIN,0), VECTOR_ELT(nmsIN,1), VECTOR_ELT(nmsIN,2), VECTOR_ELT(nmsIN,3), VECTOR_ELT(nmsIN,4)));
//    } else {
//        PROTECT(result = IAM_txt(VECTOR_ELT(nmsIN,0), VECTOR_ELT(nmsIN,1), VECTOR_ELT(nmsIN,2), VECTOR_ELT(nmsIN,3), NULL));
//    }
//} else {
//    if (is_sto) {
//        PROTECT(result = IAM_txt(VECTOR_ELT(nmsIN,0), VECTOR_ELT(nmsIN,1), VECTOR_ELT(nmsIN,2), NULL, VECTOR_ELT(nmsIN,4)));
//    } else {
//        PROTECT(result = IAM_txt(VECTOR_ELT(nmsIN,0), VECTOR_ELT(nmsIN,1), VECTOR_ELT(nmsIN,2), NULL, NULL));
//    }
//}
//
////on exporte maintenant les résultats
//
//PROTECT(spP = allocVector(INTSXP,1)); sppInt = INTEGER(spP); //à remettre à jour pour chacun des cas (chaque variable)
//
////SSB
//sppInt[0] = 1; //variable Sp -> double contrôle à opérer sur la disponibilité de la donnée
//if (repInt[0]>0) {
//    if (length(getListElt(result,"SSB"))>0 & length(VECTOR_ELT(getListElt(result,"SSB"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"SSB"),0),0))>0)
//        out = IAM_export(getListElt(result,"SSB"),  VECTOR_ELT(nmsOUT,0), reP, spP);
//} else {
//    if (length(getListElt(result,"SSB"))>0 & length(VECTOR_ELT(getListElt(result,"SSB"),0))>0)
//        out = IAM_export(getListElt(result,"SSB"),  VECTOR_ELT(nmsOUT,0), reP, spP);
//}
//
////Fbar
//sppInt[0] = 1; // <- intutile mais à but illustratif
//if (repInt[0]>0) {
//    if (length(getListElt(result,"Fbar"))>0 & length(VECTOR_ELT(getListElt(result,"Fbar"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"Fbar"),0),0))>0)
//        out = IAM_export(getListElt(result,"Fbar"),  VECTOR_ELT(nmsOUT,1), reP, spP);
//} else {
//    if (length(getListElt(result,"Fbar"))>0 & length(VECTOR_ELT(getListElt(result,"Fbar"),0))>0)
//        out = IAM_export(getListElt(result,"Fbar"),  VECTOR_ELT(nmsOUT,1), reP, spP);
//}
//
////Ctot
//sppInt[0] = 1;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"Ctot"))>0 & length(VECTOR_ELT(getListElt(result,"Ctot"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"Ctot"),0),0))>0)
//        out = IAM_export(getListElt(result,"Ctot"),  VECTOR_ELT(nmsOUT,2), reP, spP);
//} else {
//    if (length(getListElt(result,"Ctot"))>0 & length(VECTOR_ELT(getListElt(result,"Ctot"),0))>0)
//        out = IAM_export(getListElt(result,"Ctot"),  VECTOR_ELT(nmsOUT,2), reP, spP);
//}
//
////Ytot
//sppInt[0] = 1;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"Ytot"))>0 & length(VECTOR_ELT(getListElt(result,"Ytot"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"Ytot"),0),0))>0)
//        out = IAM_export(getListElt(result,"Ytot"),  VECTOR_ELT(nmsOUT,3), reP, spP);
//} else {
//    if (length(getListElt(result,"Ytot"))>0 & length(VECTOR_ELT(getListElt(result,"Ytot"),0))>0)
//        out = IAM_export(getListElt(result,"Ytot"),  VECTOR_ELT(nmsOUT,3), reP, spP);
//}
//
////Y
//sppInt[0] = 1;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"Yfmi"))>0 & length(VECTOR_ELT(getListElt(result,"Yfmi"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"Yfmi"),0),0))>0)
//        out = IAM_export(getListElt(result,"Yfmi"),  VECTOR_ELT(nmsOUT,4), reP, spP);
//} else {
//    if (length(getListElt(result,"Y"))>0 & length(VECTOR_ELT(getListElt(result,"Y"),0))>0)
//        out = IAM_export(getListElt(result,"Y"),  VECTOR_ELT(nmsOUT,4), reP, spP);
//}
//
//
////L
//sppInt[0] = 1;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"L_efmit"))>0 & length(VECTOR_ELT(getListElt(result,"L_efmit"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"L_efmit"),0),0))>0)
//        out = IAM_export(getListElt(result,"L_efmit"),  VECTOR_ELT(nmsOUT,5), reP, spP);
//} else {
//    if (length(getListElt(result,"Li"))>0 & length(VECTOR_ELT(getListElt(result,"Li"),0))>0)
//        out = IAM_export(getListElt(result,"Li"),  VECTOR_ELT(nmsOUT,5), reP, spP);
//}
//
//
////D
//sppInt[0] = 1;
//if (repInt[0]>0) {
//     if (length(getListElt(result,"D_efmit"))>0 & length(VECTOR_ELT(getListElt(result,"D_efmit"),0))>0 & length(VECTOR_ELT(VECTOR_ELT(getListElt(result,"D_efmit"),0),0))>0)
//        out = IAM_export(getListElt(result,"D_efmit"),  VECTOR_ELT(nmsOUT,6), reP, spP);
//} else {
//    if (length(getListElt(result,"D"))>0 & length(VECTOR_ELT(getListElt(result,"D"),0))>0)
//        out = IAM_export(getListElt(result,"D"),  VECTOR_ELT(nmsOUT,6), reP, spP);
//}
//
//
////GVLav
//sppInt[0] = 0;
//if (repInt[0]>0) {
//     if (length(getListElt(result,"GVLav_f"))>0 & length(VECTOR_ELT(getListElt(result,"GVLav_f"),0))>0)
//        out = IAM_export(getListElt(result,"GVLav_f"),  VECTOR_ELT(nmsOUT,7), reP, spP);
//} else {
//    if (length(getListElt(getListElt(result,"E"),"GVLav_f"))>0)
//        out = IAM_export(getListElt(getListElt(result,"E"),"GVLav_f"),  VECTOR_ELT(nmsOUT,7), reP, spP);
//}
//
//
////GVA
//sppInt[0] = 0;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"gva_f"))>0 & length(VECTOR_ELT(getListElt(result,"gva_f"),0))>0)
//        out = IAM_export(getListElt(result,"gva_f"),  VECTOR_ELT(nmsOUT,8), reP, spP);
//} else {
//    if (length(getListElt(getListElt(result,"E"),"gva_f"))>0)
//        out = IAM_export(getListElt(getListElt(result,"E"),"gva_f"),  VECTOR_ELT(nmsOUT,8), reP, spP);
//}
//
//
////GCF
//sppInt[0] = 0;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"gcf_f"))>0 & length(VECTOR_ELT(getListElt(result,"gcf_f"),0))>0)
//        out = IAM_export(getListElt(result,"gcf_f"),  VECTOR_ELT(nmsOUT,9), reP, spP);
//} else {
//    if (length(getListElt(getListElt(result,"E"),"gcf_f"))>0)
//        out = IAM_export(getListElt(getListElt(result,"E"),"gcf_f"),  VECTOR_ELT(nmsOUT,9), reP, spP);
//}
//
////PS
//sppInt[0] = 0;
//if (repInt[0]>0) {
//    if (length(getListElt(result,"ps_f"))>0 & length(VECTOR_ELT(getListElt(result,"ps_f"),0))>0)
//        out = IAM_export(getListElt(result,"ps_f"),  VECTOR_ELT(nmsOUT,10), reP, spP);
//} else {
//    if (length(getListElt(getListElt(result,"E"),"ps_f"))>0)
//        out = IAM_export(getListElt(getListElt(result,"E"),"ps_f"),  VECTOR_ELT(nmsOUT,10), reP, spP);
//}
//
//
//UNPROTECT(7);
//
////return(R_NilValue);
//return(result);
//
//}
//}
//

//------------------------------------------------------------------------------
//-------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//-------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//-------------------------------------------------------------------------------


int main()
{

    return 0;
}

